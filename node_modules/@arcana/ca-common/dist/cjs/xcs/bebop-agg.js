"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BebopAggregator = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importStar(require("axios"));
const viem_1 = require("viem");
const iface_1 = require("./iface");
const definition_1 = require("../proto/definition");
const data_1 = require("../data");
// https://api.bebop.xyz/{jam|pmm}/chains
const ChainNameMapping = new Map(Object.entries({
    ethereum: 1,
    arbitrum: 42161,
    optimism: 10,
    base: 8453,
    taiko: 167000,
    bsc: 56,
    monadtestnet: 10143,
    megaethtestnet: 6342,
    berachain: 80094,
    polygon: 137,
    zksync: 324,
    blast: 81457,
    mode: 34443,
    scroll: 534352,
    superseed: 5330,
}).map(([k, v]) => [(0, viem_1.bytesToHex)((0, data_1.encodeChainID36)(definition_1.Universe.ETHEREUM, v)), k]));
class BebopAggregator {
    static BASE_URL = "https://api.bebop.xyz/router";
    static COMMON_OPTIONS = {
        approval_type: "Standard",
        skip_validation: "true",
        gasless: false,
    };
    axios;
    constructor(apiKey) {
        this.axios = axios_1.default.create({
            baseURL: BebopAggregator.BASE_URL,
            headers: {
                "Source-Auth": apiKey,
            },
            params: {
                source: "arcana",
            },
        });
    }
    async getQuotes(requests) {
        const list = await Promise.allSettled(requests.map(async (r) => {
            const chainName = ChainNameMapping.get((0, viem_1.bytesToHex)(r.chain.toBytes()));
            if (chainName == null) {
                return null;
            }
            let respPromise;
            const inputTokenAddr = (0, viem_1.getAddress)((0, viem_1.bytesToHex)(r.inputToken.subarray(12)));
            const outputTokenAddr = (0, viem_1.getAddress)((0, viem_1.bytesToHex)(r.outputToken.subarray(12)));
            const userAddrHex = (0, viem_1.getAddress)((0, viem_1.bytesToHex)(r.userAddress.subarray(12)));
            const receiverAddrHex = r.receiverAddress != null
                ? (0, viem_1.getAddress)((0, viem_1.bytesToHex)(r.receiverAddress.subarray(12)))
                : userAddrHex;
            switch (r.type) {
                case iface_1.QuoteType.ExactIn: {
                    respPromise = this.axios({
                        method: "GET",
                        url: `/${chainName}/v1/quote`,
                        params: {
                            sell_tokens: inputTokenAddr,
                            buy_tokens: outputTokenAddr,
                            taker_address: userAddrHex,
                            receiver_address: receiverAddrHex,
                            sell_amounts: r.inputAmount.toString(),
                            ...BebopAggregator.COMMON_OPTIONS,
                        },
                    });
                    break;
                }
                case iface_1.QuoteType.ExactOut: {
                    respPromise = this.axios({
                        method: "GET",
                        url: `/${chainName}/v1/quote`,
                        params: {
                            sell_tokens: inputTokenAddr,
                            buy_tokens: outputTokenAddr,
                            taker_address: userAddrHex,
                            receiver_address: receiverAddrHex,
                            buy_amounts: r.outputAmount.toString(),
                            ...BebopAggregator.COMMON_OPTIONS,
                        },
                    });
                    break;
                }
            }
            let resp;
            try {
                resp = await respPromise;
            }
            catch (e) {
                if (e instanceof axios_1.AxiosError && e.isAxiosError) {
                    if (e.response?.status === 404 &&
                        e.response.data.code === 1002 &&
                        e.response.data.message ===
                            "No available quotes for the requested transfer") {
                        return null;
                    }
                }
                throw e;
            }
            const bestRoute = resp.data.routes?.at(0);
            if (bestRoute == null) {
                return null;
            }
            const buyT = bestRoute.quote.buyTokens[outputTokenAddr];
            return {
                type: r.type,
                inputAmount: BigInt(bestRoute.quote.sellTokens[inputTokenAddr].amount),
                outputAmountMinimum: BigInt(buyT.minimumAmount),
                outputAmountLikely: BigInt(buyT.amount),
                originalResponse: bestRoute,
            };
        }));
        return list.map((item) => {
            switch (item.status) {
                case "fulfilled": {
                    return item.value;
                }
                case "rejected": {
                    console.error("Caught error in fetching Bebop quotes:", item.reason);
                    return null;
                }
            }
        });
    }
}
exports.BebopAggregator = BebopAggregator;
