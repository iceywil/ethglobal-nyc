"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OmniversalChainID = void 0;
exports.encodeChainID36 = encodeChainID36;
const viem_1 = require("viem");
const definition_1 = require("../proto/definition");
const utils_1 = require("./utils");
function encodeChainID36(universe, chainID) {
    let chainIDB;
    if (Buffer.isBuffer(chainID) || chainID instanceof Uint8Array) {
        chainIDB = chainID;
    }
    else {
        chainIDB = (0, viem_1.toBytes)(chainID);
    }
    const buf = Buffer.alloc(36);
    buf.writeUint32BE(universe);
    buf.set(chainIDB, 4 + (32 - chainIDB.length));
    return buf;
}
class OmniversalChainID {
    universe;
    chainID;
    binaryForm;
    constructor(universe, chainID) {
        this.universe = universe;
        if (typeof chainID === 'bigint') {
            this.chainID = chainID;
        }
        else if (typeof chainID === 'number' || typeof chainID === 'string') {
            this.chainID = BigInt(chainID);
        }
        else if (chainID instanceof Uint8Array) {
            this.chainID = (0, viem_1.bytesToBigInt)(chainID);
        }
        this.binaryForm = encodeChainID36(this.universe, this.chainID);
    }
    toString() {
        return (0, definition_1.universeToJSON)(this.universe) + '_' + this.chainID.toString(10);
    }
    toJSON() {
        return {
            universe: (0, definition_1.universeToJSON)(this.universe),
            chainID: (0, viem_1.toHex)(this.chainID)
        };
    }
    static fromJSON(input) {
        return new OmniversalChainID((0, definition_1.universeFromJSON)(input.universe), (0, viem_1.hexToBigInt)(input.chainID));
    }
    static fromChainID36(_input) {
        const input = (0, utils_1.convertToBufferIfNecessary)(_input);
        const univID = input.readUint32BE(0);
        const rest = input.subarray(4);
        return new OmniversalChainID(univID, rest);
    }
    // Do not modify the returned buffer. Make a copy if necessary.
    toBytes() {
        return this.binaryForm;
    }
    equals(rhs) {
        return this.universe === rhs.universe && this.chainID === rhs.chainID;
    }
    static equals(lhs, rhs) {
        return lhs.equals(rhs);
    }
}
exports.OmniversalChainID = OmniversalChainID;
