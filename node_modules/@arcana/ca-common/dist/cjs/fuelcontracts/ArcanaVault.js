"use strict";
/* Autogenerated file. Do not edit manually. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArcanaVault = exports.ArcanaVaultInterface = exports.UniverseOutput = exports.UniverseInput = exports.RoleAccessErrorOutput = exports.RoleAccessErrorInput = exports.ReentrancyErrorOutput = exports.ReentrancyErrorInput = exports.InitializationErrorOutput = exports.InitializationErrorInput = exports.AccessErrorOutput = exports.AccessErrorInput = void 0;
const fuels_1 = require("fuels");
var AccessErrorInput;
(function (AccessErrorInput) {
    AccessErrorInput["NotOwner"] = "NotOwner";
})(AccessErrorInput || (exports.AccessErrorInput = AccessErrorInput = {}));
var AccessErrorOutput;
(function (AccessErrorOutput) {
    AccessErrorOutput["NotOwner"] = "NotOwner";
})(AccessErrorOutput || (exports.AccessErrorOutput = AccessErrorOutput = {}));
var InitializationErrorInput;
(function (InitializationErrorInput) {
    InitializationErrorInput["CannotReinitialized"] = "CannotReinitialized";
})(InitializationErrorInput || (exports.InitializationErrorInput = InitializationErrorInput = {}));
var InitializationErrorOutput;
(function (InitializationErrorOutput) {
    InitializationErrorOutput["CannotReinitialized"] = "CannotReinitialized";
})(InitializationErrorOutput || (exports.InitializationErrorOutput = InitializationErrorOutput = {}));
var ReentrancyErrorInput;
(function (ReentrancyErrorInput) {
    ReentrancyErrorInput["NonReentrant"] = "NonReentrant";
})(ReentrancyErrorInput || (exports.ReentrancyErrorInput = ReentrancyErrorInput = {}));
var ReentrancyErrorOutput;
(function (ReentrancyErrorOutput) {
    ReentrancyErrorOutput["NonReentrant"] = "NonReentrant";
})(ReentrancyErrorOutput || (exports.ReentrancyErrorOutput = ReentrancyErrorOutput = {}));
var RoleAccessErrorInput;
(function (RoleAccessErrorInput) {
    RoleAccessErrorInput["NotSettlementVerifier"] = "NotSettlementVerifier";
    RoleAccessErrorInput["NotRefundEligible"] = "NotRefundEligible";
})(RoleAccessErrorInput || (exports.RoleAccessErrorInput = RoleAccessErrorInput = {}));
var RoleAccessErrorOutput;
(function (RoleAccessErrorOutput) {
    RoleAccessErrorOutput["NotSettlementVerifier"] = "NotSettlementVerifier";
    RoleAccessErrorOutput["NotRefundEligible"] = "NotRefundEligible";
})(RoleAccessErrorOutput || (exports.RoleAccessErrorOutput = RoleAccessErrorOutput = {}));
var UniverseInput;
(function (UniverseInput) {
    UniverseInput["ETHEREUM"] = "ETHEREUM";
    UniverseInput["FUEL"] = "FUEL";
    UniverseInput["SOLANA"] = "SOLANA";
})(UniverseInput || (exports.UniverseInput = UniverseInput = {}));
var UniverseOutput;
(function (UniverseOutput) {
    UniverseOutput["ETHEREUM"] = "ETHEREUM";
    UniverseOutput["FUEL"] = "FUEL";
    UniverseOutput["SOLANA"] = "SOLANA";
})(UniverseOutput || (exports.UniverseOutput = UniverseOutput = {}));
const abi = {
    programType: "contract",
    specVersion: "1",
    encodingVersion: "1",
    concreteTypes: [
        {
            type: "()",
            concreteTypeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
        },
        {
            type: "b256",
            concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
        },
        {
            type: "bool",
            concreteTypeId: "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
        },
        {
            type: "enum errors::RoleAccessError",
            concreteTypeId: "19d4ddc6bfa7239c40e8a40045394730ec18e202048f5b6404eb6b453bb70362",
            metadataTypeId: 2,
        },
        {
            type: "enum errors::VaultError",
            concreteTypeId: "1174ac322e5f50aeb24de065558295d834bab4ad055eedc043379d91a8958834",
            metadataTypeId: 3,
        },
        {
            type: "enum standards::src5::AccessError",
            concreteTypeId: "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
            metadataTypeId: 4,
        },
        {
            type: "enum standards::src5::State",
            concreteTypeId: "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
            metadataTypeId: 5,
        },
        {
            type: "enum std::identity::Identity",
            concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
            metadataTypeId: 6,
        },
        {
            type: "enum std::option::Option<bool>",
            concreteTypeId: "160e7964babcf172e41aa29b138f9c2ccfc416ad2368dabdbdf877ec5de5503f",
            metadataTypeId: 7,
            typeArguments: [
                "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
            ],
        },
        {
            type: "enum std::option::Option<struct data_structures::Request>",
            concreteTypeId: "2644cb541197d16874ed15ff9b4e74d0cb01be34849c3fb2d8356f064f7b097a",
            metadataTypeId: 7,
            typeArguments: [
                "8f17cef827b9269639659b2f90120c93255dfedb8f58f7f69e7f2f2a9040077d",
            ],
        },
        {
            type: "enum sway_libs::ownership::errors::InitializationError",
            concreteTypeId: "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
            metadataTypeId: 8,
        },
        {
            type: "enum sway_libs::reentrancy::errors::ReentrancyError",
            concreteTypeId: "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038",
            metadataTypeId: 9,
        },
        {
            type: "struct data_structures::Request",
            concreteTypeId: "8f17cef827b9269639659b2f90120c93255dfedb8f58f7f69e7f2f2a9040077d",
            metadataTypeId: 14,
        },
        {
            type: "struct data_structures::SettleData",
            concreteTypeId: "3f398311d910f45891ebe297c796818054c203bb631628fb87216c30add71db0",
            metadataTypeId: 15,
        },
        {
            type: "struct events::Deposit",
            concreteTypeId: "a93fb3d7088884ac8084fc44b117612059604f3d2051bfb1e2612381c3cebda9",
            metadataTypeId: 17,
        },
        {
            type: "struct events::Fill",
            concreteTypeId: "5d6f0cf603f336a11e076b3797ac315dc56056f8fd733e270621be9b42f539f8",
            metadataTypeId: 18,
        },
        {
            type: "struct events::RefundEligibleRoleSet",
            concreteTypeId: "6bf7e984bfcd09a667a74ad394cc04dc36275dcc2610439ddd4eb06e138e0c99",
            metadataTypeId: 19,
        },
        {
            type: "struct events::RefundEligibleRoleTransfer",
            concreteTypeId: "69cfe1483138c6201ab36e7cf5e0b54aa9ee674f19318d289e55961bfdcc4ebf",
            metadataTypeId: 20,
        },
        {
            type: "struct events::Settle",
            concreteTypeId: "d33ab1a100ca3838867bc1b5bd324dbf7d8385b8c61195a20e87cf71d3d35d4f",
            metadataTypeId: 21,
        },
        {
            type: "struct events::SettlementVerifierRoleSet",
            concreteTypeId: "cff3cdf4605fc7bc13714d42a1fa51fa0fd5743cc3ee2cebf512d2ee1f0541d0",
            metadataTypeId: 22,
        },
        {
            type: "struct events::SettlementVerifierRoleTransfer",
            concreteTypeId: "57e2d2b7e4cba1e211aa57fd003552898667215676b5c12e9018c643d3177b08",
            metadataTypeId: 23,
        },
        {
            type: "struct events::Withdraw",
            concreteTypeId: "2dbac8ab9d6c521bc756385f712aadb559780f80981fd7f47f28ba0bf5aab3de",
            metadataTypeId: 24,
        },
        {
            type: "struct std::asset_id::AssetId",
            concreteTypeId: "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
            metadataTypeId: 26,
        },
        {
            type: "struct std::b512::B512",
            concreteTypeId: "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
            metadataTypeId: 27,
        },
        {
            type: "struct sway_libs::ownership::events::OwnershipRenounced",
            concreteTypeId: "43c4fa7b3297401afbf300127e59ea913e5c8f0c7ae69abbec789ab0bb872bed",
            metadataTypeId: 31,
        },
        {
            type: "struct sway_libs::ownership::events::OwnershipSet",
            concreteTypeId: "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
            metadataTypeId: 32,
        },
        {
            type: "struct sway_libs::ownership::events::OwnershipTransferred",
            concreteTypeId: "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
            metadataTypeId: 33,
        },
        {
            type: "u256",
            concreteTypeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
        },
        {
            type: "u64",
            concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
        },
    ],
    metadataTypes: [
        {
            type: "[_; 2]",
            metadataTypeId: 0,
            components: [
                {
                    name: "__array_element",
                    typeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                },
            ],
        },
        {
            type: "enum data_structures::Universe",
            metadataTypeId: 1,
            components: [
                {
                    name: "ETHEREUM",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "FUEL",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "SOLANA",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
            ],
        },
        {
            type: "enum errors::RoleAccessError",
            metadataTypeId: 2,
            components: [
                {
                    name: "NotSettlementVerifier",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "NotRefundEligible",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
            ],
        },
        {
            type: "enum errors::VaultError",
            metadataTypeId: 3,
            components: [
                {
                    name: "AssetMismatch",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "ChainIdMismatch",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "DestinationPairsNotFilled",
                    typeId: 30,
                    typeArguments: [
                        {
                            name: "",
                            typeId: 12,
                        },
                    ],
                },
                {
                    name: "InvalidFillOutputs",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "InvalidSignature",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "NonceAlreadyUsed",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "RequestExpired",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "RequestUnverified",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "SolversAndAmountsLengthMismatch",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "SolversAndAssetsLengthMismatch",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "ValueMismatch",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "AddressNotFound",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
            ],
        },
        {
            type: "enum standards::src5::AccessError",
            metadataTypeId: 4,
            components: [
                {
                    name: "NotOwner",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
            ],
        },
        {
            type: "enum standards::src5::State",
            metadataTypeId: 5,
            components: [
                {
                    name: "Uninitialized",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "Initialized",
                    typeId: 6,
                },
                {
                    name: "Revoked",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
            ],
        },
        {
            type: "enum std::identity::Identity",
            metadataTypeId: 6,
            components: [
                {
                    name: "Address",
                    typeId: 25,
                },
                {
                    name: "ContractId",
                    typeId: 28,
                },
            ],
        },
        {
            type: "enum std::option::Option",
            metadataTypeId: 7,
            components: [
                {
                    name: "None",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
                {
                    name: "Some",
                    typeId: 10,
                },
            ],
            typeParameters: [10],
        },
        {
            type: "enum sway_libs::ownership::errors::InitializationError",
            metadataTypeId: 8,
            components: [
                {
                    name: "CannotReinitialized",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
            ],
        },
        {
            type: "enum sway_libs::reentrancy::errors::ReentrancyError",
            metadataTypeId: 9,
            components: [
                {
                    name: "NonReentrant",
                    typeId: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
                },
            ],
        },
        {
            type: "generic T",
            metadataTypeId: 10,
        },
        {
            type: "raw untyped ptr",
            metadataTypeId: 11,
        },
        {
            type: "struct data_structures::DestinationPair",
            metadataTypeId: 12,
            components: [
                {
                    name: "asset_id",
                    typeId: 26,
                },
                {
                    name: "value",
                    typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
            ],
        },
        {
            type: "struct data_structures::Party",
            metadataTypeId: 13,
            components: [
                {
                    name: "universe",
                    typeId: 1,
                },
                {
                    name: "address",
                    typeId: 25,
                },
            ],
        },
        {
            type: "struct data_structures::Request",
            metadataTypeId: 14,
            components: [
                {
                    name: "sources",
                    typeId: 30,
                    typeArguments: [
                        {
                            name: "",
                            typeId: 16,
                        },
                    ],
                },
                {
                    name: "destination_universe",
                    typeId: 1,
                },
                {
                    name: "destination_chain_id",
                    typeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
                {
                    name: "destinations",
                    typeId: 30,
                    typeArguments: [
                        {
                            name: "",
                            typeId: 12,
                        },
                    ],
                },
                {
                    name: "nonce",
                    typeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
                {
                    name: "expiry",
                    typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
                {
                    name: "parties",
                    typeId: 30,
                    typeArguments: [
                        {
                            name: "",
                            typeId: 13,
                        },
                    ],
                },
            ],
        },
        {
            type: "struct data_structures::SettleData",
            metadataTypeId: 15,
            components: [
                {
                    name: "universe",
                    typeId: 1,
                },
                {
                    name: "chain_id",
                    typeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
                {
                    name: "solvers",
                    typeId: 30,
                    typeArguments: [
                        {
                            name: "",
                            typeId: 25,
                        },
                    ],
                },
                {
                    name: "assets",
                    typeId: 30,
                    typeArguments: [
                        {
                            name: "",
                            typeId: 26,
                        },
                    ],
                },
                {
                    name: "amounts",
                    typeId: 30,
                    typeArguments: [
                        {
                            name: "",
                            typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                        },
                    ],
                },
                {
                    name: "nonce",
                    typeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
            ],
        },
        {
            type: "struct data_structures::SourcePair",
            metadataTypeId: 16,
            components: [
                {
                    name: "universe",
                    typeId: 1,
                },
                {
                    name: "chain_id",
                    typeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
                {
                    name: "asset_id",
                    typeId: 26,
                },
                {
                    name: "value",
                    typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
            ],
        },
        {
            type: "struct events::Deposit",
            metadataTypeId: 17,
            components: [
                {
                    name: "from",
                    typeId: 25,
                },
                {
                    name: "signed_message_hash",
                    typeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                },
            ],
        },
        {
            type: "struct events::Fill",
            metadataTypeId: 18,
            components: [
                {
                    name: "from",
                    typeId: 25,
                },
                {
                    name: "signed_message_hash",
                    typeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                },
                {
                    name: "solver",
                    typeId: 25,
                },
            ],
        },
        {
            type: "struct events::RefundEligibleRoleSet",
            metadataTypeId: 19,
            components: [
                {
                    name: "identity",
                    typeId: 6,
                },
                {
                    name: "has_role",
                    typeId: "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                },
            ],
        },
        {
            type: "struct events::RefundEligibleRoleTransfer",
            metadataTypeId: 20,
            components: [
                {
                    name: "old_identity",
                    typeId: 6,
                },
                {
                    name: "new_identity",
                    typeId: 6,
                },
            ],
        },
        {
            type: "struct events::Settle",
            metadataTypeId: 21,
            components: [
                {
                    name: "solver",
                    typeId: 25,
                },
                {
                    name: "asset_id",
                    typeId: 26,
                },
                {
                    name: "amount",
                    typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
                {
                    name: "nonce",
                    typeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
            ],
        },
        {
            type: "struct events::SettlementVerifierRoleSet",
            metadataTypeId: 22,
            components: [
                {
                    name: "identity",
                    typeId: 6,
                },
                {
                    name: "has_role",
                    typeId: "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                },
            ],
        },
        {
            type: "struct events::SettlementVerifierRoleTransfer",
            metadataTypeId: 23,
            components: [
                {
                    name: "old_identity",
                    typeId: 6,
                },
                {
                    name: "new_identity",
                    typeId: 6,
                },
            ],
        },
        {
            type: "struct events::Withdraw",
            metadataTypeId: 24,
            components: [
                {
                    name: "to",
                    typeId: 6,
                },
                {
                    name: "asset_id",
                    typeId: 26,
                },
                {
                    name: "amount",
                    typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
            ],
        },
        {
            type: "struct std::address::Address",
            metadataTypeId: 25,
            components: [
                {
                    name: "bits",
                    typeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                },
            ],
        },
        {
            type: "struct std::asset_id::AssetId",
            metadataTypeId: 26,
            components: [
                {
                    name: "bits",
                    typeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                },
            ],
        },
        {
            type: "struct std::b512::B512",
            metadataTypeId: 27,
            components: [
                {
                    name: "bits",
                    typeId: 0,
                },
            ],
        },
        {
            type: "struct std::contract_id::ContractId",
            metadataTypeId: 28,
            components: [
                {
                    name: "bits",
                    typeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                },
            ],
        },
        {
            type: "struct std::vec::RawVec",
            metadataTypeId: 29,
            components: [
                {
                    name: "ptr",
                    typeId: 11,
                },
                {
                    name: "cap",
                    typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
            ],
            typeParameters: [10],
        },
        {
            type: "struct std::vec::Vec",
            metadataTypeId: 30,
            components: [
                {
                    name: "buf",
                    typeId: 29,
                    typeArguments: [
                        {
                            name: "",
                            typeId: 10,
                        },
                    ],
                },
                {
                    name: "len",
                    typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
            ],
            typeParameters: [10],
        },
        {
            type: "struct sway_libs::ownership::events::OwnershipRenounced",
            metadataTypeId: 31,
            components: [
                {
                    name: "previous_owner",
                    typeId: 6,
                },
            ],
        },
        {
            type: "struct sway_libs::ownership::events::OwnershipSet",
            metadataTypeId: 32,
            components: [
                {
                    name: "new_owner",
                    typeId: 6,
                },
            ],
        },
        {
            type: "struct sway_libs::ownership::events::OwnershipTransferred",
            metadataTypeId: 33,
            components: [
                {
                    name: "new_owner",
                    typeId: 6,
                },
                {
                    name: "previous_owner",
                    typeId: 6,
                },
            ],
        },
    ],
    functions: [
        {
            inputs: [],
            name: "owner",
            output: "192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [" Returns the owner."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Return Values"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * [State] - Represents the state of ownership for this contract.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "request",
                    concreteTypeId: "8f17cef827b9269639659b2f90120c93255dfedb8f58f7f69e7f2f2a9040077d",
                },
                {
                    name: "signature",
                    concreteTypeId: "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
                },
                {
                    name: "chain_index",
                    concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
            ],
            name: "deposit",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [" Takes a deposit for the given request."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `request`: [Request] - The user's request."],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `signature`: [B512] - The signature over the `request`.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `from`: [Address] - The signer of the `request`."],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `chain_index`: [u64] - The index of the source data.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " This method verifies the given request against the given signature.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the `request` chain ID doesn't match `FUEL_IGNITION_CHAIN_ID`.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the `request` has expired."],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the asset deposited doesn't match the asset in the `request`.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the amount of asset deposited doesn't match the amount of asset in the `request`.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the nonce of the `request` is already used."],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the `request` could not be verified."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `3`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Writes: `4`"],
                },
                {
                    name: "payable",
                    arguments: [],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "nonce",
                    concreteTypeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
            ],
            name: "deposit_nonce",
            output: "160e7964babcf172e41aa29b138f9c2ccfc416ad2368dabdbdf877ec5de5503f",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Gets a bool describing whether a given nonce has been used in a deposit",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `nonce`: [u64] - The nonce of a deposit."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Returns"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * [Option<bool>] - Whether a given nonce has been used in a deposit.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "request",
                    concreteTypeId: "8f17cef827b9269639659b2f90120c93255dfedb8f58f7f69e7f2f2a9040077d",
                },
                {
                    name: "signature",
                    concreteTypeId: "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
                },
            ],
            name: "fill",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [" Verifies that a request has been filled."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " The solver's transaction, that includes calling thing method, must contain outputs that fill the `request` destination pairs.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `request`: [Request] - The user's request."],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `signature`: [B512] - The signature over the `request`.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `from`: [Address] - The signer of the `request`."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the `request` chain ID doesn't match `FUEL_IGNITION_CHAIN_ID`.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the `request` has expired."],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the there aren't enough transaction outputs to satisfy the `request`.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When a transaction output doesn't match the corresponding destination pair or receiver.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the nonce of the `request` is already used."],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the `request` could not be verified."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `3`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Writes: `4`"],
                },
                {
                    name: "payable",
                    arguments: [],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "nonce",
                    concreteTypeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
            ],
            name: "fill_nonce",
            output: "160e7964babcf172e41aa29b138f9c2ccfc416ad2368dabdbdf877ec5de5503f",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Gets a bool describing whether a given nonce has been used in a fill",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `nonce`: [u64] - The nonce of a fill."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Returns"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * [Option<bool>] - Whether a given nonce has been used in a fill.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "request",
                    concreteTypeId: "8f17cef827b9269639659b2f90120c93255dfedb8f58f7f69e7f2f2a9040077d",
                },
            ],
            name: "hash_request",
            output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            attributes: null,
        },
        {
            inputs: [
                {
                    name: "settle_data",
                    concreteTypeId: "3f398311d910f45891ebe297c796818054c203bb631628fb87216c30add71db0",
                },
            ],
            name: "hash_settle_data",
            output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            attributes: null,
        },
        {
            inputs: [],
            name: "initialize_vault",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [" Initializes the vault, setting privileged roles."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" This method can only be called once."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When ownership has been set before."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Writes: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "identity",
                    concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                },
            ],
            name: "refund_eligible_role",
            output: "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Returns true if the given `identity` has the `refund eligible` role.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read"],
                },
            ],
        },
        {
            inputs: [],
            name: "renounce_ownership",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Revokes ownership of the current owner and disallows any new owners.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" Only the contract `owner` can call this method."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the sender is not the owner."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Writes: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "signed_message_hash",
                    concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                },
            ],
            name: "requests",
            output: "2644cb541197d16874ed15ff9b4e74d0cb01be34849c3fb2d8356f064f7b097a",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Gets a [Request] hash from it's associated `signed_message_hash`",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `signed_message_hash`: [b256] - The hash of the EIP-191 signature of a hashed request.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Returns"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * [Option<Request>] - The request."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `3`"],
                },
                {
                    name: "storage",
                    arguments: ["read"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "identity",
                    concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                },
                {
                    name: "has_role",
                    concreteTypeId: "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                },
            ],
            name: "set_refund_eligible_role",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Allows the `owner` to assign or revoke the `refund eligible` role.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" Only the contract `owner` can call this method."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `identity`: [Identity] - The `Identity` who's status as a `refund eligible` will be updated.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `has_role`: [bool] - The status to be set."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Write: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "identity",
                    concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                },
                {
                    name: "has_role",
                    concreteTypeId: "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
                },
            ],
            name: "set_settlement_verifier_role",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Allows the `owner` to assign or revoke the `settlement verifier` role.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" Only the contract `owner` can call this method."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `identity`: [Identity] - The `Identity` who's status as a `settlement verifier` will be updated.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `has_role`: [bool] - The status to be set."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Write: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "settle_data",
                    concreteTypeId: "3f398311d910f45891ebe297c796818054c203bb631628fb87216c30add71db0",
                },
                {
                    name: "signature",
                    concreteTypeId: "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
                },
            ],
            name: "settle",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [" Pay solvers for verified work."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " Anyone can call this method as it checks if the `settle_data` was signed by the contract owner,",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [" if so the `settle_data` is considered valid."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `settle_data`: [SettleData] - The data of each transfer to a solver.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `signature`: [B512] - The signature used to verify that the contract owner signed the given `settle_data`.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When reentrency occurs."],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the number of solvers and assets in the `settle_data` don't match.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the number of solvers and amounts in the `settle_data` don't match.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the recovered address doesn't match the contract owner's address.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * When the nonce of the `settle_data` is already used.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Writes: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "nonce",
                    concreteTypeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
                },
            ],
            name: "settle_nonce",
            output: "160e7964babcf172e41aa29b138f9c2ccfc416ad2368dabdbdf877ec5de5503f",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Gets a bool describing whether a given nonce has been used in a settlement",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `nonce`: [u64] - The nonce of a settlement."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Returns"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * [Option<bool>] - Whether a given nonce has been used in a settlement.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "identity",
                    concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                },
            ],
            name: "settlement_verifier_role",
            output: "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Returns true if the given `identity` has the `settlement_verifier` role.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "new_owner",
                    concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                },
            ],
            name: "transfer_ownership",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [" Transfers ownership to the passed identity."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" Only the contract `owner` can call this method."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `new_owner`: [Identity] - The `Identity` that will be the next owner.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the sender is not the owner."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Write: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "new_identity",
                    concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                },
            ],
            name: "transfer_refund_eligible_role",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [" Allows a `refund eligible` to transfer their role."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" Only a `refund eligible` can call this method."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `new_identity`: [Identity] - The `Identity` who will receive the role.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the sender is not a `refund eligible`."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Write: `2`"],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "new_identity",
                    concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                },
            ],
            name: "transfer_settlement_verifier_role",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [
                        " Allows a `settlement verifier` to transfer their role.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" Only a `settlement verifier` can call this method."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [
                        " * `new_identity`: [Identity] - The `Identity` who will receive the role.",
                    ],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When the sender is not a `settlement verifier`."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Write: `2`"],
                },
                {
                    name: "storage",
                    arguments: ["read", "write"],
                },
            ],
        },
        {
            inputs: [
                {
                    name: "request",
                    concreteTypeId: "8f17cef827b9269639659b2f90120c93255dfedb8f58f7f69e7f2f2a9040077d",
                },
                {
                    name: "signature",
                    concreteTypeId: "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
                },
            ],
            name: "verify_request_signature",
            output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            attributes: null,
        },
        {
            inputs: [
                {
                    name: "to",
                    concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
                },
                {
                    name: "asset_id",
                    concreteTypeId: "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
                },
                {
                    name: "amount",
                    concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                },
            ],
            name: "withdraw",
            output: "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
            attributes: [
                {
                    name: "doc-comment",
                    arguments: [" Withdraw assets from the contract."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Additional Information"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" Only callable by the contract owner."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Arguments"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `to`: [Identity] - The recipient of the withdrawal."],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `asset_id`: [AssetId] - The asset to withdraw."],
                },
                {
                    name: "doc-comment",
                    arguments: [" * `amount`: [u64] - The amount withdraw."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Reverts"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When not called by the owner."],
                },
                {
                    name: "doc-comment",
                    arguments: [" * When reentrency occurs."],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" # Number of Storage Accesses"],
                },
                {
                    name: "doc-comment",
                    arguments: [""],
                },
                {
                    name: "doc-comment",
                    arguments: [" * Reads: `1`"],
                },
                {
                    name: "storage",
                    arguments: ["read"],
                },
            ],
        },
    ],
    loggedTypes: [
        {
            logId: "1257819527469551790",
            concreteTypeId: "1174ac322e5f50aeb24de065558295d834bab4ad055eedc043379d91a8958834",
        },
        {
            logId: "12195664052085097644",
            concreteTypeId: "a93fb3d7088884ac8084fc44b117612059604f3d2051bfb1e2612381c3cebda9",
        },
        {
            logId: "6732614218709939873",
            concreteTypeId: "5d6f0cf603f336a11e076b3797ac315dc56056f8fd733e270621be9b42f539f8",
        },
        {
            logId: "2161305517876418151",
            concreteTypeId: "1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893",
        },
        {
            logId: "16280289466020123285",
            concreteTypeId: "e1ef35033ea9d2956f17c3292dea4a46ce7d61fdf37bbebe03b7b965073f43b5",
        },
        {
            logId: "4571204900286667806",
            concreteTypeId: "3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d",
        },
        {
            logId: "4883303303013154842",
            concreteTypeId: "43c4fa7b3297401afbf300127e59ea913e5c8f0c7ae69abbec789ab0bb872bed",
        },
        {
            logId: "7779943637668661670",
            concreteTypeId: "6bf7e984bfcd09a667a74ad394cc04dc36275dcc2610439ddd4eb06e138e0c99",
        },
        {
            logId: "14984546834664376252",
            concreteTypeId: "cff3cdf4605fc7bc13714d42a1fa51fa0fd5743cc3ee2cebf512d2ee1f0541d0",
        },
        {
            logId: "5557842539076482339",
            concreteTypeId: "4d216c57b3357523323f59401c7355785b41bdf832f6e1106272186b94797038",
        },
        {
            logId: "15220673195713116216",
            concreteTypeId: "d33ab1a100ca3838867bc1b5bd324dbf7d8385b8c61195a20e87cf71d3d35d4f",
        },
        {
            logId: "12970362301975156672",
            concreteTypeId: "b3fffbcb3158d7c010c31b194b60fb7857adb4ad61bdcf4b8b42958951d9f308",
        },
        {
            logId: "1861356391699522460",
            concreteTypeId: "19d4ddc6bfa7239c40e8a40045394730ec18e202048f5b6404eb6b453bb70362",
        },
        {
            logId: "7624560394341238304",
            concreteTypeId: "69cfe1483138c6201ab36e7cf5e0b54aa9ee674f19318d289e55961bfdcc4ebf",
        },
        {
            logId: "6332855713295737314",
            concreteTypeId: "57e2d2b7e4cba1e211aa57fd003552898667215676b5c12e9018c643d3177b08",
        },
        {
            logId: "3295166716781023771",
            concreteTypeId: "2dbac8ab9d6c521bc756385f712aadb559780f80981fd7f47f28ba0bf5aab3de",
        },
    ],
    messagesTypes: [],
    configurables: [
        {
            name: "INITIAL_OWNER",
            concreteTypeId: "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
            offset: 64088,
        },
        {
            name: "FUEL_IGNITION_CHAIN_ID",
            concreteTypeId: "1b5759d94094368cfd443019e7ca5ec4074300e544e5ea993a979f5da627261e",
            offset: 64056,
        },
    ],
};
const storageSlots = [];
class ArcanaVaultInterface extends fuels_1.Interface {
    constructor() {
        super(abi);
    }
}
exports.ArcanaVaultInterface = ArcanaVaultInterface;
class ArcanaVault extends fuels_1.Contract {
    static abi = abi;
    static storageSlots = storageSlots;
    constructor(id, accountOrProvider) {
        super(id, abi, accountOrProvider);
    }
}
exports.ArcanaVault = ArcanaVault;
