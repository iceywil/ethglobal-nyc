"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Registry = void 0;
exports.createCosmosWallet = createCosmosWallet;
exports.createCosmosClient = createCosmosClient;
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const viem_1 = require("viem");
const definition_1 = require("../proto/definition");
exports.Registry = new proto_signing_1.Registry(stargate_1.defaultRegistryTypes);
{
    exports.Registry.register("/xarchain.chainabstraction.MsgCreateSolverData", definition_1.MsgCreateSolverData);
    exports.Registry.register("/xarchain.chainabstraction.MsgCreateSolverDataResponse", definition_1.MsgCreateSolverDataResponse);
    exports.Registry.register("/xarchain.chainabstraction.MsgUpdateSolverData", definition_1.MsgUpdateSolverData);
    exports.Registry.register("/xarchain.chainabstraction.MsgUpdateSolverDataResponse", definition_1.MsgCreateSolverDataResponse);
    exports.Registry.register("/xarchain.chainabstraction.MsgCreateRequestForFunds", definition_1.MsgCreateRequestForFunds);
    exports.Registry.register("/xarchain.chainabstraction.MsgCreateRequestForFundsResponse", definition_1.MsgCreateRequestForFundsResponse);
    exports.Registry.register("/xarchain.chainabstraction.MsgRefundReq", definition_1.MsgRefundReq);
    exports.Registry.register("/xarchain.chainabstraction.MsgRefundReqResponse", definition_1.MsgRefundReqResponse);
    exports.Registry.register("/xarchain.chainabstraction.MsgDoubleCheckTx", definition_1.MsgDoubleCheckTx);
}
function createCosmosWallet(privateKey) {
    const pkBytes = typeof privateKey === "string" ? (0, viem_1.hexToBytes)(privateKey) : privateKey;
    return proto_signing_1.DirectSecp256k1Wallet.fromKey(pkBytes, "arcana");
}
function createCosmosClient(signer, endpoint, options) {
    return stargate_1.SigningStargateClient.connectWithSigner(endpoint, signer, {
        registry: exports.Registry,
        ...options,
    });
}
