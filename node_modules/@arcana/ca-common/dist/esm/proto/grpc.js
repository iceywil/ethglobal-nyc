// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: grpc.proto
/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import { QueryAllRequestForFundsRequest, QueryAllRequestForFundsResponse, QueryAllSettlementRequest, QueryAllSettlementResponse, QueryAllSolverDataRequest, QueryAllSolverDataResponse, QueryGetPriceOracleDataRequest, QueryGetPriceOracleDataResponse, QueryGetProtocolFeesRequest, QueryGetProtocolFeesResponse, QueryGetRequestForFundsRequest, QueryGetRequestForFundsResponse, QueryGetSettlementRequest, QueryGetSettlementResponse, QueryGetSolverDataRequest, QueryGetSolverDataResponse, QueryRequestForFundsByAddressRequest, } from "./definition";
export const protobufPackage = "xarchain.chainabstraction";
export class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
        this.RequestForFunds = this.RequestForFunds.bind(this);
        this.RequestForFundsAll = this.RequestForFundsAll.bind(this);
        this.RequestForFundsByAddress = this.RequestForFundsByAddress.bind(this);
        this.SolverData = this.SolverData.bind(this);
        this.SolverDataAll = this.SolverDataAll.bind(this);
        this.Settlement = this.Settlement.bind(this);
        this.SettlementAll = this.SettlementAll.bind(this);
        this.ProtocolFees = this.ProtocolFees.bind(this);
        this.PriceOracleData = this.PriceOracleData.bind(this);
    }
    RequestForFunds(request, metadata) {
        return this.rpc.unary(QueryRequestForFundsDesc, QueryGetRequestForFundsRequest.fromPartial(request), metadata);
    }
    RequestForFundsAll(request, metadata) {
        return this.rpc.unary(QueryRequestForFundsAllDesc, QueryAllRequestForFundsRequest.fromPartial(request), metadata);
    }
    RequestForFundsByAddress(request, metadata) {
        return this.rpc.unary(QueryRequestForFundsByAddressDesc, QueryRequestForFundsByAddressRequest.fromPartial(request), metadata);
    }
    SolverData(request, metadata) {
        return this.rpc.unary(QuerySolverDataDesc, QueryGetSolverDataRequest.fromPartial(request), metadata);
    }
    SolverDataAll(request, metadata) {
        return this.rpc.unary(QuerySolverDataAllDesc, QueryAllSolverDataRequest.fromPartial(request), metadata);
    }
    Settlement(request, metadata) {
        return this.rpc.unary(QuerySettlementDesc, QueryGetSettlementRequest.fromPartial(request), metadata);
    }
    SettlementAll(request, metadata) {
        return this.rpc.unary(QuerySettlementAllDesc, QueryAllSettlementRequest.fromPartial(request), metadata);
    }
    ProtocolFees(request, metadata) {
        return this.rpc.unary(QueryProtocolFeesDesc, QueryGetProtocolFeesRequest.fromPartial(request), metadata);
    }
    PriceOracleData(request, metadata) {
        return this.rpc.unary(QueryPriceOracleDataDesc, QueryGetPriceOracleDataRequest.fromPartial(request), metadata);
    }
}
export const QueryDesc = { serviceName: "xarchain.chainabstraction.Query" };
export const QueryRequestForFundsDesc = {
    methodName: "RequestForFunds",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryGetRequestForFundsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryGetRequestForFundsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export const QueryRequestForFundsAllDesc = {
    methodName: "RequestForFundsAll",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryAllRequestForFundsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryAllRequestForFundsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export const QueryRequestForFundsByAddressDesc = {
    methodName: "RequestForFundsByAddress",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryRequestForFundsByAddressRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryAllRequestForFundsResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export const QuerySolverDataDesc = {
    methodName: "SolverData",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryGetSolverDataRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryGetSolverDataResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export const QuerySolverDataAllDesc = {
    methodName: "SolverDataAll",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryAllSolverDataRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryAllSolverDataResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export const QuerySettlementDesc = {
    methodName: "Settlement",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryGetSettlementRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryGetSettlementResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export const QuerySettlementAllDesc = {
    methodName: "SettlementAll",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryAllSettlementRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryAllSettlementResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export const QueryProtocolFeesDesc = {
    methodName: "ProtocolFees",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryGetProtocolFeesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryGetProtocolFeesResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export const QueryPriceOracleDataDesc = {
    methodName: "PriceOracleData",
    service: QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return QueryGetPriceOracleDataRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = QueryGetPriceOracleDataResponse.decode(data);
            return {
                ...value,
                toObject() {
                    return value;
                },
            };
        },
    },
};
export class GrpcWebImpl {
    host;
    options;
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        const request = { ..._request, ...methodDesc.requestType };
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new BrowserHeaders({
                ...this.options?.metadata.headersMap,
                ...metadata?.headersMap,
            })
            : (metadata ?? this.options.metadata);
        return new Promise((resolve, reject) => {
            grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata ?? {},
                ...(this.options.transport !== undefined
                    ? { transport: this.options.transport }
                    : {}),
                debug: this.options.debug ?? false,
                onEnd: function (response) {
                    if (response.status === grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
export class GrpcWebError extends globalThis.Error {
    code;
    metadata;
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
