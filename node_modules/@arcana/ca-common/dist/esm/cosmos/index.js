import { Registry as CosmosRegistry, DirectSecp256k1Wallet, } from "@cosmjs/proto-signing";
import { defaultRegistryTypes, SigningStargateClient, } from "@cosmjs/stargate";
import { hexToBytes } from "viem";
import { MsgCreateRequestForFunds, MsgCreateRequestForFundsResponse, MsgCreateSolverData, MsgCreateSolverDataResponse, MsgDoubleCheckTx, MsgRefundReq, MsgRefundReqResponse, MsgUpdateSolverData, } from "../proto/definition";
export const Registry = new CosmosRegistry(defaultRegistryTypes);
{
    Registry.register("/xarchain.chainabstraction.MsgCreateSolverData", MsgCreateSolverData);
    Registry.register("/xarchain.chainabstraction.MsgCreateSolverDataResponse", MsgCreateSolverDataResponse);
    Registry.register("/xarchain.chainabstraction.MsgUpdateSolverData", MsgUpdateSolverData);
    Registry.register("/xarchain.chainabstraction.MsgUpdateSolverDataResponse", MsgCreateSolverDataResponse);
    Registry.register("/xarchain.chainabstraction.MsgCreateRequestForFunds", MsgCreateRequestForFunds);
    Registry.register("/xarchain.chainabstraction.MsgCreateRequestForFundsResponse", MsgCreateRequestForFundsResponse);
    Registry.register("/xarchain.chainabstraction.MsgRefundReq", MsgRefundReq);
    Registry.register("/xarchain.chainabstraction.MsgRefundReqResponse", MsgRefundReqResponse);
    Registry.register("/xarchain.chainabstraction.MsgDoubleCheckTx", MsgDoubleCheckTx);
}
export function createCosmosWallet(privateKey) {
    const pkBytes = typeof privateKey === "string" ? hexToBytes(privateKey) : privateKey;
    return DirectSecp256k1Wallet.fromKey(pkBytes, "arcana");
}
export function createCosmosClient(signer, endpoint, options) {
    return SigningStargateClient.connectWithSigner(endpoint, signer, {
        registry: Registry,
        ...options,
    });
}
