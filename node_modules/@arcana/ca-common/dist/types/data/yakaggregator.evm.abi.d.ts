export declare const YakAggregatorEVMABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_tokenIn";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_tokenOut";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_maxSteps";
        readonly type: "uint256";
    }];
    readonly name: "findBestPath";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "adapters";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "path";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "gasEstimate";
            readonly type: "uint256";
        }];
        readonly internalType: "struct YakRouter.FormattedOffer";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_tokenIn";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_tokenOut";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_maxSteps";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_gasPrice";
        readonly type: "uint256";
    }];
    readonly name: "findBestPathWithGas";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "adapters";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "path";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "gasEstimate";
            readonly type: "uint256";
        }];
        readonly internalType: "struct YakRouter.FormattedOffer";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountIn";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountOut";
            readonly type: "uint256";
        }, {
            readonly internalType: "address[]";
            readonly name: "path";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "adapters";
            readonly type: "address[]";
        }];
        readonly internalType: "struct YakRouter.Trade";
        readonly name: "_trade";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_fee";
        readonly type: "uint256";
    }];
    readonly name: "swapNoSplit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountIn";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountOut";
            readonly type: "uint256";
        }, {
            readonly internalType: "address[]";
            readonly name: "path";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "adapters";
            readonly type: "address[]";
        }];
        readonly internalType: "struct YakRouter.Trade";
        readonly name: "_trade";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_fee";
        readonly type: "uint256";
    }];
    readonly name: "swapNoSplitFromAVAX";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountIn";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountOut";
            readonly type: "uint256";
        }, {
            readonly internalType: "address[]";
            readonly name: "path";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "adapters";
            readonly type: "address[]";
        }];
        readonly internalType: "struct YakRouter.Trade";
        readonly name: "_trade";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_fee";
        readonly type: "uint256";
    }];
    readonly name: "swapNoSplitToAVAX";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountIn";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountOut";
            readonly type: "uint256";
        }, {
            readonly internalType: "address[]";
            readonly name: "path";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "adapters";
            readonly type: "address[]";
        }];
        readonly internalType: "struct YakRouter.Trade";
        readonly name: "_trade";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_fee";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint8";
        readonly name: "_v";
        readonly type: "uint8";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_r";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_s";
        readonly type: "bytes32";
    }];
    readonly name: "swapNoSplitToAVAXWithPermit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "amountIn";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountOut";
            readonly type: "uint256";
        }, {
            readonly internalType: "address[]";
            readonly name: "path";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "adapters";
            readonly type: "address[]";
        }];
        readonly internalType: "struct YakRouter.Trade";
        readonly name: "_trade";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_fee";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint8";
        readonly name: "_v";
        readonly type: "uint8";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_r";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_s";
        readonly type: "bytes32";
    }];
    readonly name: "swapNoSplitWithPermit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}];
