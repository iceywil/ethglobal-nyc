import { Aggregator, Quote, QuoteRequestExactInput } from "./iface";
import { OmniversalChainID } from "../data";
import { Bytes } from "../types";
import { FixedFeeTuple } from "../proto/definition";
type Asset = {
    tokenAddress: Bytes;
    amount: bigint;
};
export type Holding = {
    chainID: OmniversalChainID;
    value: number;
} & Asset;
export declare class AutoSelectionError extends Error {
}
export declare function autoSelectSources(userAddress: Bytes, holdings: Holding[], outputRequired: bigint, aggregators: Aggregator[], collectionFees: FixedFeeTuple[]): Promise<({
    req: QuoteRequestExactInput;
    cfee: bigint;
    originalHolding: Holding;
} & {
    quote: Quote;
    agg: Aggregator;
})[]>;
export declare function determineDestinationSwaps(userAddress: Bytes, receiverAddress: Bytes | null, chainID: OmniversalChainID, requirement: Asset, aggregators: Aggregator[]): Promise<{
    quote: Quote | null;
    aggregator: Aggregator;
}>;
export {};
