import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import { QueryAllRequestForFundsRequest, QueryAllRequestForFundsResponse, QueryAllSettlementRequest, QueryAllSettlementResponse, QueryAllSolverDataRequest, QueryAllSolverDataResponse, QueryGetPriceOracleDataRequest, QueryGetPriceOracleDataResponse, QueryGetProtocolFeesRequest, QueryGetProtocolFeesResponse, QueryGetRequestForFundsRequest, QueryGetRequestForFundsResponse, QueryGetSettlementRequest, QueryGetSettlementResponse, QueryGetSolverDataRequest, QueryGetSolverDataResponse, QueryRequestForFundsByAddressRequest } from "./definition";
export declare const protobufPackage = "xarchain.chainabstraction";
export interface Query {
    RequestForFunds(request: DeepPartial<QueryGetRequestForFundsRequest>, metadata?: grpc.Metadata): Promise<QueryGetRequestForFundsResponse>;
    RequestForFundsAll(request: DeepPartial<QueryAllRequestForFundsRequest>, metadata?: grpc.Metadata): Promise<QueryAllRequestForFundsResponse>;
    RequestForFundsByAddress(request: DeepPartial<QueryRequestForFundsByAddressRequest>, metadata?: grpc.Metadata): Promise<QueryAllRequestForFundsResponse>;
    SolverData(request: DeepPartial<QueryGetSolverDataRequest>, metadata?: grpc.Metadata): Promise<QueryGetSolverDataResponse>;
    SolverDataAll(request: DeepPartial<QueryAllSolverDataRequest>, metadata?: grpc.Metadata): Promise<QueryAllSolverDataResponse>;
    Settlement(request: DeepPartial<QueryGetSettlementRequest>, metadata?: grpc.Metadata): Promise<QueryGetSettlementResponse>;
    SettlementAll(request: DeepPartial<QueryAllSettlementRequest>, metadata?: grpc.Metadata): Promise<QueryAllSettlementResponse>;
    ProtocolFees(request: DeepPartial<QueryGetProtocolFeesRequest>, metadata?: grpc.Metadata): Promise<QueryGetProtocolFeesResponse>;
    PriceOracleData(request: DeepPartial<QueryGetPriceOracleDataRequest>, metadata?: grpc.Metadata): Promise<QueryGetPriceOracleDataResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    RequestForFunds(request: DeepPartial<QueryGetRequestForFundsRequest>, metadata?: grpc.Metadata): Promise<QueryGetRequestForFundsResponse>;
    RequestForFundsAll(request: DeepPartial<QueryAllRequestForFundsRequest>, metadata?: grpc.Metadata): Promise<QueryAllRequestForFundsResponse>;
    RequestForFundsByAddress(request: DeepPartial<QueryRequestForFundsByAddressRequest>, metadata?: grpc.Metadata): Promise<QueryAllRequestForFundsResponse>;
    SolverData(request: DeepPartial<QueryGetSolverDataRequest>, metadata?: grpc.Metadata): Promise<QueryGetSolverDataResponse>;
    SolverDataAll(request: DeepPartial<QueryAllSolverDataRequest>, metadata?: grpc.Metadata): Promise<QueryAllSolverDataResponse>;
    Settlement(request: DeepPartial<QueryGetSettlementRequest>, metadata?: grpc.Metadata): Promise<QueryGetSettlementResponse>;
    SettlementAll(request: DeepPartial<QueryAllSettlementRequest>, metadata?: grpc.Metadata): Promise<QueryAllSettlementResponse>;
    ProtocolFees(request: DeepPartial<QueryGetProtocolFeesRequest>, metadata?: grpc.Metadata): Promise<QueryGetProtocolFeesResponse>;
    PriceOracleData(request: DeepPartial<QueryGetPriceOracleDataRequest>, metadata?: grpc.Metadata): Promise<QueryGetPriceOracleDataResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryRequestForFundsDesc: UnaryMethodDefinitionish;
export declare const QueryRequestForFundsAllDesc: UnaryMethodDefinitionish;
export declare const QueryRequestForFundsByAddressDesc: UnaryMethodDefinitionish;
export declare const QuerySolverDataDesc: UnaryMethodDefinitionish;
export declare const QuerySolverDataAllDesc: UnaryMethodDefinitionish;
export declare const QuerySettlementDesc: UnaryMethodDefinitionish;
export declare const QuerySettlementAllDesc: UnaryMethodDefinitionish;
export declare const QueryProtocolFeesDesc: UnaryMethodDefinitionish;
export declare const QueryPriceOracleDataDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
    value: unknown;
} ? {
    $case: T["$case"];
    value?: DeepPartial<T["value"]>;
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
