import { Client, Hex, Prettify, UnionOmit, ReadContractParameters as ViemReadContractParameters, EstimateContractGasParameters, EstimateContractGasReturnType, Chain, SimulateContractParameters, SimulateContractReturnType, Account as ViemAccount, Address as ViemAddress, WriteContractParameters, WriteContractReturnType } from "viem";
import { EVMVaultABIType } from "../data";
export type EVMRFF = {
    sources: readonly {
        universe: number;
        chainID: bigint;
        tokenAddress: `0x${string}`;
        value: bigint;
    }[];
    destinationUniverse: number;
    destinationChainID: bigint;
    destinations: readonly {
        tokenAddress: `0x${string}`;
        value: bigint;
    }[];
    nonce: bigint;
    expiry: bigint;
    parties: readonly {
        universe: number;
        address_: `0x${string}`;
    }[];
};
type VRSArgs = readonly [EVMRFF, Hex];
type DepositArgs = readonly [EVMRFF, Hex, bigint];
type FillArgs = readonly [EVMRFF, Hex];
type OptionalChain = Chain | undefined;
type OptionalAccount = ViemAccount | undefined;
type AccountOverride = ViemAccount | ViemAddress | undefined;
export type EVMVaultContractIface = {
    read: {
        verifyRequestSignature: (args: VRSArgs, options?: Prettify<UnionOmit<ViemReadContractParameters<EVMVaultABIType, "verifyRequestSignature", VRSArgs>, "address" | "abi" | "args" | "functionName">> | undefined) => Promise<readonly [boolean, `0x${string}`]>;
    };
    estimateGas: {
        deposit: (args: DepositArgs, options: Prettify<UnionOmit<EstimateContractGasParameters<EVMVaultABIType, "deposit", DepositArgs>, "address" | "abi" | "args" | "functionName">>) => Promise<EstimateContractGasReturnType>;
        fill: (args: FillArgs, options: Prettify<UnionOmit<EstimateContractGasParameters<EVMVaultABIType, "fill", FillArgs>, "address" | "abi" | "args" | "functionName">>) => Promise<EstimateContractGasReturnType>;
    };
    simulate: {
        deposit: (args: DepositArgs, options?: Omit<SimulateContractParameters<EVMVaultABIType, "deposit", DepositArgs, OptionalChain, OptionalChain, AccountOverride>, "address" | "abi" | "args" | "functionName"> | undefined) => Promise<SimulateContractReturnType<EVMVaultABIType, "deposit", DepositArgs, OptionalChain, OptionalAccount, OptionalChain, AccountOverride>>;
        fill: (args: FillArgs, options?: Omit<SimulateContractParameters<EVMVaultABIType, "fill", FillArgs, OptionalChain, OptionalChain, AccountOverride>, "address" | "abi" | "args" | "functionName"> | undefined) => Promise<SimulateContractReturnType<EVMVaultABIType, "fill", FillArgs, OptionalChain, OptionalAccount, OptionalChain, AccountOverride>>;
    };
    write: {
        deposit: (args: DepositArgs, options: UnionOmit<WriteContractParameters<EVMVaultABIType, "deposit", DepositArgs, OptionalChain, OptionalAccount, OptionalChain>, "address" | "abi" | "args" | "functionName">) => Promise<WriteContractReturnType>;
        fill: (args: FillArgs, options: UnionOmit<WriteContractParameters<EVMVaultABIType, "fill", FillArgs, OptionalChain, OptionalAccount, OptionalChain>, "address" | "abi" | "args" | "functionName">) => Promise<WriteContractReturnType>;
    };
};
export declare function createEVMVaultContract(address: Hex, client: Client): EVMVaultContractIface;
export {};
