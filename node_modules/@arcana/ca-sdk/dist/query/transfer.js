import { encodeFunctionData } from "viem";
import ERC20ABI from "../abi/erc20";
import { ZERO_ADDRESS } from "../constants";
import { getLogger } from "../logger";
import { convertIntent, equalFold, mulDecimals } from "../utils";
const logger = getLogger();
class TransferQuery {
    constructor(input, init, switchChain, createEVMHandler, address, chainList) {
        this.input = input;
        this.init = init;
        this.switchChain = switchChain;
        this.createEVMHandler = createEVMHandler;
        this.address = address;
        this.chainList = chainList;
        this.handlerResponse = null;
        this.exec = async () => {
            if (!this.handlerResponse?.handler) {
                throw new Error("ca not applicable");
            }
            await this.handlerResponse.handler.process();
            logger.debug("TransferQuery:Exec", {
                state: "processing completed, going to processTx()",
            });
            return this.handlerResponse.processTx();
        };
        this.simulate = async () => {
            if (!this.handlerResponse?.handler) {
                throw new Error("ca not applicable");
            }
            const response = await this.handlerResponse.handler.buildIntent();
            if (!response) {
                throw new Error("ca not applicable");
            }
            return {
                intent: convertIntent(response.intent, response.token, this.chainList),
                token: response.token,
            };
        };
    }
    async initHandler() {
        if (!this.handlerResponse) {
            const input = this.input;
            await this.init();
            logger.debug("SendQueryBuilder.exec", {
                c: input.chainID,
                p: input,
            });
            if (input.to &&
                input.amount !== undefined &&
                input.token &&
                input.chainID) {
                await this.switchChain(input.chainID);
                const tokenInfo = this.chainList.getTokenInfoBySymbol(input.chainID, input.token);
                if (!tokenInfo) {
                    throw new Error("Token not supported on this chain.");
                }
                const isNative = equalFold(tokenInfo.contractAddress, ZERO_ADDRESS);
                const amount = mulDecimals(input.amount, tokenInfo.decimals);
                logger.debug("transfer:2", { amount, isNative, tokenInfo });
                const p = {
                    from: this.address,
                    to: input.to,
                };
                if (isNative) {
                    p.value = `0x${amount.toString(16)}`;
                }
                else {
                    p.to = tokenInfo.contractAddress;
                    p.data = encodeFunctionData({
                        abi: ERC20ABI,
                        args: [input.to, amount],
                        functionName: "transfer",
                    });
                }
                this.handlerResponse = await this.createEVMHandler(p, {
                    bridge: false,
                    gas: 0n,
                    skipTx: false,
                });
                return;
            }
            throw new Error("transfer: missing params");
        }
    }
}
export { TransferQuery };
