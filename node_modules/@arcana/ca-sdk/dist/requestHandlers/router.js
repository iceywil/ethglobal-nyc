import { getLogger } from "../logger";
import { isERC20TokenTransfer, isNativeTokenTransfer } from "./evm/common";
import ERC20Transfer from "./evm/erc20";
import NativeTransfer from "./evm/native";
const logger = getLogger();
var TxType;
(function (TxType) {
    TxType[TxType["EVMERC20Transfer"] = 0] = "EVMERC20Transfer";
    TxType[TxType["EVMNativeTransfer"] = 1] = "EVMNativeTransfer";
})(TxType || (TxType = {}));
const handlers = {
    [TxType.EVMERC20Transfer]: ERC20Transfer,
    [TxType.EVMNativeTransfer]: NativeTransfer,
};
const createHandler = (input) => {
    let handler = null;
    let processTx = async () => { };
    if (input.evm.tx) {
        if (isERC20TokenTransfer(input)) {
            handler = handlers[TxType.EVMERC20Transfer];
        }
        else if (isNativeTokenTransfer(input)) {
            handler = handlers[TxType.EVMNativeTransfer];
        }
        processTx = async () => {
            if (!input.options.bridge && !input.options.skipTx) {
                logger.debug("in processTx", {
                    tx: input.evm.tx,
                });
                await input.evm.client.switchChain({ id: input.chain.id });
                return input.evm.client.request({
                    method: "eth_sendTransaction",
                    params: [input.evm.tx],
                });
            }
        };
    }
    else {
        throw Error("Unknown handler");
    }
    return {
        handler: handler ? new handler(input) : null,
        processTx,
    };
};
export { createHandler };
