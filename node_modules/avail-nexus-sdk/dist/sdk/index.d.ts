import { NexusUtils } from './utils';
import type { BridgeParams, BridgeResult, TransferParams, TransferResult, AllowanceResponse, OnIntentHook, OnAllowanceHook, EthereumProvider, RequestArguments, EventListener, UserAsset, SimulationResult, RequestForFunds, NexusNetwork, BridgeAndExecuteParams, BridgeAndExecuteResult, ExecuteParams, ExecuteResult, ExecuteSimulation, BridgeAndExecuteSimulationResult } from '../types';
import SafeEventEmitter from '@metamask/safe-event-emitter';
import { SDKConfig } from '@arcana/ca-sdk';
import { ChainAbstractionAdapter } from '../adapters/chain-abstraction-adapter';
export declare class NexusSDK {
    readonly nexusAdapter: ChainAbstractionAdapter;
    readonly nexusEvents: SafeEventEmitter;
    readonly utils: NexusUtils;
    constructor(config?: Omit<SDKConfig, 'siweStatement' | 'network'> & {
        network?: NexusNetwork;
        debug?: boolean;
    });
    /**
     * Initialize logger based on debug configuration
     * @private
     */
    private initializeLogger;
    /**
     * Initialize the SDK with a provider
     */
    initialize(provider: EthereumProvider): Promise<void>;
    /**
     * Get unified balances across all chains
     */
    getUnifiedBalances(): Promise<UserAsset[]>;
    /**
     * Get unified balance for a specific token
     */
    getUnifiedBalance(symbol: string): Promise<UserAsset | undefined>;
    /**
     * Bridge tokens between chains
     */
    bridge(params: BridgeParams): Promise<BridgeResult>;
    /**
     * Transfer tokens
     */
    transfer(params: TransferParams): Promise<TransferResult>;
    getEVMProviderWithCA(): EthereumProvider;
    /**
     * Simulate bridge transaction to get costs and fees
     */
    simulateBridge(params: BridgeParams): Promise<SimulationResult>;
    /**
     * Simulate transfer transaction to get costs and fees
     */
    simulateTransfer(params: TransferParams): Promise<SimulationResult>;
    /**
     * Get user's intents with pagination
     */
    getMyIntents(page?: number): Promise<RequestForFunds[]>;
    /**
     * Check allowance for tokens on a specific chain
     */
    getAllowance(chainId?: number, tokens?: string[]): Promise<AllowanceResponse[]>;
    /**
     * Set allowance for a token on a specific chain
     */
    setAllowance(chainId: number, tokens: string[], amount: bigint): Promise<void>;
    /**
     * Revoke allowance for a token on a specific chain
     */
    revokeAllowance(chainId: number, tokens: string[]): Promise<void>;
    /**
     * Set callback for intent status updates
     */
    setOnIntentHook(callback: OnIntentHook): void;
    /**
     * Set callback for allowance approval events
     */
    setOnAllowanceHook(callback: OnAllowanceHook): void;
    /**
     * Subscribe to account changes
     */
    onAccountChanged(callback: (account: string) => void): void;
    /**
     * Subscribe to chain changes
     */
    onChainChanged(callback: (chainId: number) => void): void;
    /**
     * Remove all event listeners
     */
    removeAllListeners(): void;
    deinit(): Promise<void>;
    request(args: RequestArguments): Promise<unknown>;
    on(eventName: string, listener: EventListener): void;
    removeListener(eventName: string, listener: EventListener): void;
    removeAllCaEventListeners(eventName?: string): void;
    /**
     * Standalone function to execute funds into a smart contract
     * @param params execute parameters including contract details and transaction settings
     * @returns Promise resolving to execute result with transaction hash and explorer URL
     */
    execute(params: ExecuteParams): Promise<ExecuteResult>;
    /**
     * Simulate a standalone execute to estimate gas costs and validate parameters
     * @param params execute parameters for simulation
     * @returns Promise resolving to simulation result with gas estimates
     */
    simulateExecute(params: ExecuteParams): Promise<ExecuteSimulation>;
    /**
     * Enhanced bridge and execute function with optional execute step and improved error handling
     * @param params Enhanced bridge and execute parameters
     * @returns Promise resolving to comprehensive operation result
     */
    bridgeAndExecute(params: BridgeAndExecuteParams): Promise<BridgeAndExecuteResult>;
    /**
     * Simulate bridge and execute operation using bridge output amounts for realistic execute cost estimation
     * This method provides more accurate gas estimates by using the actual amount that will be
     * received on the destination chain after bridging (accounting for fees, slippage, etc.)
     * Includes detailed step-by-step breakdown with approval handling.
     */
    simulateBridgeAndExecute(params: BridgeAndExecuteParams): Promise<BridgeAndExecuteSimulationResult>;
}
