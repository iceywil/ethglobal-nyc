import { formatBalance as utilFormatBalance, parseUnits as utilParseUnits, formatUnits as utilFormatUnits, isValidAddress as utilIsValidAddress, truncateAddress as utilTruncateAddress, chainIdToHex as utilChainIdToHex, hexToChainId as utilHexToChainId, getChainMetadata as utilGetChainMetadata, formatTokenAmount as utilFormatTokenAmount, formatTestnetTokenAmount as utilFormatTestnetTokenAmount } from '../utils';
import { SUPPORTED_CHAINS } from '../constants';
import { ChainAbstractionAdapter } from '../adapters/chain-abstraction-adapter';
export declare class NexusUtils {
    private readonly adapter;
    private readonly isReady;
    constructor(adapter: ChainAbstractionAdapter, isReady: () => boolean);
    private ensureInitialized;
    formatBalance: typeof utilFormatBalance;
    parseUnits: typeof utilParseUnits;
    formatUnits: typeof utilFormatUnits;
    isValidAddress: typeof utilIsValidAddress;
    truncateAddress: typeof utilTruncateAddress;
    chainIdToHex: typeof utilChainIdToHex;
    hexToChainId: typeof utilHexToChainId;
    getMainnetTokenMetadata: (symbol: import("..").SUPPORTED_TOKENS) => import("..").TokenMetadata | undefined;
    getTestnetTokenMetadata: (symbol: import("..").SUPPORTED_TOKENS) => import("..").TokenMetadata | undefined;
    getTokenMetadata: (symbol: import("..").SUPPORTED_TOKENS) => import("..").TokenMetadata | undefined;
    getChainMetadata: typeof utilGetChainMetadata;
    formatTokenAmount: typeof utilFormatTokenAmount;
    formatTestnetTokenAmount: typeof utilFormatTestnetTokenAmount;
    getSupportedChains(): Array<{
        id: number;
        name: string;
        logo: string;
    }>;
    isSupportedChain(chainId: (typeof SUPPORTED_CHAINS)[keyof typeof SUPPORTED_CHAINS]): boolean;
    isSupportedToken(token: string): boolean;
}
