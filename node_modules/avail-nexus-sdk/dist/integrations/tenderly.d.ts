import { BackendConfig, GasEstimationRequest, HealthCheckResponse, ServiceStatusResponse, BundleSimulationRequest, BundleSimulationResponse } from './types';
/**
 * Backend simulation result interface
 */
export interface BackendSimulationResult {
    gasUsed: string;
    gasPrice: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
    success: boolean;
    errorMessage?: string;
    estimatedCost: {
        totalFee: string;
    };
}
/**
 * Backend client for gas estimation using new API
 */
export declare class BackendSimulationClient {
    private readonly baseUrl;
    constructor(config: BackendConfig);
    /**
     * Check if a specific chain is supported
     */
    isChainSupported(chainId: number): Promise<boolean>;
    /**
     * Get all supported chains
     */
    getSupportedChains(): Promise<Record<string, string> | null>;
    /**
     * Get service status
     */
    getServiceStatus(): Promise<ServiceStatusResponse | null>;
    /**
     * Health check
     */
    healthCheck(): Promise<HealthCheckResponse | null>;
    /**
     * Test connectivity and service health
     */
    testConnection(): Promise<boolean>;
    /**
     * Get detailed service information
     */
    getServiceInfo(): Promise<{
        healthy: boolean;
        configured: boolean;
        supportedChains: number;
        version?: string;
        uptime?: number;
    }>;
    /**
     * Simulate transaction using Tenderly's Gateway RPC with state overrides
     * This provides more accurate simulation results than basic gas estimation
     */
    simulate(request: GasEstimationRequest): Promise<BackendSimulationResult>;
    /**
     * Fetch current gas price via RPC
     */
    private getCurrentGasPrice;
    /**
     * Get RPC URL for a given chain ID using CHAIN_METADATA
     */
    private getRpcUrl;
    simulateBundle(request: BundleSimulationRequest): Promise<BundleSimulationResponse>;
}
/**
 * Factory function to create a backend simulation client
 */
export declare function createBackendSimulationClient(config: BackendConfig): BackendSimulationClient;
/**
 * Configure the default simulation client
 */
export declare function configureSimulationBackend(config: BackendConfig): void;
/**
 * Get the default simulation client
 */
export declare function getSimulationClient(): BackendSimulationClient | null;
/**
 * Check if simulation backend is configured
 */
export declare function isSimulationConfigured(): boolean;
/**
 * Initialize simulation client with health check
 */
export declare function initializeSimulationClient(baseUrl?: string): Promise<{
    success: boolean;
    error?: string;
}>;
