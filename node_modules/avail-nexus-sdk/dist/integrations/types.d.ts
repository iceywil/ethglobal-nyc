import { Hex } from 'viem';
export interface ApiResponse<T = unknown> {
    success: boolean;
    data?: T;
    error?: string;
    message?: string;
    timestamp?: string;
}
/**
 * State override for simulation - allows modifying blockchain state during simulation
 */
export interface StateOverride {
    [address: string]: {
        balance?: string;
        storage?: Record<string, string>;
        code?: string;
        nonce?: string;
    };
}
/**
 * Enhanced simulation step for multi-step operations
 */
export interface EnhancedSimulationStep {
    type: 'funding' | 'approval' | 'execute' | 'bridge' | 'transfer';
    required: boolean;
    description: string;
    params: GasEstimationRequest;
    stateOverride?: StateOverride;
    expectedGas?: string;
    dependsOn?: string[];
    stepId?: string;
}
/**
 * Enhanced simulation result with detailed step breakdown
 */
export interface EnhancedSimulationResult {
    totalGasUsed: string;
    success: boolean;
    error?: string;
    steps: Array<{
        stepId: string;
        type: string;
        gasUsed: string;
        success: boolean;
        error?: string;
        stateChanges?: Record<string, unknown>;
    }>;
    stateOverrides?: StateOverride;
    simulationMetadata?: {
        blockNumber: string;
        timestamp: string;
        chainId: string;
    };
}
/**
 * Gas estimation request parameters for backend API
 */
export interface GasEstimationRequest {
    chainId: string;
    from: string;
    to: string;
    value?: string;
    data?: string;
    gas?: string;
    gasPrice?: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
    blockNumber?: string | 'latest';
}
/**
 * Enhanced gas estimation request with state override support
 */
export interface EnhancedGasEstimationRequest extends GasEstimationRequest {
    stateOverride?: StateOverride;
    simulationSteps?: EnhancedSimulationStep[];
    enableStateOverride?: boolean;
}
/**
 * Bundle simulation request for multiple steps
 */
export interface BundleSimulationRequest {
    chainId: string;
    simulations: Array<{
        stepId: string;
        type: string;
        from: string;
        to: string;
        data?: string;
        value?: string;
        stateOverride?: StateOverride;
    }>;
}
/**
 * Backend bundle simulation response (raw format)
 */
export interface BackendBundleResponse {
    success: boolean;
    data: Array<{
        gasLimit: Hex;
        gasUsed: Hex;
    }>;
    chainId: string;
    requestId: string;
    message: string;
}
/**
 * Bundle simulation response (processed format)
 */
export interface BundleSimulationResponse {
    success: boolean;
    results: Array<{
        stepId: string;
        gasUsed: string;
        success: boolean;
        error?: string;
    }>;
    totalGasUsed: string;
}
/**
 * Gas estimation response from backend API
 */
export interface GasEstimationResponse {
    gasLimit: string;
    gasUsed: string;
    gasPrice?: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
}
/**
 * Enhanced gas estimation response with state change details
 */
export interface EnhancedGasEstimationResponse extends GasEstimationResponse {
    stateChanges?: Record<string, unknown>;
    simulationTrace?: unknown;
    revertReason?: string;
    success: boolean;
}
/**
 * Chain support response
 */
export interface ChainSupportResponse {
    chainId: string;
    supported: boolean;
    networkName?: string;
}
/**
 * Service status response
 */
export interface ServiceStatusResponse {
    configured: boolean;
    supportedChainsCount: number;
}
/**
 * Health check response
 */
export interface HealthCheckResponse {
    status: 'ok' | 'error';
    timestamp: string;
    uptime: number;
    environment: string;
    version: string;
}
/**
 * Backend configuration interface
 */
export interface BackendConfig {
    baseUrl: string;
}
