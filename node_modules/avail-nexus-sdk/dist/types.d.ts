import { SUPPORTED_CHAINS } from './constants';
import { Abi, TransactionReceipt } from 'viem';
import type { OnIntentHook, OnAllowanceHook, EthereumProvider, RequestArguments, ProgressStep, ProgressSteps, Intent, onAllowanceHookSource, Network, RequestForFunds, SDKConfig, UserAsset, RFF } from '@arcana/ca-sdk';
type TokenInfo = {
    contractAddress: `0x${string}`;
    decimals: number;
    logo?: string;
    name: string;
    platform?: string;
    symbol: string;
};
type NexusNetwork = 'mainnet' | 'testnet';
export interface BlockTransaction {
    hash?: string;
    from?: string;
}
export interface Block {
    transactions?: BlockTransaction[];
}
export interface ChainMetadata {
    id: number;
    name: string;
    shortName: string;
    logo: string;
    nativeCurrency: {
        name: string;
        symbol: string;
        decimals: number;
    };
    rpcUrls: string[];
    blockExplorerUrls: string[];
}
export interface TokenMetadata {
    symbol: string;
    name: string;
    decimals: number;
    icon: string;
    coingeckoId: string;
    isNative?: boolean;
}
type OnIntentHookData = {
    intent: Intent;
    allow: () => void;
    deny: () => void;
    refresh: () => Promise<Intent>;
};
type OnAllowanceHookData = {
    allow: (s: Array<'min' | 'max' | bigint | string>) => void;
    deny: () => void;
    sources: Array<onAllowanceHookSource>;
};
/**
 * Generic event listener type for CA SDK events
 */
export type EventListener = (...args: unknown[]) => void;
/**
 * Parameters for checking or setting token allowance.
 */
export interface AllowanceParams {
    tokens: string[];
    amount: number;
    chainId: (typeof SUPPORTED_CHAINS)[keyof typeof SUPPORTED_CHAINS];
}
/**
 * Response structure for token allowance.
 */
export interface AllowanceResponse {
    chainID: number;
    allowance: bigint;
    token: string;
}
export type SUPPORTED_TOKENS = 'ETH' | 'USDC' | 'USDT';
export type SUPPORTED_CHAINS_IDS = (typeof SUPPORTED_CHAINS)[keyof typeof SUPPORTED_CHAINS];
/**
 * Parameters for bridging tokens between chains.
 */
export interface BridgeParams {
    token: SUPPORTED_TOKENS;
    amount: number | string;
    chainId: SUPPORTED_CHAINS_IDS;
    gas?: bigint;
}
/**
 * Result structure for bridge transactions.
 */
export interface BridgeResult {
    success: boolean;
    error?: string;
    explorerUrl?: string;
}
/**
 * Result structure for transfer transactions.
 */
export interface TransferResult {
    success: boolean;
    error?: string;
    explorerUrl?: string;
}
export interface SimulationResult {
    intent: Intent;
    token: TokenInfo;
}
/**
 * Parameters for transferring tokens.
 */
export interface TransferParams {
    token: SUPPORTED_TOKENS;
    amount: number | string;
    chainId: SUPPORTED_CHAINS_IDS;
    recipient: `0x${string}`;
}
/**
 * Enhanced token balance information
 */
export interface TokenBalance {
    symbol: string;
    balance: string;
    formattedBalance: string;
    balanceInFiat?: number;
    chainId: number;
    contractAddress?: `0x${string}`;
    isNative?: boolean;
}
export interface ExecuteParams {
    toChainId: number;
    contractAddress: string;
    contractAbi: Abi;
    functionName: string;
    functionParams: readonly unknown[];
    value?: string;
    enableTransactionPolling?: boolean;
    transactionTimeout?: number;
    waitForReceipt?: boolean;
    receiptTimeout?: number;
    requiredConfirmations?: number;
    tokenApproval: {
        token: SUPPORTED_TOKENS;
        amount: string;
    };
}
export interface ExecuteResult {
    transactionHash: string;
    explorerUrl: string;
    chainId: number;
    receipt?: TransactionReceipt;
    confirmations?: number;
    gasUsed?: string;
    effectiveGasPrice?: string;
}
export interface ExecuteSimulation {
    gasUsed: string;
    success: boolean;
    error?: string;
    gasCostEth?: string;
}
export interface ApprovalInfo {
    needsApproval: boolean;
    currentAllowance: bigint;
    requiredAmount: bigint;
    tokenAddress?: string;
    spenderAddress: string;
    token: SUPPORTED_TOKENS;
    chainId: number;
    hasPendingApproval?: boolean;
}
export interface ApprovalSimulation {
    gasUsed: string;
    gasPrice: string;
    totalFee: string;
    success: boolean;
    error?: string;
}
export interface SimulationStep {
    type: 'bridge' | 'approval' | 'execute';
    required: boolean;
    simulation: SimulationResult | ApprovalSimulation | ExecuteSimulation;
    description: string;
}
export interface BridgeAndExecuteSimulationResult {
    steps: SimulationStep[];
    bridgeSimulation: SimulationResult | null;
    executeSimulation?: ExecuteSimulation;
    totalEstimatedCost?: {
        total: string;
        breakdown: {
            bridge: string;
            execute: string;
        };
    };
    success: boolean;
    error?: string;
    metadata?: {
        bridgeReceiveAmount: string;
        bridgeFee: string;
        inputAmount: string;
        targetChain: number;
        approvalRequired: boolean;
    };
}
export interface BridgeAndExecuteParams {
    toChainId: SUPPORTED_CHAINS_IDS;
    token: SUPPORTED_TOKENS;
    amount: number | string;
    recipient?: `0x${string}`;
    execute?: Omit<ExecuteParams, 'toChainId'>;
    enableTransactionPolling?: boolean;
    transactionTimeout?: number;
    waitForReceipt?: boolean;
    receiptTimeout?: number;
    requiredConfirmations?: number;
    recentApprovalTxHash?: string;
}
export interface BridgeAndExecuteResult {
    executeTransactionHash?: string;
    executeExplorerUrl?: string;
    approvalTransactionHash?: string;
    toChainId: number;
    success: boolean;
    error?: string;
}
/**
 * Smart contract call parameters
 */
export interface ContractCallParams {
    to: `0x${string}`;
    data: `0x${string}`;
    value?: bigint;
    gas?: bigint;
    gasPrice?: bigint;
}
export type { OnIntentHook, OnAllowanceHook, EthereumProvider, RequestArguments, ProgressStep, ProgressSteps, Intent, OnIntentHookData, OnAllowanceHookData, onAllowanceHookSource as AllowanceHookSource, Network, UserAsset, TokenInfo, RequestForFunds, SDKConfig, NexusNetwork, TransactionReceipt, RFF, };
