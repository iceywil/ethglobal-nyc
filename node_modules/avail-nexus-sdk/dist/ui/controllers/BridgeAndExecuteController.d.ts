import React from 'react';
import type { ITransactionController, ActiveTransaction } from '../types';
import { NexusSDK } from '../..';
import { BridgeAndExecuteParams, BridgeAndExecuteResult } from '../../types';
/**
 * Configuration interface for Bridge & Execute transactions.
 * Only bridge inputs are collected from user; execute parameters are supplied via button props.
 */
export interface BridgeAndExecuteConfig extends Partial<BridgeAndExecuteParams> {
}
/**
 * Controller for Bridge & Execute transactions.
 * Handles validation of bridge inputs combined with execute configuration,
 * orchestrates simulation and execution via the NexusSDK.
 */
export declare class BridgeAndExecuteController implements ITransactionController {
    InputForm: React.FC<{
        prefill: Partial<BridgeAndExecuteConfig>;
        onUpdate: (data: Partial<BridgeAndExecuteConfig>) => void;
        isBusy: boolean;
        tokenBalance?: string;
        prefillFields?: {
            toChainId?: boolean;
            token?: boolean;
            amount?: boolean;
        };
    }>;
    hasSufficientInput(inputData: Partial<BridgeAndExecuteParams>): boolean;
    /**
     * Build the Execute object from current input.
     * Fetches the active wallet address via the CA-enhanced provider (eth_accounts).
     */
    private buildExecute;
    runReview(sdk: NexusSDK, inputData: Partial<BridgeAndExecuteParams>): Promise<ActiveTransaction['simulationResult']>;
    confirmAndProceed(sdk: NexusSDK, inputData: Partial<BridgeAndExecuteParams>, _simulationResult?: ActiveTransaction['simulationResult']): Promise<BridgeAndExecuteResult>;
}
