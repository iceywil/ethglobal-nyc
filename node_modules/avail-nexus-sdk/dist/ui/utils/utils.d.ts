import { type ClassValue } from 'clsx';
import { OrchestratorStatus, ReviewStatus } from '../types';
import { Abi } from 'viem';
import type { ExecuteParams } from '../../types';
export declare function cn(...inputs: ClassValue[]): string;
export declare const getButtonText: (status: OrchestratorStatus, reviewStatus: ReviewStatus) => "Sign" | "Try Again" | "Start Transaction" | "Simulating..." | "Approve and Continue" | "Continue";
export declare const getOperationText: (type: string) => "Bridging" | "Transferring" | "Bridge & Execute" | "Processing";
export declare const getStatusText: (stepData: any, operationType: string) => string;
/**
 * Format error messages to be user-friendly for display in UI components
 *
 * @param error - The error object or string from various sources (viem, Arcana SDK, etc.)
 * @param context - Optional context about where the error occurred (e.g., 'transaction', 'allowance')
 * @returns A user-friendly error message
 */
export declare function formatErrorForUI(error: unknown, context?: string): string;
/**
 * Check if an error indicates user rejection/cancellation
 */
export declare function isUserRejectionError(error: unknown): boolean;
/**
 * Check if an error is related to an unrecognized chain
 */
export declare function isChainError(error: unknown): boolean;
/**
 * Extract chain ID from error message
 * Supports both hex (0x...) and decimal formats
 */
export declare function extractChainIdFromError(error: unknown): number | null;
/**
 * Add a chain to the user's wallet using wallet_addEthereumChain
 */
export declare function addChainToWallet(chainId: number, provider: {
    request: (args: {
        method: string;
        params?: any[];
    }) => Promise<any>;
}): Promise<boolean>;
/**
 * Find ABI fragment for given function name (optionally matching parameter count)
 */
export declare function findAbiFragment(abi: Abi, functionName: string, paramCount?: number): any;
/**
 * Validate execute configuration against ABI and token/value rules
 */
export declare function validateExecuteConfig(execute: Omit<ExecuteParams, 'toChainId'>, abi: Abi): void;
