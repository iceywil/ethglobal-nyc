import { CA, Network, SDKConfig } from '@arcana/ca-sdk';
import SafeEventEmitter from '@metamask/safe-event-emitter';
import type { EthereumProvider, OnIntentHook, UserAsset, OnAllowanceHook, RequestArguments, BridgeParams, BridgeResult, TransferParams, TransferResult, AllowanceResponse, EventListener, SimulationResult, BridgeAndExecuteParams, BridgeAndExecuteResult, ExecuteParams, ExecuteResult, ExecuteSimulation, RequestForFunds, BridgeAndExecuteSimulationResult, SUPPORTED_CHAINS_IDS, SUPPORTED_TOKENS } from '../types';
/**
 * Refactored Adapter class that wraps CA SDK and provides a unified interface for chain abstraction operations.
 * Now uses a service-based architecture for better organization and maintainability.
 */
export declare class ChainAbstractionAdapter {
    readonly ca: CA;
    evmProvider: EthereumProvider | null;
    readonly caEvents: SafeEventEmitter;
    private initialized;
    private bridgeService;
    private transferService;
    private executeService;
    private approvalService;
    private bridgeExecuteService;
    constructor(config?: SDKConfig);
    /**
     * Initialize the CA SDK with an EVM provider.
     */
    initialize(provider: EthereumProvider): Promise<void>;
    /**
     * Check if the adapter has been initialized
     */
    isInitialized(): boolean;
    /**
     * Get the EVM provider enhanced with CA functionality
     */
    getEVMProviderWithCA(): EthereumProvider;
    /**
     * Get unified balances for all supported tokens across all chains.
     */
    getUnifiedBalances(): Promise<UserAsset[]>;
    /**
     * Get unified balance for a specific token symbol.
     */
    getUnifiedBalance(symbol: string): Promise<UserAsset | undefined>;
    /**
     * Get allowance information for tokens.
     */
    getAllowance(chainId?: number, tokens?: string[]): Promise<AllowanceResponse[]>;
    /**
     * Set allowance for tokens.
     */
    setAllowance(chainId: number, tokens: string[], amount: bigint): Promise<void>;
    /**
     * Revoke allowance for tokens.
     */
    revokeAllowance(chainId: number, tokens: string[]): Promise<void>;
    /**
     * Set intent hook callback.
     */
    setOnIntentHook(callback: OnIntentHook): void;
    /**
     * Set allowance hook callback.
     */
    setOnAllowanceHook(callback: OnAllowanceHook): void;
    /**
     * Bridge tokens between chains using the bridge service.
     */
    bridge(params: BridgeParams): Promise<BridgeResult>;
    /**
     * Simulate bridge transaction using the bridge service.
     */
    simulateBridge(params: BridgeParams): Promise<SimulationResult>;
    /**
     * Transfer tokens to a recipient using the transfer service.
     */
    transfer(params: TransferParams): Promise<TransferResult>;
    /**
     * Simulate transfer transaction using the transfer service.
     */
    simulateTransfer(params: TransferParams): Promise<SimulationResult>;
    /**
     * Execute a contract call using the execute service.
     */
    execute(params: ExecuteParams): Promise<ExecuteResult>;
    /**
     * Simulate contract execution using the execute service.
     */
    simulateExecute(params: ExecuteParams): Promise<ExecuteSimulation>;
    /**
     * Ensure contract approval using the approval service.
     */
    ensureContractApproval(tokenApproval: {
        token: SUPPORTED_TOKENS;
        amount: string;
    }, spenderAddress: string, chainId: number, waitForConfirmation?: boolean): Promise<import("./types/service-types").ApprovalResult>;
    /**
     * Get user's intents with pagination.
     */
    getMyIntents(page?: number): Promise<RequestForFunds[]>;
    /**
     * Subscribe to account change events.
     */
    onAccountChanged(callback: (account: string) => void): void;
    /**
     * Subscribe to chain change events.
     */
    onChainChanged(callback: (chainId: number) => void): void;
    /**
     * Remove all listeners for all events.
     */
    removeAllListeners(): void;
    /**
     * Get the list of supported chains from the CA SDK.
     */
    getSupportedChains(env?: Network): Array<{
        id: number;
        name: string;
        logo: string;
    }>;
    /**
     * Check if a chain is supported by the adapter.
     */
    isSupportedChain(chainId: SUPPORTED_CHAINS_IDS): boolean;
    /**
     * Check if a token is supported by the adapter.
     */
    isSupportedToken(token: string): boolean;
    /**
     * Deinitialize the CA SDK and clean up resources.
     */
    deinit(): Promise<void>;
    /**
     * Make a generic EIP-1193 request using the enhanced provider.
     */
    request(args: RequestArguments): Promise<unknown>;
    /**
     * Subscribe to any event emitted by the CA SDK.
     */
    on(eventName: string, listener: EventListener): void;
    /**
     * Remove a specific event listener.
     */
    removeListener(eventName: string, listener: EventListener): void;
    /**
     * Remove all CA event listeners.
     */
    removeAllCaEventListeners(eventName?: string): void;
    /**
     * Bridge and execute operation - uses the BridgeExecuteService
     */
    bridgeAndExecute(params: BridgeAndExecuteParams): Promise<BridgeAndExecuteResult>;
    /**
     * Simulate bridge and execute operation
     */
    simulateBridgeAndExecute(params: BridgeAndExecuteParams): Promise<BridgeAndExecuteSimulationResult>;
    /**
     * Helper method for common initialization validation
     */
    private ensureInitialized;
    /**
     * Enable or disable gas estimation for transactions
     * When enabled, gas estimation will run before each transaction execution
     * This helps identify potential failures early and provides cost estimates
     */
    private setGasEstimationEnabled;
}
