import { CA } from '@arcana/ca-sdk';
import SafeEventEmitter from '@metamask/safe-event-emitter';
import { EthereumProvider } from '../../types';
/**
 * Base service class that provides common functionality for all adapter services
 */
export declare abstract class BaseService {
    protected adapter: ChainAbstractionAdapter;
    constructor(adapter: ChainAbstractionAdapter);
    /**
     * Get the CA SDK instance
     */
    protected get ca(): CA;
    /**
     * Get the EVM provider with CA functionality
     */
    protected get evmProvider(): EthereumProvider;
    /**
     * Get the CA events emitter
     */
    protected get caEvents(): SafeEventEmitter;
    /**
     * Check if the adapter is initialized
     */
    protected get isInitialized(): boolean;
    /**
     * Ensure the adapter is initialized
     */
    protected ensureInitialized(): void;
    /**
     * Helper method for operation event emission (started/completed/failed pattern)
     */
    protected emitOperationEvents: {
        started: (operation: string, data: Record<string, unknown>) => void;
        completed: (operation: string, data: Record<string, unknown>) => void;
        failed: (operation: string, error: unknown, context: string, stage?: string) => void;
    };
}
declare class ChainAbstractionAdapter {
    ca: CA;
    evmProvider: EthereumProvider | null;
    caEvents: SafeEventEmitter;
    isInitialized(): boolean;
}
export {};
