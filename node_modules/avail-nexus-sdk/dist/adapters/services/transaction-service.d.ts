import { BaseService } from '../core/base-service';
import type { EthereumProvider, ExecuteParams } from '../../types';
import type { TransactionOptions, TransactionResult, ExecutePreparation, ChainSwitchResult } from '../types/service-types';
interface GasEstimationResult {
    success: boolean;
    gasEstimate?: string;
    gasEstimateDecimal?: number;
    gasPriceGwei?: string;
    estimatedCostEth?: string;
    error?: string;
    revertReason?: string;
}
/**
 * Service responsible for transaction handling and preparation
 */
export declare class TransactionService extends BaseService {
    private enableGasEstimation;
    /**
     * Enable or disable gas estimation before transaction execution
     */
    setGasEstimationEnabled(enabled: boolean): void;
    /**
     * Estimate gas for a transaction before execution
     */
    estimateTransactionGas(provider: EthereumProvider, transactionParams: {
        from: string;
        to: string;
        data: string;
        value: string;
    }): Promise<GasEstimationResult>;
    /**
     * Ensure we're on the correct chain, switch if needed
     */
    ensureCorrectChain(targetChainId: number): Promise<ChainSwitchResult>;
    /**
     * Prepare execution by validating parameters and encoding function call
     */
    prepareExecution(params: ExecuteParams): Promise<ExecutePreparation>;
    /**
     * Send transaction with enhanced error handling and polling support
     */
    sendTransaction(provider: EthereumProvider, fromAddress: string, contractAddress: string, encodedData: `0x${string}`, value: string, options: TransactionOptions): Promise<`0x${string}`>;
    /**
     * Handle transaction confirmation with receipt and confirmations
     */
    handleTransactionConfirmation(provider: EthereumProvider, transactionHash: `0x${string}`, options: TransactionOptions, chainId: number): Promise<TransactionResult>;
    /**
     * Build execute result with transaction information
     */
    buildExecuteResult(transactionHash: string, chainId: number, receiptInfo: TransactionResult): {
        receipt?: import("viem/_types/types/transaction").TransactionReceipt;
        confirmations?: number;
        gasUsed?: string;
        effectiveGasPrice?: string;
        transactionHash: string;
        explorerUrl: string;
        chainId: number;
    };
}
export {};
