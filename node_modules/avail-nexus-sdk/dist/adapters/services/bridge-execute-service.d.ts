import { BaseService } from '../core/base-service';
import type { ChainAbstractionAdapter } from '../chain-abstraction-adapter';
import type { BridgeAndExecuteParams, BridgeAndExecuteResult, BridgeAndExecuteSimulationResult } from '../../types';
export declare class BridgeExecuteService extends BaseService {
    private bridgeService;
    private executeService;
    private approvalService;
    constructor(adapter: ChainAbstractionAdapter);
    /**
     * Enable or disable gas estimation for execute transactions
     * This provides easy control over whether gas estimation runs before execution
     */
    setGasEstimationEnabled(enabled: boolean): void;
    /**
     * Bridge and execute operation - combines bridge and execute with proper sequencing
     */
    bridgeAndExecute(params: BridgeAndExecuteParams): Promise<BridgeAndExecuteResult>;
    /**
     * Simulate bridge and execute operation
     */
    simulateBridgeAndExecute(params: BridgeAndExecuteParams): Promise<BridgeAndExecuteSimulationResult>;
    /**
     * Handle the execute phase of bridge and execute
     */
    private handleExecutePhase;
    /**
     * Normalize amount input to wei format for consistent processing
     * Supports various input formats and automatically handles token decimals
     */
    private normalizeAmountToWei;
    /**
     * Smart parameter replacement that handles various input types and payable functions
     */
    private replaceAmountInExecuteParams;
    /**
     * Check if two amounts are similar within a tolerance
     */
    private isAmountSimilar;
    /**
     * Check if amount parameter is likely to be an amount-related parameter
     */
    private isLikelyAmountParameter;
    /**
     * Get transaction receipt with retry logic
     * Note: Assumes we're already on the correct chain (handled by checkTransactionSuccess)
     */
    private getTransactionReceipt;
    /**
     * Simulate a failed transaction to get the revert reason
     * Note: Assumes we're already on the correct chain (handled by checkTransactionSuccess)
     */
    private simulateFailedTransaction;
    /**
     * Check transaction success and get detailed error information
     */
    private checkTransactionSuccess;
}
