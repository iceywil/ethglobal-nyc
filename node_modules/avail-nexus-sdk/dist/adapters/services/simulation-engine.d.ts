import type { EnhancedSimulationResult, StateOverride } from '../../integrations/types';
import type { SUPPORTED_TOKENS, ExecuteParams, EthereumProvider } from '../../types';
/**
 * Minimal interface for what SimulationEngine needs from the adapter
 */
interface SimulationEngineAdapter {
    isInitialized(): boolean;
    evmProvider: EthereumProvider;
}
/**
 * Transaction service interface needed by SimulationEngine
 */
interface TransactionServiceInterface {
    prepareExecution(params: ExecuteParams): Promise<{
        encodedData: string;
        fromAddress: string;
    }>;
}
/**
 * Balance check result interface
 */
export interface BalanceCheckResult {
    balance: string;
    sufficient: boolean;
    shortfall: string;
    tokenAddress: string;
}
/**
 * Multi-step simulation engine with state override capabilities
 */
export declare class SimulationEngine {
    private adapter;
    private transactionService;
    constructor(adapter: SimulationEngineAdapter, transactionService: TransactionServiceInterface);
    private ensureInitialized;
    private get evmProvider();
    /**
     * Main entry point for enhanced simulation with automatic state setup
     */
    simulateWithStateSetup(params: {
        user: string;
        tokenRequired: SUPPORTED_TOKENS;
        amountRequired: string;
        contractCall: ExecuteParams;
    }): Promise<EnhancedSimulationResult>;
    /**
     * Check user's token balance on specific chain
     */
    checkUserBalance(user: string, token: SUPPORTED_TOKENS, chainId: number, requiredAmount?: string): Promise<BalanceCheckResult>;
    /**
     * Get the storage slot for token balances mapping - Production Ready Static Mapping
     * Based on actual contract analysis for all supported tokens and chains
     */
    private getBalanceStorageSlot;
    /**
     * Generate state overrides to fund user with required tokens
     */
    generateStateOverrides(user: string, token: SUPPORTED_TOKENS, requiredAmount: string, chainId: number): Promise<StateOverride>;
    /**
     * Generate the sequence of simulation steps needed
     */
    private generateSimulationSteps;
    /**
     * Build approval call data for ERC20 token
     */
    private buildApprovalCallData;
    /**
     * Prepare execution call data
     */
    private prepareExecutionCall;
    /**
     * Execute batch simulation using bundle endpoint
     */
    private executeBatchSimulation;
    /**
     * Merge two state override objects
     */
    private mergeStateOverrides;
    /**
     * Create a failed simulation result
     */
    private createFailedResult;
}
export {};
