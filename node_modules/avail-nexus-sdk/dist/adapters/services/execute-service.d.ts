import { BaseService } from '../core/base-service';
import type { ExecuteParams, ExecuteResult, ExecuteSimulation } from '../../types';
import { ChainAbstractionAdapter } from '../chain-abstraction-adapter';
/**
 * Service responsible for handling execution operations
 */
export declare class ExecuteService extends BaseService {
    private transactionService;
    private approvalService;
    constructor(adapter: ChainAbstractionAdapter);
    /**
     * Enable or disable gas estimation for transactions
     */
    setGasEstimationEnabled(enabled: boolean): void;
    /**
     * Execute a contract call with approval handling
     */
    execute(params: ExecuteParams): Promise<ExecuteResult>;
    /**
     * Simulate contract execution
     */
    simulateExecute(params: ExecuteParams): Promise<ExecuteSimulation>;
    /**
     * Enhanced simulation with automatic state setup
     */
    simulateExecuteEnhanced(params: ExecuteParams): Promise<ExecuteSimulation>;
    /**
     * Determine if enhanced simulation should be used
     */
    private shouldUseEnhancedSimulation;
    /**
     * Check if this is a complex contract call that benefits from enhanced simulation
     */
    private isComplexContractCall;
    /**
     * Run enhanced simulation with automatic state setup
     */
    private runEnhancedSimulation;
}
