import { ChainMetadata, SUPPORTED_CHAINS_IDS, SUPPORTED_TOKENS, TokenMetadata, EthereumProvider, TransactionReceipt } from '../types';
import { type Abi, type Address, type Chain } from 'viem';
/**
 * Shared utility for standardized error message extraction
 */
export declare function extractErrorMessage(error: unknown, fallbackContext: string): string;
export declare function wait(ms: number): Promise<void>;
/**
 * Get Viem chain configuration for supported chains
 */
export declare function getViemChain(chainId: number): Chain;
/**
 * Format a balance string to a human-readable format using Decimal.js
 */
export declare function formatBalance(balance: string, decimals: number, precision?: number): string;
/**
 * Parse units from a human-readable string to wei/smallest unit using Decimal.js
 */
export declare function parseUnits(value: string, decimals: number): bigint;
/**
 * Format units from wei/smallest unit to human-readable string using Decimal.js
 */
export declare function formatUnits(value: bigint, decimals: number): string;
/**
 * Validate if a string is a valid Ethereum address using viem
 */
export declare function isValidAddress(address: string): address is Address;
/**
 * Get mainnet token metadata by symbol
 */
export declare const getMainnetTokenMetadata: (symbol: SUPPORTED_TOKENS) => TokenMetadata | undefined;
/**
 * Get testnet token metadata by symbol
 */
export declare const getTestnetTokenMetadata: (symbol: SUPPORTED_TOKENS) => TokenMetadata | undefined;
/**
 * Get token metadata by symbol (defaults to mainnet, kept for backward compatibility)
 */
export declare const getTokenMetadata: (symbol: SUPPORTED_TOKENS) => TokenMetadata | undefined;
/**
 * Get chain metadata by chain ID
 */
export declare function getChainMetadata(chainId: SUPPORTED_CHAINS_IDS): ChainMetadata;
/**
 * Format a mainnet token amount with proper decimals and symbol
 */
export declare function formatTokenAmount(amount: string | bigint, tokenSymbol: SUPPORTED_TOKENS, precision?: number): string;
/**
 * Format a testnet token amount with proper decimals and symbol
 */
export declare function formatTestnetTokenAmount(amount: string | bigint, tokenSymbol: SUPPORTED_TOKENS, precision?: number): string;
/**
 * Truncate an address for display purposes
 */
export declare function truncateAddress(address: string, startLength?: number, endLength?: number): string;
/**
 * Convert chain ID to hex format
 */
export declare function chainIdToHex(chainId: number): string;
/**
 * Convert hex chain ID to number
 */
export declare function hexToChainId(hex: string): number;
export declare const isMainnetChain: (chainId: SUPPORTED_CHAINS_IDS) => boolean;
export declare const isTestnetChain: (chainId: SUPPORTED_CHAINS_IDS) => boolean;
/**
 * Enhanced contract parameter validation with detailed error messages
 */
export declare function validateContractParams(params: {
    contractAddress: string;
    contractAbi: Abi;
    functionName: string;
    functionParams: readonly unknown[];
    chainId: number;
}): {
    isValid: boolean;
    error?: string;
};
/**
 * Enhanced contract call encoding with comprehensive error handling
 */
export declare function encodeContractCall(params: {
    contractAbi: Abi;
    functionName: string;
    functionParams: readonly unknown[];
}): {
    success: boolean;
    data?: `0x${string}`;
    error?: string;
};
/**
 * Validate and ensure a value is a valid transaction hash
 */
export declare function validateTransactionHash(value: unknown): value is `0x${string}`;
/**
 * Validate hex response from RPC calls
 */
export declare function validateHexResponse(value: unknown, fieldName: string): {
    isValid: boolean;
    error?: string;
};
/**
 * Enhanced block explorer URL generation with fallback support
 */
export declare function getBlockExplorerUrl(chainId: number, txHash: string): string;
/**
 * Get transaction hash with multiple fallback strategies
 */
export declare function getTransactionHashWithFallback(provider: EthereumProvider, response: unknown, options?: {
    enablePolling?: boolean;
    timeout?: number;
    fromAddress?: string;
}): Promise<{
    success: boolean;
    hash?: `0x${string}`;
    error?: string;
}>;
/**
 * Enhanced transaction receipt waiting using Viem
 */
export declare function waitForTransactionReceipt(provider: EthereumProvider, txHash: `0x${string}`, options?: {
    timeout?: number;
    requiredConfirmations?: number;
    pollingInterval?: number;
}, chainId?: number): Promise<{
    success: boolean;
    receipt?: TransactionReceipt;
    confirmations?: number;
    error?: string;
}>;
/**
 * Utility function to get token contract address for a specific token and chain
 * @param token Token symbol (e.g., 'USDC', 'USDT')
 * @param chainId Chain ID
 * @param isTestnet Whether to use testnet addresses
 * @returns Contract address or undefined if not found
 */
export declare function getTokenContractAddress(token: string, chainId: number, isTestnet?: boolean): string | undefined;
export { LOG_LEVEL, setExceptionReporter, setLogLevel, getLogger, logger, type LogLevel, type ExceptionReporter, } from './logger';
