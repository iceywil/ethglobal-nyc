export declare const LOG_LEVEL: {
    readonly DEBUG: 1;
    readonly ERROR: 4;
    readonly INFO: 2;
    readonly NOLOGS: 5;
    readonly WARNING: 3;
};
type LogLevel = (typeof LOG_LEVEL)[keyof typeof LOG_LEVEL];
type ExceptionReporter = (message: string) => void;
export declare const setExceptionReporter: (reporter: ExceptionReporter) => void;
export declare const setLogLevel: (level: LogLevel) => void;
export declare const getLogger: () => Logger;
declare class Logger {
    private prefix;
    consoleLog(level: LogLevel, message: string, params?: unknown): void;
    debug(message: string, params?: unknown): void;
    error(message: string, err?: Error | string): void;
    info<T>(message: string, params?: T): void;
    internalLog(level: LogLevel, message: string, params?: unknown): void;
    warn(message: string, params?: unknown): void;
}
export declare const logger: Logger;
export type { LogLevel, ExceptionReporter };
