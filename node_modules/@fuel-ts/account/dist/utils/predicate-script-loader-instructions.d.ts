export declare const DATA_OFFSET_INDEX = 8;
export declare const CONFIGURABLE_OFFSET_INDEX = 16;
/**
 * Get the offset of the data section in the bytecode
 *
 * @param bytecode - The bytecode to get the offset from
 * @returns The offset of the data section
 */
export declare function getBytecodeDataOffset(bytecode: Uint8Array): number;
/**
 * Get the offset of the configurable section in the bytecode
 *
 * @param bytecode - The bytecode to get the offset from
 * @returns The offset of the configurable section
 */
export declare function getBytecodeConfigurableOffset(bytecode: Uint8Array): number;
/**
 * Takes bytecode and generates it's associated bytecode ID.
 *
 * The bytecode ID is a hash of the bytecode when sliced at the configurable offset. This
 * superseded legacy blob IDs when uploading blobs for scripts and predicates so that
 * the bytecode ID is equal to the legacy blob ID. Therefore blobs can be used for ABI verification.
 *
 * @param bytecode - The bytecode to get the id from
 * @returns The id of the bytecode
 */
export declare function getBytecodeId(bytecode: Uint8Array): string;
/**
 * Takes bytecode and generates it's associated legacy blob ID.
 *
 * The legacy blob ID is a hash of the bytecode when sliced at the data section offset.
 *
 * @param bytecode - The bytecode to get the id from
 * @returns The id of the bytecode
 */
export declare function getLegacyBlobId(bytecode: Uint8Array): string;
export declare function getPredicateScriptLoaderInstructions(originalBinary: Uint8Array, blobId: Uint8Array): {
    loaderBytecode: Uint8Array<ArrayBufferLike>;
    blobOffset: number;
} | {
    loaderBytecode: Uint8Array<ArrayBuffer>;
    blobOffset?: undefined;
};
//# sourceMappingURL=predicate-script-loader-instructions.d.ts.map