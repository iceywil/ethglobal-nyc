import type { AddressInput, WithAddress } from '@fuel-ts/address';
import { Address } from '@fuel-ts/address';
import { FuelError } from '@fuel-ts/errors';
import type { HashableMessage } from '@fuel-ts/hasher';
import type { BigNumberish, BN } from '@fuel-ts/math';
import type { BytesLike } from '@fuel-ts/utils';
import type { FuelConnector, FuelConnectorSendTxParams } from './connectors';
import type { TransactionRequest, CoinQuantityLike, Resource, ResourcesIdsToIgnore, Provider, ScriptTransactionRequestLike, TransactionCost, EstimateTransactionParams, CursorPaginationArgs, TransactionRequestLike, CallResult, GetCoinsResponse, GetMessagesResponse, GetBalancesResponse, Coin, TransactionCostParams, ProviderSendTxParams, TransactionResult, TransactionType, TransactionResponse } from './providers';
import { ScriptTransactionRequest } from './providers';
import { AbstractAccount } from './types';
export type TxParamsType = Pick<ScriptTransactionRequestLike, 'gasLimit' | 'tip' | 'maturity' | 'maxFee' | 'witnessLimit' | 'expiration'>;
export type TransferParams = {
    destination: string | Address;
    amount: BigNumberish;
    assetId: BytesLike;
};
export type ContractTransferParams = {
    contractId: string | Address;
    amount: BigNumberish;
    assetId: BytesLike;
};
export type AccountSendTxParams = ProviderSendTxParams & FuelConnectorSendTxParams;
export type EstimatedTxParams = Pick<TransactionCost, 'estimatedPredicates' | 'addedSignatures' | 'requiredQuantities' | 'updateMaxFee' | 'gasPrice' | 'transactionSummary'>;
export type SubmitAllMode = 'sequential' | 'parallel';
export type PrepareSubmitAllParams = {
    txs: ScriptTransactionRequest[];
    mode?: SubmitAllMode;
};
export type SubmitAllCallbackResponse = {
    txResponses: TransactionResult<TransactionType.Script>[];
    errors: FuelError[];
};
export type SubmitAllCallback = () => Promise<SubmitAllCallbackResponse>;
export type AssembleConsolidationTxsParams = {
    coins: Coin[];
    mode?: SubmitAllMode;
    outputNum?: number;
};
export type ConsolidateCoins = {
    assetId: string;
    mode?: SubmitAllMode;
    outputNum?: number;
};
export type FakeResources = Partial<Coin> & Required<Pick<Coin, 'amount' | 'assetId'>>;
/**
 * `Account` provides an abstraction for interacting with accounts or wallets on the network.
 */
export declare class Account extends AbstractAccount implements WithAddress {
    /**
     * The address associated with the account.
     */
    readonly address: Address;
    /**
     * The provider used to interact with the network.
     */
    protected _provider?: Provider;
    /**
     * The connector for use with external wallets
     */
    protected _connector?: FuelConnector;
    /**
     * Creates a new Account instance.
     *
     * @param address - The address of the account.
     * @param provider - A Provider instance  (optional).
     * @param connector - A FuelConnector instance (optional).
     */
    constructor(address: AddressInput, provider?: Provider, connector?: FuelConnector);
    /**
     * The provider used to interact with the network.
     *
     * @returns A Provider instance.
     *
     * @throws `FuelError` if the provider is not set.
     */
    get provider(): Provider;
    /**
     * Sets the provider for the account.
     *
     * @param provider - A Provider instance.
     */
    set provider(provider: Provider);
    /**
     * Changes the provider connection for the account.
     *
     * @param provider - A Provider instance.
     * @returns The updated Provider instance.
     */
    connect(provider: Provider): Provider;
    /**
     * Retrieves resources satisfying the spend query for the account.
     *
     * @param quantities - Quantities of resources to be obtained.
     * @param resourcesIdsToIgnore - IDs of resources to be excluded from the query (optional).
     * @returns A promise that resolves to an array of Resources.
     */
    getResourcesToSpend(quantities: CoinQuantityLike[], resourcesIdsToIgnore?: ResourcesIdsToIgnore): Promise<Resource[]>;
    /**
     * Retrieves coins owned by the account.
     *
     * @param assetId - The asset ID of the coins to retrieve (optional).
     * @returns A promise that resolves to an array of Coins.
     */
    getCoins(assetId?: BytesLike, paginationArgs?: CursorPaginationArgs): Promise<GetCoinsResponse>;
    /**
     * Retrieves messages owned by the account.
     *
     * @returns A promise that resolves to an array of Messages.
     */
    getMessages(paginationArgs?: CursorPaginationArgs): Promise<GetMessagesResponse>;
    /**
     * Retrieves the balance of the account for the given asset.
     *
     * @param assetId - The asset ID to check the balance for (optional).
     * @returns A promise that resolves to the balance amount.
     */
    getBalance(assetId?: BytesLike): Promise<BN>;
    /**
     * Retrieves all the balances for the account.
     *
     * @returns A promise that resolves to an array of Coins and their quantities.
     */
    getBalances(): Promise<GetBalancesResponse>;
    /**
     * Funds a transaction request by adding the necessary resources.
     *
     * @typeParam T - The type of the TransactionRequest.
     * @param request - The transaction request to fund.
     * @param params - The estimated transaction parameters.
     * @returns A promise that resolves to the funded transaction request.
     *
     * @deprecated Use provider.assembleTx instead
     * Check the migration guide https://docs.fuel.network/guide/assembling-transactions/migration-guide.html for more information.
     */
    fund<T extends TransactionRequest>(request: T, params: EstimatedTxParams): Promise<T>;
    /**
     * A helper that creates a transfer transaction request and returns it.
     *
     * @param destination - The address of the destination.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the prepared transaction request.
     */
    createTransfer(destination: string | Address, amount: BigNumberish, assetId?: BytesLike, txParams?: TxParamsType): Promise<ScriptTransactionRequest>;
    /**
     * Transfers coins to a destination address.
     *
     * @param destination - The address of the destination.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    transfer(destination: string | Address, amount: BigNumberish, assetId?: BytesLike, txParams?: TxParamsType): Promise<TransactionResponse>;
    /**
     * Transfers multiple amounts of a token to multiple recipients.
     *
     * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
     * @param txParams - Optional transaction parameters.
     * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.
     */
    batchTransfer(transferParams: TransferParams[], txParams?: TxParamsType): Promise<TransactionResponse>;
    /**
     * Adds a transfer to the given transaction request.
     *
     * @param request - The script transaction request to add transfers to.
     * @param transferParams - The object representing the transfer to be made.
     * @returns The updated transaction request with the added transfer.
     */
    addTransfer(request: ScriptTransactionRequest, transferParams: TransferParams): ScriptTransactionRequest;
    /**
     * Adds multiple transfers to a script transaction request.
     *
     * @param request - The script transaction request to add transfers to.
     * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
     * @returns The updated script transaction request.
     */
    addBatchTransfer(request: ScriptTransactionRequest, transferParams: TransferParams[]): ScriptTransactionRequest;
    /**
     * Transfers coins to a contract address.
     *
     * @param contractId - The address of the contract.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    transferToContract(contractId: string | Address, amount: BigNumberish, assetId: BytesLike, txParams?: TxParamsType): Promise<TransactionResponse>;
    batchTransferToContracts(contractTransferParams: ContractTransferParams[], txParams?: TxParamsType): Promise<TransactionResponse>;
    /**
     * Withdraws an amount of the base asset to the base chain.
     *
     * @param recipient - Address of the recipient on the base chain.
     * @param amount - Amount of base asset.
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    withdrawToBaseLayer(recipient: AddressInput, amount: BigNumberish, txParams?: TxParamsType): Promise<TransactionResponse>;
    /**
     * Consolidates base asset UTXOs into fewer, larger ones.
     *
     * Retrieves a limited number of base asset coins (as defined by `Provider.RESOURCES_PAGE_SIZE_LIMIT`),
     * assembles consolidation transactions, and submits them to the network.
     *
     * Note: This method currently supports only the base asset.
     *
     * @param params - The parameters for coin consolidation, including the asset ID, mode, and output number.
     * @returns A promise that resolves to the response of the submitted transactions.
     * @throws Will throw an error if the asset is not a base asset as non-base asset consolidation is not implemented.
     */
    consolidateCoins(params: ConsolidateCoins): Promise<SubmitAllCallbackResponse>;
    /**
     * Assembles transactions for consolidating base asset coins into fewer UTXOs.
     *
     * This method splits the provided coins into batches and creates transaction requests
     * to consolidate them. It calculates the necessary fee and sets up the transactions
     * to be submitted either in parallel (default) or sequentially.
     *
     * @param params - The parameters for assembling base asset consolidation transactions.
     *
     * @returns An object containing the assembled transactions, the total fee cost, and a callback to submit all transactions.
     */
    assembleBaseAssetConsolidationTxs(params: AssembleConsolidationTxsParams): Promise<{
        txs: ScriptTransactionRequest[];
        totalFeeCost: BN;
        submitAll: SubmitAllCallback;
    }>;
    /**
     * Prepares a function to submit all transactions either sequentially or in parallel.
     *
     * @param params - The parameters for preparing the submitAll callback.
     *
     * @returns A callback that, when called, submits all transactions and returns their results and any errors encountered.
     */
    prepareSubmitAll: (params: PrepareSubmitAllParams) => SubmitAllCallback;
    /**
     * Returns a transaction cost to enable user
     * to set gasLimit and also reserve balance amounts
     * on the transaction.
     *
     * @param transactionRequestLike - The transaction request object.
     * @param transactionCostParams - The transaction cost parameters (optional).
     *
     * @returns A promise that resolves to the transaction cost object.
     *
     * @deprecated Use provider.assembleTx instead
     * Check the migration guide https://docs.fuel.network/guide/assembling-transactions/migration-guide.html for more information.
     */
    getTransactionCost(transactionRequestLike: TransactionRequestLike, { signatureCallback, quantities, gasPrice }?: TransactionCostParams): Promise<TransactionCost>;
    /**
     * Sign a message from the account via the connector.
     *
     * @param message - the message to sign.
     * @returns a promise that resolves to the signature.
     *
     * @hidden
     */
    signMessage(message: HashableMessage): Promise<string>;
    /**
     * Signs a transaction from the account via the connector..
     *
     * @param transactionRequestLike - The transaction request to sign.
     * @returns A promise that resolves to the signature of the transaction.
     */
    signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string>;
    /**
     * Sends a transaction to the network.
     *
     * @param transactionRequestLike - The transaction request to be sent.
     * @param sendTransactionParams - The provider send transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    sendTransaction(transactionRequestLike: TransactionRequestLike, { estimateTxDependencies, ...connectorOptions }?: AccountSendTxParams): Promise<TransactionResponse>;
    /**
     * Simulates a transaction.
     *
     * @param transactionRequestLike - The transaction request to be simulated.
     * @param estimateTxParams - The estimate transaction params (optional).
     * @returns A promise that resolves to the call result.
     */
    simulateTransaction(transactionRequestLike: TransactionRequestLike, { estimateTxDependencies }?: EstimateTransactionParams): Promise<CallResult>;
    /**
     * Generates an array of fake resources based on the provided coins.
     *
     * @param coins - An array of `FakeResources` objects representing the coins.
     * @returns An array of `Resource` objects with generated properties.
     */
    generateFakeResources(coins: FakeResources[]): Array<Resource>;
    /** @hidden */
    private prepareTransactionForSend;
    /** @hidden */
    private prepareTransactionSummary;
    /** @hidden * */
    private assembleTx;
    /** @hidden * */
    private validateTransferAmount;
    /** @hidden * */
    private estimateAndFundTransaction;
    /** @hidden * */
    private validateGasLimitAndMaxFee;
    /** @hidden * */
    private validateConsolidationTxsCoins;
}
//# sourceMappingURL=account.d.ts.map