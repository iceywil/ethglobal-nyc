import type { BigNumberish, BN } from '@fuel-ts/math';
import type { AbstractAccount } from '../types';
import type { GqlAccount } from './__generated__/operations';
import type Provider from './provider';
import type { TransactionRequest } from './transaction-request';
/**
 * Resolve the account for the `assembleTx` GraphQL input params. More specifically to the properties:
 * - feePayerAccount
 * - accountCoinQuantities[n].account
 *
 * These should be informed to the client in the following signature:
 *
 * 1 - Common Account (Not a Predicate)
 * ```ts
 * feePayerAccount: {
 *   address: string;
 * }
 * ```
 *
 * 2 - Predicate
 * ```ts
 * feePayerAccount: {
 *   predicate: {
 *     predicate: string;
 *     predicateAddress: string;
 *     predicateData: string;
 *   };
 * }
 * ```
 */
export declare const resolveAccountForAssembleTxParams: (account: AbstractAccount) => GqlAccount;
export declare const setAndValidateGasAndFeeForAssembledTx: <T extends TransactionRequest>(params: {
    transactionRequest: T;
    provider: Provider;
    gasPrice: BN;
    setGasLimit?: BigNumberish;
    setMaxFee?: BigNumberish;
}) => Promise<T>;
//# sourceMappingURL=assemble-tx-helpers.d.ts.map