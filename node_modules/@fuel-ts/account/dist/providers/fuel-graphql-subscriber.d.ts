import type { DocumentNode } from 'graphql';
type FuelGraphQLSubscriberOptions = {
    url: string;
    query: DocumentNode;
    variables?: Record<string, unknown>;
    fetchFn: typeof fetch;
    operationName: string;
    onEvent?: (event: FuelGraphqlSubscriberEvent) => void;
};
export interface FuelGraphqlSubscriberEvent {
    data: unknown;
    errors?: {
        message: string;
    }[];
    extensions?: Record<string, unknown>;
}
export declare class FuelGraphqlSubscriber implements AsyncIterator<unknown> {
    private stream;
    private onEvent?;
    static incompatibleNodeVersionMessage: string | false;
    private static textDecoder;
    private constructor();
    static create(options: FuelGraphQLSubscriberOptions): Promise<FuelGraphqlSubscriber>;
    /**
     * This method will take a stream reader and parse the event from the stream.
     *
     * @param reader - The reader of the SSE stream
     * @param parsingLeftover - The leftover string from parsing the previous event
     * @returns The event parsed as a full GraphQL response, whether the stream is done and the leftover string after parsing
     */
    static readEvent(reader: ReadableStreamDefaultReader<Uint8Array>, parsingLeftover?: string): Promise<{
        event: FuelGraphqlSubscriberEvent | undefined;
        done: boolean;
        parsingLeftover: string;
    }>;
    private events;
    private parsingLeftover;
    /**
     * Gets automatically called when iterating in a `for-await-of` loop.
     * It can also be called manually.
     *
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next
     */
    next(): Promise<IteratorResult<unknown, unknown>>;
    /**
     * Gets called when `break` is called in a `for-await-of` loop.
     */
    return(): Promise<IteratorResult<unknown, undefined>>;
    [Symbol.asyncIterator](): AsyncIterator<unknown, unknown, undefined>;
}
export {};
//# sourceMappingURL=fuel-graphql-subscriber.d.ts.map