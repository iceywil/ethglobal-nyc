import type { BN } from '@fuel-ts/math';
import type { TransactionResultReceipt } from '../transaction-response';
import { TransactionStatus } from './types';
import type { BlockId, GqlTransactionStatusesNames, GraphqlTransactionStatus, Time, ResolvedOutput, SerializedResolvedOutput } from './types';
/** @hidden */
export declare const getTransactionStatusName: (gqlStatus: GqlTransactionStatusesNames) => TransactionStatus;
/** @hidden */
export declare const extractResolvedOutputs: (serializedOutputs?: SerializedResolvedOutput[] | null) => ResolvedOutput[];
type IProcessGraphqlStatusResponse = {
    time?: Time;
    blockId?: BlockId;
    status?: TransactionStatus;
    totalFee?: BN;
    totalGas?: BN;
    receipts?: TransactionResultReceipt[];
    isStatusFailure: boolean;
    isStatusSuccess: boolean;
    isStatusPending: boolean;
    isStatusPreConfirmationSuccess: boolean;
    isStatusPreConfirmationFailure: boolean;
    resolvedOutputs?: ResolvedOutput[];
    errorReason?: string;
};
/** @hidden */
export declare const processGraphqlStatus: (gqlTransactionStatus?: GraphqlTransactionStatus) => IProcessGraphqlStatusResponse;
/**
 * Returns the total fee from the transaction status.
 *
 * @param status - The transaction status.
 * @returns The total fee from the transaction status or undefined.
 */
export declare const getTotalFeeFromStatus: (status?: GraphqlTransactionStatus) => BN | undefined;
export {};
//# sourceMappingURL=status.d.ts.map