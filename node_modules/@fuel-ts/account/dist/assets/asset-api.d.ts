import { B256Address } from "@fuel-ts/address";
import { NetworkEthereum, NetworkFuel } from "./types";
declare const networks: {
    readonly mainnet: "https://mainnet-explorer.fuel.network";
    readonly testnet: "https://explorer-indexer-testnet.fuel.network";
};
export interface AssetPaginationOptions {
    last: number;
}
export interface AssetPageInfo {
    count: number;
}
export interface AssetInfo {
    assetId: string;
    contractId?: string;
    subId?: string;
    name: string;
    symbol: string;
    decimals: number;
    suspicious: boolean;
    verified: boolean;
    totalSupply?: string;
    networks?: (NetworkEthereum | NetworkFuel)[];
    rate?: number;
    icon?: string;
    owner?: string;
    amount?: string;
    amountInUsd?: string;
    uri?: string;
    metadata: Record<string, string>;
    collection?: string;
    isNFT?: boolean;
}
/**
 * Get information about any asset (including NFTs)
 *
 * @param opts - The options for the request
 * @param opts.network {'mainnet' | 'testnet'} - The network to use (default: `mainnet`)
 * @param opts.assetId {string} - The ID of the asset to get information about
 * @returns {Promise<AssetInfo>} - The information about the asset
 *
 * @see {@link https://github.com/FuelLabs/fuel-explorer/wiki/Assets-API#instructions-for-consuming-assets-data-from-indexer-api}
 */
export declare const getAssetById: (opts: {
    assetId: B256Address;
    network?: keyof typeof networks;
}) => Promise<AssetInfo | null>;
export interface AssetsByOwner {
    data: AssetInfo[];
    pageInfo: AssetPageInfo;
}
/**
 * Get assets by owner
 *
 * @param opts - The options for the request
 * @param opts.owner {B256Address} - The owner of the assets
 * @param opts.network {'mainnet' | 'testnet'} - The network to use (default: `mainnet`)
 * @param opts.pagination {AssetPaginationOptions} - The pagination options (default: 10)
 * @returns {Promise<AssetsByOwnerResponse>} - The assets by owner
 *
 * @see {@link https://github.com/FuelLabs/fuel-explorer/wiki/Assets-API#instructions-for-consuming-assets-data-owned-by-an-account-from-indexer-api}
 */
export declare const getAssetsByOwner: (opts: {
    owner: B256Address;
    network?: keyof typeof networks;
    pagination?: AssetPaginationOptions;
}) => Promise<AssetsByOwner>;
export {};
//# sourceMappingURL=asset-api.d.ts.map