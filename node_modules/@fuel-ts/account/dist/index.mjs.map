{"version":3,"sources":["../src/providers/chains.ts","../src/assets/utils/network.ts","../src/assets/utils/url.ts","../src/assets/utils/resolveIconPaths.ts","../src/assets/utils/fuelAssetsBaseUrl.ts","../src/assets/assets.ts","../src/assets/asset-api.ts","../src/account.ts","../src/providers/coin-quantity.ts","../src/providers/provider.ts","../src/providers/__generated__/operations.ts","../src/providers/assemble-tx-helpers.ts","../src/providers/fuel-graphql-subscriber.ts","../src/providers/utils/handle-gql-error-message.ts","../src/providers/resource-cache.ts","../src/providers/transaction-request/input.ts","../src/providers/transaction-request/output.ts","../src/providers/transaction-request/transaction-request.ts","../src/providers/message.ts","../src/providers/resource.ts","../src/providers/utils/receipts.ts","../src/providers/utils/serialization.ts","../src/providers/utils/block-explorer.ts","../src/providers/utils/gas.ts","../src/providers/utils/json.ts","../src/providers/utils/extract-tx-error.ts","../src/providers/utils/merge-quantities.ts","../src/providers/transaction-request/errors.ts","../src/providers/transaction-request/helpers.ts","../src/providers/transaction-request/witness.ts","../src/providers/transaction-request/blob-transaction-request.ts","../src/providers/transaction-request/hash-transaction.ts","../src/providers/transaction-request/create-transaction-request.ts","../src/providers/transaction-request/storage-slot.ts","../src/providers/transaction-request/script-transaction-request.ts","../src/providers/transaction-request/scripts.ts","../src/providers/transaction-request/upgrade-transaction-request.ts","../src/providers/transaction-request/upload-transaction-request.ts","../src/providers/transaction-request/types.ts","../src/providers/transaction-request/utils.ts","../src/providers/transaction-response/transaction-response.ts","../src/providers/transaction-summary/assemble-transaction-summary.ts","../src/providers/transaction-summary/calculate-tx-fee-for-summary.ts","../src/providers/transaction-summary/operations.ts","../src/providers/transaction-summary/input.ts","../src/providers/transaction-summary/output.ts","../src/providers/transaction-summary/types.ts","../src/providers/transaction-summary/receipt.ts","../src/providers/transaction-summary/status.ts","../src/providers/transaction-response/getAllDecodedLogs.ts","../src/providers/transaction-response/getDecodedLogs.ts","../src/providers/utils/auto-retry-fetch.ts","../src/providers/utils/parse-graphql-response.ts","../src/providers/utils/validate-pagination-args.ts","../src/providers/transaction-summary/get-transaction-summary.ts","../src/providers/transaction-summary/assemble-transaction-summary-from-serialized.ts","../src/providers/utils/transaction-response-serialization.ts","../src/types.ts","../src/utils/formatTransferToContractScriptData.ts","../src/utils/split-coins-into-batches.ts","../src/wallet/base-wallet-unlocked.ts","../src/signer/signer.ts","../src/wallet/keystore-wallet.ts","../src/hdwallet/hdwallet.ts","../src/mnemonic/mnemonic.ts","../src/wordlists/words/english.ts","../src/wordlists/index.ts","../src/mnemonic/utils.ts","../src/wallet/wallets.ts","../src/wallet/wallet.ts","../src/wallet-manager/wallet-manager.ts","../src/wallet-manager/storages/memory-storage.ts","../src/wallet-manager/vaults/mnemonic-vault.ts","../src/wallet-manager/vaults/privatekey-vault.ts","../src/wallet-manager/types.ts","../src/predicate/predicate.ts","../src/utils/deployScriptOrPredicate.ts","../src/utils/predicate-script-loader-instructions.ts","../src/predicate/utils/getPredicateRoot.ts","../src/connectors/fuel.ts","../src/connectors/fuel-connector.ts","../src/connectors/types/connector-types.ts","../src/connectors/types/local-storage.ts","../src/connectors/utils/cache.ts","../src/connectors/utils/dispatch-fuel-connector-event.ts","../src/connectors/utils/promises.ts"],"sourcesContent":["export const CHAIN_IDS = {\n  eth: {\n    mainnet: 1,\n    sepolia: 11155111,\n    foundry: 31337,\n  },\n  fuel: {\n    devnet: 0,\n    testnet: 0,\n    mainnet: 9889,\n  },\n};\n","import { CHAIN_IDS } from '../../providers/chains';\nimport type { Asset, AssetEth, AssetFuel, NetworkEthereum, NetworkFuel } from '../types';\n\ntype Network = NetworkEthereum | NetworkFuel;\nexport type NetworkTypes = NetworkEthereum['type'] | NetworkFuel['type'];\ntype NetworkTypeToNetwork<T> = T extends 'ethereum'\n  ? NetworkEthereum\n  : T extends 'fuel'\n    ? NetworkFuel\n    : Network;\n\n/**\n * Returns the default chainId for the given network\n */\nexport const getDefaultChainId = (networkType: NetworkTypes): number | undefined => {\n  if (networkType === 'ethereum') {\n    return CHAIN_IDS.eth.sepolia;\n  }\n  if (networkType === 'fuel') {\n    return CHAIN_IDS.fuel.testnet;\n  }\n\n  return undefined;\n};\n\nexport type GetAssetNetworkParams<T extends NetworkTypes | undefined> = {\n  asset: Asset;\n  chainId?: number;\n  networkType: T;\n};\n\n/**\n * Returns the asset's network on the given network\n * eg. getAssetNetwork({ asset, chainId: 1, networkType: 'ethereum' }) will return the asset's details on Ethereum mainnet\n */\nexport const getAssetNetwork = <T extends NetworkTypes | undefined>({\n  asset,\n  chainId,\n  networkType,\n}: GetAssetNetworkParams<T>): NetworkTypeToNetwork<T> => {\n  const network = asset.networks.find(\n    (item) => item.chainId === chainId && item.type === networkType\n  ) as NetworkTypeToNetwork<T>;\n\n  return network;\n};\n\n/**\n * Returns the asset's details on the given network along with the asset itself\n * eg. getAssetWithNetwork({ asset, chainId: 1, networkType: 'ethereum' }) will return the asset's details on Ethereum mainnet and the asset itself\n */\nexport const getAssetWithNetwork = <T extends NetworkTypes>({\n  asset,\n  chainId,\n  networkType,\n}: GetAssetNetworkParams<T>): AssetEth | AssetFuel | undefined => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { networks: _, ...assetRest } = asset;\n\n  const chainIdToUse = chainId ?? getDefaultChainId(networkType);\n  // use two equals(==) cuz we wan't to keep 0 as a valid chainId\n  if (chainIdToUse === undefined) {\n    return undefined;\n  }\n\n  const assetNetwork = getAssetNetwork({\n    asset,\n    chainId: chainIdToUse,\n    networkType,\n  });\n\n  if (!assetNetwork) {\n    return undefined;\n  }\n\n  return {\n    ...assetRest,\n    ...assetNetwork,\n  };\n};\n\n/**\n * Returns the asset's details on Ethereum\n */\nexport const getAssetEth = (asset: Asset, chainId?: number): AssetEth | undefined =>\n  getAssetWithNetwork({\n    asset,\n    networkType: 'ethereum',\n    chainId,\n  }) as AssetEth;\n\n/**\n * Returns the asset's details on Fuel\n */\nexport const getAssetFuel = (asset: Asset, chainId?: number): AssetFuel | undefined =>\n  getAssetWithNetwork({\n    asset,\n    networkType: 'fuel',\n    chainId,\n  }) as AssetFuel;\n","const DELIMITER_PATH = '/';\nconst trimRegex = /^\\/|\\/$/g;\nconst trimPath = (path = '') => path.replace(trimRegex, '');\n\nexport function urlJoin(baseUrl: string | undefined, ...paths: Array<string>): string {\n  const hasBaseUrl = baseUrl !== null && baseUrl !== undefined;\n  const rootPath = baseUrl?.[0] === '/' && baseUrl.length > 1;\n  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);\n  if (rootPath && hasBaseUrl) {\n    allPaths.unshift('');\n  }\n  return allPaths.join(DELIMITER_PATH);\n}\n","import type { Assets } from '../types';\n\nimport { urlJoin } from './url';\n\n/**\n * Returns the list of assets with the icon paths 'resolved'. eg. `./eth.svg` -> `https://some-url.com/eth.svg`\n * @param assets - List of assets\n * @param basePath - Base path for the icon URLs (default: './')\n * @returns The assets with the icon paths resolved\n */\nexport function resolveIconPaths(assets: Assets, basePath: string = './') {\n  return assets.map((asset) => ({\n    ...asset,\n    icon: urlJoin(basePath, asset.icon),\n  }));\n}\n","export const fuelAssetsBaseUrl = 'https://assets.fuel.network/providers/'\n","import { CHAIN_IDS } from '../providers/chains';\n\nimport type { Assets } from './types';\nimport { resolveIconPaths, fuelAssetsBaseUrl } from './utils';\n\nexport const rawAssets: Assets = [\n  {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    icon: 'eth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.sepolia,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.foundry,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.devnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.testnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      },\n    ],\n  },\n  {\n    name: 'WETH',\n    symbol: 'WETH',\n    icon: 'weth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'weETH',\n    symbol: 'weETH',\n    icon: 'weETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rsETH',\n    symbol: 'rsETH',\n    icon: 'rsETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rETH',\n    symbol: 'rETH',\n    icon: 'reth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xae78736cd615f374d3085123a210448e74fc6393',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'wbETH',\n    symbol: 'wbETH',\n    icon: 'wbeth.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xa2E3356610840701BDf5611a53974510Ae27E2e1',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rstETH',\n    symbol: 'rstETH',\n    icon: 'rstETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7a4EffD87C2f3C55CA251080b1343b605f327E3a',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'amphrETH',\n    symbol: 'amphrETH',\n    icon: 'amphrETH.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x5fD13359Ba15A84B76f7F87568309040176167cd',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mBTC',\n    symbol: 'Manta mBTC',\n    icon: 'manta-mbtc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x4041381e947CFD3D483d67a25C6aa9Dc924250c5',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mETH',\n    symbol: 'Manta mETH',\n    icon: 'manta-meth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x8CdF550C04Bc9B9F10938368349C9c8051A772b6',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mUSD',\n    symbol: 'Manta mUSD',\n    icon: 'manta-musd.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x3f24E1d7a973867fC2A03fE199E5502514E0e11E',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'pumpBTC',\n    symbol: 'pumpBTC',\n    icon: 'pumpbtc.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xf469fbd2abcd6b9de8e169d128226c0fc90a012e',\n        decimals: 8,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f',\n        decimals: 8,\n      },\n    ],\n  },\n  {\n    name: 'FBTC',\n    symbol: 'FBTC',\n    icon: 'fbtc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xc96de26018a54d51c097160568752c4e3bd6c364',\n        decimals: 8,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a',\n        decimals: 8,\n      },\n    ],\n  },\n  {\n    name: 'SolvBTC',\n    symbol: 'SolvBTC',\n    icon: 'solvBTC.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7a56e1c57c7475ccf742a1832b028f0456652f97',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'SolvBTC.BBN',\n    symbol: 'SolvBTC.BBN',\n    icon: 'SolvBTC.BBN.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xd9d920aa40f578ab794426f5c90f6c731d159def',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Mantle mETH',\n    symbol: 'Mantle mETH',\n    icon: 'mantle-meth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'sDAI',\n    symbol: 'sDAI',\n    icon: 'sdai.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x83f20f44975d03b1b09e64809b757c47f942beea',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'USDT',\n    symbol: 'USDT',\n    icon: 'usdt.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        decimals: 6,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e',\n        decimals: 6,\n      },\n    ],\n  },\n  {\n    name: 'USDC',\n    symbol: 'USDC',\n    icon: 'usdc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        decimals: 6,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b',\n        decimals: 6,\n      },\n    ],\n  },\n  {\n    name: 'USDe',\n    symbol: 'USDe',\n    icon: 'USDe.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x4c9edd5852cd905f086c759e8383e09bff1e68b3',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'sUSDe',\n    symbol: 'sUSDe',\n    icon: 'sUSDe.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x9d39a5de30e57443bff2a8307a4256c8797a3497',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rsUSDe',\n    symbol: 'rsUSDe',\n    icon: 'rsUSDe.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'wstETH',\n    symbol: 'wstETH',\n    icon: 'wsteth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'ezETH',\n    symbol: 'ezETH',\n    icon: 'ezeth.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xbf5495Efe5DB9ce00f80364C8B423567e58d2110',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'pzETH',\n    symbol: 'pzETH',\n    icon: 'pzETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Re7LRT',\n    symbol: 'Re7LRT',\n    icon: 'Re7LRT.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'steakLRT',\n    symbol: 'steakLRT',\n    icon: 'steakLRT.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId: '0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30',\n        decimals: 9,\n      },\n    ],\n  },\n];\n\nexport const assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);\n","import { B256Address } from \"@fuel-ts/address\";\nimport { NetworkEthereum, NetworkFuel } from \"./types\";\n\nconst networks = {\n  mainnet: 'https://mainnet-explorer.fuel.network',\n  testnet: 'https://explorer-indexer-testnet.fuel.network',\n} as const;\n\nexport interface AssetPaginationOptions {\n  last: number;\n}\n\nexport interface AssetPageInfo {\n  count: number;\n}\n\nconst request = async <TResponse>(url: string, slug: string): Promise<TResponse | null> => {\n  const response = await fetch(`${url}${slug}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    }\n  });\n\n  try {\n    return await response.json() satisfies TResponse;\n  } catch (error) {\n    // The API returns a 200 status code but the response is not valid JSON\n    return null;\n  }\n};\n\nconst buildQueryString = (parameters: Record<string, string | { toString: () => string }>) => {\n  const query = new URLSearchParams();\n  Object.entries(parameters).forEach(([key, value]) => {\n    query.set(key, value.toString());\n  });\n  return query.size > 0 ? `?${query.toString()}` : '';\n};\n\nexport interface AssetInfo {\n  assetId: string;\n  contractId?: string;\n  subId?: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n  suspicious: boolean;\n  verified: boolean;\n  totalSupply?: string;\n  networks?: (NetworkEthereum | NetworkFuel)[];\n  rate?: number;\n  icon?: string;\n  owner?: string;\n  amount?: string;\n  amountInUsd?: string;\n  uri?: string;\n  metadata: Record<string, string>;\n  collection?: string;\n  isNFT?: boolean;\n}\n\n/**\n * Get information about any asset (including NFTs)\n *\n * @param opts - The options for the request\n * @param opts.network {'mainnet' | 'testnet'} - The network to use (default: `mainnet`)\n * @param opts.assetId {string} - The ID of the asset to get information about\n * @returns {Promise<AssetInfo>} - The information about the asset\n *\n * @see {@link https://github.com/FuelLabs/fuel-explorer/wiki/Assets-API#instructions-for-consuming-assets-data-from-indexer-api}\n */\nexport const getAssetById = (opts: {\n  assetId: B256Address;\n  network?: keyof typeof networks;\n}): Promise<AssetInfo | null> => {\n  const { network = 'mainnet', assetId } = opts;\n  const url = networks[network];\n  return request<AssetInfo>(url, `/assets/${assetId}`);\n};\n\nexport interface AssetsByOwner {\n  data: AssetInfo[];\n  pageInfo: AssetPageInfo;\n}\n\n/**\n * Get assets by owner\n *\n * @param opts - The options for the request\n * @param opts.owner {B256Address} - The owner of the assets\n * @param opts.network {'mainnet' | 'testnet'} - The network to use (default: `mainnet`)\n * @param opts.pagination {AssetPaginationOptions} - The pagination options (default: 10)\n * @returns {Promise<AssetsByOwnerResponse>} - The assets by owner\n *\n * @see {@link https://github.com/FuelLabs/fuel-explorer/wiki/Assets-API#instructions-for-consuming-assets-data-owned-by-an-account-from-indexer-api}\n */\nexport const getAssetsByOwner = async (opts: {\n  owner: B256Address;\n  network?: keyof typeof networks;\n  pagination?: AssetPaginationOptions;\n}): Promise<AssetsByOwner> => {\n  const { network = 'mainnet', owner, pagination = { last: 10 } } = opts;\n  const url = networks[network];\n  const { last } = pagination;\n  const queryString = buildQueryString({ last });\n  const response = await request<AssetsByOwner>(url, `/accounts/${owner}/assets${queryString}`);\n\n  // If the response is not valid JSON, return an empty array\n  if (!response) {\n    return { data: [], pageInfo: { count: 0 } };\n  }\n\n  return response;\n};","/* eslint-disable no-param-reassign */\nimport { UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport type { AddressInput, WithAddress } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { HashableMessage } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { InputType, OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, isDefined } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { FuelConnector, FuelConnectorSendTxParams } from './connectors';\nimport type {\n  TransactionRequest,\n  CoinQuantityLike,\n  CoinQuantity,\n  Resource,\n  ResourcesIdsToIgnore,\n  Provider,\n  ScriptTransactionRequestLike,\n  TransactionCost,\n  EstimateTransactionParams,\n  CursorPaginationArgs,\n  TransactionRequestLike,\n  CallResult,\n  GetCoinsResponse,\n  GetMessagesResponse,\n  GetBalancesResponse,\n  Coin,\n  TransactionCostParams,\n  ProviderSendTxParams,\n  TransactionSummaryJson,\n  TransactionResult,\n  TransactionType,\n  TransactionResponse,\n} from './providers';\nimport {\n  withdrawScript,\n  ScriptTransactionRequest,\n  transactionRequestify,\n  addAmountToCoinQuantities,\n  calculateGasFee,\n  setAndValidateGasAndFeeForAssembledTx,\n} from './providers';\nimport {\n  cacheRequestInputsResourcesFromOwner,\n  getAssetAmountInRequestInputs,\n  isRequestInputCoin,\n  isRequestInputMessageWithoutData,\n  isRequestInputResource,\n} from './providers/transaction-request/helpers';\nimport { mergeQuantities } from './providers/utils/merge-quantities';\nimport { serializeProviderCache } from './providers/utils/serialization';\nimport { AbstractAccount } from './types';\nimport { assembleTransferToContractScript } from './utils/formatTransferToContractScriptData';\nimport { splitCoinsIntoBatches } from './utils/split-coins-into-batches';\n\nexport type TxParamsType = Pick<\n  ScriptTransactionRequestLike,\n  'gasLimit' | 'tip' | 'maturity' | 'maxFee' | 'witnessLimit' | 'expiration'\n>;\n\nexport type TransferParams = {\n  destination: string | Address;\n  amount: BigNumberish;\n  assetId: BytesLike;\n};\n\nexport type ContractTransferParams = {\n  contractId: string | Address;\n  amount: BigNumberish;\n  assetId: BytesLike;\n};\n\nexport type AccountSendTxParams = ProviderSendTxParams & FuelConnectorSendTxParams;\n\nexport type EstimatedTxParams = Pick<\n  TransactionCost,\n  | 'estimatedPredicates'\n  | 'addedSignatures'\n  | 'requiredQuantities'\n  | 'updateMaxFee'\n  | 'gasPrice'\n  | 'transactionSummary'\n>;\n\nexport type SubmitAllMode = 'sequential' | 'parallel';\n\nexport type PrepareSubmitAllParams = {\n  txs: ScriptTransactionRequest[];\n  mode?: SubmitAllMode;\n};\n\nexport type SubmitAllCallbackResponse = {\n  txResponses: TransactionResult<TransactionType.Script>[];\n  errors: FuelError[];\n};\n\nexport type SubmitAllCallback = () => Promise<SubmitAllCallbackResponse>;\n\nexport type AssembleConsolidationTxsParams = {\n  coins: Coin[];\n  mode?: SubmitAllMode;\n  outputNum?: number;\n};\n\nexport type ConsolidateCoins = {\n  assetId: string;\n  mode?: SubmitAllMode;\n  outputNum?: number;\n};\n\nconst MAX_FUNDING_ATTEMPTS = 5;\n\nexport type FakeResources = Partial<Coin> & Required<Pick<Coin, 'amount' | 'assetId'>>;\n\n/**\n * `Account` provides an abstraction for interacting with accounts or wallets on the network.\n */\nexport class Account extends AbstractAccount implements WithAddress {\n  /**\n   * The address associated with the account.\n   */\n  readonly address: Address;\n\n  /**\n   * The provider used to interact with the network.\n   */\n  protected _provider?: Provider;\n\n  /**\n   * The connector for use with external wallets\n   */\n  protected _connector?: FuelConnector;\n\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - A Provider instance  (optional).\n   * @param connector - A FuelConnector instance (optional).\n   */\n  constructor(address: AddressInput, provider?: Provider, connector?: FuelConnector) {\n    super();\n    this._provider = provider;\n    this._connector = connector;\n    this.address = new Address(address);\n  }\n\n  /**\n   * The provider used to interact with the network.\n   *\n   * @returns A Provider instance.\n   *\n   * @throws `FuelError` if the provider is not set.\n   */\n  get provider(): Provider {\n    if (!this._provider) {\n      throw new FuelError(ErrorCode.MISSING_PROVIDER, 'Provider not set');\n    }\n\n    return this._provider;\n  }\n\n  /**\n   * Sets the provider for the account.\n   *\n   * @param provider - A Provider instance.\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - A Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider: Provider): Provider {\n    this._provider = provider;\n    return this.provider;\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - Quantities of resources to be obtained.\n   * @param resourcesIdsToIgnore - IDs of resources to be excluded from the query (optional).\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(\n    quantities: CoinQuantityLike[],\n    resourcesIdsToIgnore?: ResourcesIdsToIgnore\n  ): Promise<Resource[]> {\n    return this.provider.getResourcesToSpend(this.address, quantities, resourcesIdsToIgnore);\n  }\n\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve (optional).\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(\n    assetId?: BytesLike,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetCoinsResponse> {\n    return this.provider.getCoins(this.address, assetId, paginationArgs);\n  }\n\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(paginationArgs?: CursorPaginationArgs): Promise<GetMessagesResponse> {\n    return this.provider.getMessages(this.address, paginationArgs);\n  }\n\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for (optional).\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId?: BytesLike): Promise<BN> {\n    const assetIdToFetch = assetId ?? (await this.provider.getBaseAssetId());\n    const amount = await this.provider.getBalance(this.address, assetIdToFetch);\n    return amount;\n  }\n\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances(): Promise<GetBalancesResponse> {\n    return this.provider.getBalances(this.address);\n  }\n\n  /**\n   * Funds a transaction request by adding the necessary resources.\n   *\n   * @typeParam T - The type of the TransactionRequest.\n   * @param request - The transaction request to fund.\n   * @param params - The estimated transaction parameters.\n   * @returns A promise that resolves to the funded transaction request.\n   *\n   * @deprecated Use provider.assembleTx instead\n   * Check the migration guide https://docs.fuel.network/guide/assembling-transactions/migration-guide.html for more information.\n   */\n  async fund<T extends TransactionRequest>(request: T, params: EstimatedTxParams): Promise<T> {\n    const {\n      addedSignatures,\n      estimatedPredicates,\n      requiredQuantities,\n      updateMaxFee,\n      gasPrice,\n      transactionSummary,\n    } = params;\n\n    const chainId = await this.provider.getChainId();\n\n    const fee = request.maxFee;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const requiredInBaseAsset =\n      requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)?.amount || bn(0);\n\n    const requiredQuantitiesWithFee = addAmountToCoinQuantities({\n      amount: bn(fee),\n      assetId: baseAssetId,\n      coinQuantities: requiredQuantities,\n    });\n\n    const quantitiesDict: Record<string, { required: BN; owned: BN }> = {};\n\n    requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {\n      quantitiesDict[assetId] = {\n        required: amount,\n        owned: bn(0),\n      };\n    });\n\n    request.inputs.filter(isRequestInputResource).forEach((input) => {\n      const isCoin = isRequestInputCoin(input);\n      const assetId = isCoin ? String(input.assetId) : baseAssetId;\n      if (quantitiesDict[assetId]) {\n        quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);\n      }\n    });\n\n    let missingQuantities: CoinQuantity[] = [];\n    Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {\n      if (owned.lt(required)) {\n        missingQuantities.push({\n          assetId,\n          amount: required.sub(owned),\n        });\n      }\n    });\n\n    let needsToBeFunded = missingQuantities.length > 0;\n    let fundingAttempts = 0;\n    while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {\n      const resources = await this.getResourcesToSpend(\n        missingQuantities,\n        cacheRequestInputsResourcesFromOwner(request.inputs, this.address)\n      );\n\n      request.addResources(resources);\n      request.updatePredicateGasUsed(estimatedPredicates);\n\n      const requestToReestimate = clone(request);\n      if (addedSignatures) {\n        Array.from({ length: addedSignatures }).forEach(() =>\n          requestToReestimate.addEmptyWitness()\n        );\n      }\n\n      if (!updateMaxFee) {\n        needsToBeFunded = false;\n        break;\n      }\n\n      // Recalculate the fee after adding the resources\n      const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({\n        transactionRequest: requestToReestimate,\n        gasPrice,\n      });\n\n      const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(\n        request.inputs.filter(isRequestInputResource),\n        baseAssetId,\n        baseAssetId\n      );\n\n      // Update the new total as the fee will change after adding new resources\n      const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);\n\n      if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {\n        needsToBeFunded = false;\n      } else {\n        missingQuantities = [\n          {\n            amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),\n            assetId: baseAssetId,\n          },\n        ];\n      }\n\n      fundingAttempts += 1;\n    }\n\n    // If the transaction still needs to be funded after the maximum number of attempts\n    if (needsToBeFunded) {\n      throw new FuelError(\n        ErrorCode.INSUFFICIENT_FUNDS_OR_MAX_COINS,\n        `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`\n      );\n    }\n\n    request.updateState(chainId, 'funded', transactionSummary);\n\n    await this.provider.validateTransaction(request);\n\n    request.updatePredicateGasUsed(estimatedPredicates);\n\n    const requestToReestimate = clone(request);\n    if (addedSignatures) {\n      Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());\n    }\n\n    if (!updateMaxFee) {\n      return request;\n    }\n\n    const { maxFee } = await this.provider.estimateTxGasAndFee({\n      transactionRequest: requestToReestimate,\n      gasPrice,\n    });\n\n    request.maxFee = maxFee;\n\n    return request;\n  }\n\n  /**\n   * A helper that creates a transfer transaction request and returns it.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the prepared transaction request.\n   */\n  async createTransfer(\n    destination: string | Address,\n    amount: BigNumberish,\n    assetId?: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<ScriptTransactionRequest> {\n    let request = new ScriptTransactionRequest(txParams);\n\n    request = this.addTransfer(request, {\n      destination,\n      amount,\n      assetId: assetId || (await this.provider.getBaseAssetId()),\n    });\n\n    const { gasPrice, transactionRequest } = await this.assembleTx(request);\n\n    request = await setAndValidateGasAndFeeForAssembledTx({\n      gasPrice,\n      provider: this.provider,\n      transactionRequest,\n      setGasLimit: txParams?.gasLimit,\n      setMaxFee: txParams?.maxFee,\n    });\n\n    return request;\n  }\n\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(\n    destination: string | Address,\n    amount: BigNumberish,\n    assetId?: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const request = await this.createTransfer(destination, amount, assetId, txParams);\n    return this.sendTransaction(request, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Transfers multiple amounts of a token to multiple recipients.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @param txParams - Optional transaction parameters.\n   * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.\n   */\n  async batchTransfer(\n    transferParams: TransferParams[],\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    let request = new ScriptTransactionRequest(txParams);\n    request = this.addBatchTransfer(request, transferParams);\n\n    const { gasPrice, transactionRequest } = await this.assembleTx(request);\n\n    request = await setAndValidateGasAndFeeForAssembledTx({\n      gasPrice,\n      provider: this.provider,\n      transactionRequest,\n      setGasLimit: txParams?.gasLimit,\n      setMaxFee: txParams?.maxFee,\n    });\n    return this.sendTransaction(request, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Adds a transfer to the given transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The updated transaction request with the added transfer.\n   */\n  addTransfer(request: ScriptTransactionRequest, transferParams: TransferParams) {\n    const { destination, amount, assetId } = transferParams;\n    this.validateTransferAmount(amount);\n    request.addCoinOutput(new Address(destination), amount, assetId);\n    return request;\n  }\n\n  /**\n   * Adds multiple transfers to a script transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The updated script transaction request.\n   */\n  addBatchTransfer(request: ScriptTransactionRequest, transferParams: TransferParams[]) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.addTransfer(request, {\n        destination,\n        amount,\n        assetId,\n      });\n    });\n    return request;\n  }\n\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(\n    contractId: string | Address,\n    amount: BigNumberish,\n    assetId: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);\n  }\n\n  async batchTransferToContracts(\n    contractTransferParams: ContractTransferParams[],\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    let request = new ScriptTransactionRequest({\n      ...txParams,\n    });\n\n    const quantities: CoinQuantity[] = [];\n\n    const defaultAssetId = await this.provider.getBaseAssetId();\n\n    const transferParams = contractTransferParams.map((transferParam) => {\n      const amount = bn(transferParam.amount);\n      const contractAddress = new Address(transferParam.contractId);\n\n      const assetId = transferParam.assetId ? hexlify(transferParam.assetId) : defaultAssetId;\n\n      if (amount.lte(0)) {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSFER_AMOUNT,\n          'Transfer amount must be a positive number.'\n        );\n      }\n\n      request.addContractInputAndOutput(contractAddress);\n      quantities.push({ amount, assetId });\n\n      return {\n        amount,\n        contractId: contractAddress.toB256(),\n        assetId,\n      };\n    });\n\n    const { script, scriptData } = await assembleTransferToContractScript(transferParams);\n\n    request.script = script;\n    request.scriptData = scriptData;\n\n    const { gasPrice, transactionRequest } = await this.assembleTx(request, quantities);\n\n    request = await setAndValidateGasAndFeeForAssembledTx({\n      gasPrice,\n      provider: this.provider,\n      transactionRequest,\n      setGasLimit: txParams?.gasLimit,\n      setMaxFee: txParams?.maxFee,\n    });\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(\n    recipient: AddressInput,\n    amount: BigNumberish,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const recipientAddress = new Address(recipient);\n    // add recipient and amount to the transaction script code\n    const recipientDataArray = arrayify(\n      '0x'.concat(recipientAddress.toHexString().substring(2).padStart(64, '0'))\n    );\n    const amountDataArray = arrayify(\n      '0x'.concat(bn(amount).toHex().substring(2).padStart(16, '0'))\n    );\n    const script = new Uint8Array([\n      ...arrayify(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray,\n    ]);\n\n    const params: ScriptTransactionRequestLike = { script, ...txParams };\n\n    const baseAssetId = await this.provider.getBaseAssetId();\n    let request = new ScriptTransactionRequest(params);\n    const quantities = [{ amount: bn(amount), assetId: baseAssetId }];\n\n    const { gasPrice, transactionRequest } = await this.assembleTx(request, quantities);\n\n    request = await setAndValidateGasAndFeeForAssembledTx({\n      gasPrice,\n      provider: this.provider,\n      transactionRequest,\n      setGasLimit: txParams?.gasLimit,\n      setMaxFee: txParams?.maxFee,\n    });\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Consolidates base asset UTXOs into fewer, larger ones.\n   *\n   * Retrieves a limited number of base asset coins (as defined by `Provider.RESOURCES_PAGE_SIZE_LIMIT`),\n   * assembles consolidation transactions, and submits them to the network.\n   *\n   * Note: This method currently supports only the base asset.\n   *\n   * @param params - The parameters for coin consolidation, including the asset ID, mode, and output number.\n   * @returns A promise that resolves to the response of the submitted transactions.\n   * @throws Will throw an error if the asset is not a base asset as non-base asset consolidation is not implemented.\n   */\n  async consolidateCoins(params: ConsolidateCoins): Promise<SubmitAllCallbackResponse> {\n    const { assetId } = params;\n\n    const { coins } = await this.getCoins(assetId);\n\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const isBaseAsset = baseAssetId === assetId;\n\n    let submitAll: SubmitAllCallback;\n    const consolidationParams: AssembleConsolidationTxsParams = {\n      coins,\n      mode: params.mode,\n      outputNum: params.outputNum,\n    };\n\n    if (isBaseAsset) {\n      ({ submitAll } = await this.assembleBaseAssetConsolidationTxs(consolidationParams));\n    } else {\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_FEATURE,\n        'Consolidation for non-base assets is not supported yet.'\n      );\n    }\n\n    return submitAll();\n  }\n\n  /**\n   * Assembles transactions for consolidating base asset coins into fewer UTXOs.\n   *\n   * This method splits the provided coins into batches and creates transaction requests\n   * to consolidate them. It calculates the necessary fee and sets up the transactions\n   * to be submitted either in parallel (default) or sequentially.\n   *\n   * @param params - The parameters for assembling base asset consolidation transactions.\n   *\n   * @returns An object containing the assembled transactions, the total fee cost, and a callback to submit all transactions.\n   */\n  async assembleBaseAssetConsolidationTxs(params: AssembleConsolidationTxsParams) {\n    const { coins, mode = 'parallel', outputNum = 1 } = params;\n\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    this.validateConsolidationTxsCoins(coins, baseAssetId);\n\n    const chainInfo = await this.provider.getChain();\n    const maxInputsNumber = chainInfo.consensusParameters.txParameters.maxInputs.toNumber();\n\n    let totalFeeCost = bn(0);\n    const txs: ScriptTransactionRequest[] = [];\n    const coinsBatches = splitCoinsIntoBatches(coins, maxInputsNumber);\n    const gasPrice = await this.provider.estimateGasPrice(10);\n    const consolidateMoreThanOneCoin = outputNum > 1;\n\n    coinsBatches\n      // Skip batches with just one Coin to avoid consolidate just one coin\n      .filter((batch) => batch.length > 1)\n      .forEach((coinBatch) => {\n        const request = new ScriptTransactionRequest({\n          script: '0x',\n        });\n\n        request.addResources(coinBatch);\n\n        if (consolidateMoreThanOneCoin) {\n          // We decrease one because the change output will also create one UTXO\n          Array.from({ length: outputNum - 1 }).forEach(() => {\n            // Real value will be added later after having fee calculated\n            request.addCoinOutput(this.address, 0, baseAssetId);\n          });\n        }\n\n        const minGas = request.calculateMinGas(chainInfo);\n\n        const fee = calculateGasFee({\n          gasPrice,\n          gas: minGas,\n          priceFactor: chainInfo.consensusParameters.feeParameters.gasPriceFactor,\n          tip: request.tip,\n        });\n\n        request.maxFee = fee;\n\n        if (consolidateMoreThanOneCoin) {\n          const total = request.inputs\n            .filter(isRequestInputCoin)\n            .reduce((acc, input) => acc.add(input.amount), bn(0));\n\n          // We add a +1 as the change output will also include one part of the total amount\n          const amountPerNewUtxo = total.div(outputNum + 1);\n\n          request.outputs.forEach((output) => {\n            if (output.type === OutputType.Coin) {\n              output.amount = amountPerNewUtxo;\n            }\n          });\n        }\n\n        totalFeeCost = totalFeeCost.add(fee);\n\n        txs.push(request);\n      });\n\n    const submitAll = this.prepareSubmitAll({ txs, mode });\n\n    return { txs, totalFeeCost, submitAll };\n  }\n\n  /**\n   * Prepares a function to submit all transactions either sequentially or in parallel.\n   *\n   * @param params - The parameters for preparing the submitAll callback.\n   *\n   * @returns A callback that, when called, submits all transactions and returns their results and any errors encountered.\n   */\n  prepareSubmitAll = (params: PrepareSubmitAllParams): SubmitAllCallback => {\n    // Default to 'sequential' if mode is not provided\n    const { txs, mode = 'sequential' } = params;\n\n    return async () => {\n      const txResponses: TransactionResult<TransactionType.Script>[] = [];\n      const errors: FuelError[] = [];\n\n      if (mode === 'sequential') {\n        // Sequential execution\n        for (const tx of txs) {\n          try {\n            const submit = await this.sendTransaction(tx);\n            const response = await submit.waitForResult<TransactionType.Script>();\n            txResponses.push(response);\n          } catch (error) {\n            errors.push(error as FuelError);\n          }\n        }\n      } else {\n        // Parallel execution\n        const results = await Promise.allSettled(\n          txs.map(async (tx) => {\n            // Chain the transaction sending and result waiting\n            const submit = await this.sendTransaction(tx);\n            return submit.waitForResult<TransactionType.Script>();\n          })\n        );\n\n        // Process results from Promise.allSettled\n        results.forEach((result) => {\n          if (result.status === 'fulfilled') {\n            txResponses.push(result.value);\n          } else {\n            // Ensure the rejected reason is treated as FuelError\n            errors.push(result.reason as FuelError);\n          }\n        });\n      }\n\n      return { txResponses, errors };\n    };\n  };\n\n  /**\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   *\n   * @deprecated Use provider.assembleTx instead\n   * Check the migration guide https://docs.fuel.network/guide/assembling-transactions/migration-guide.html for more information.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    { signatureCallback, quantities = [], gasPrice }: TransactionCostParams = {}\n  ): Promise<TransactionCost> {\n    const txRequestClone = clone(transactionRequestify(transactionRequestLike));\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    // Fund with fake UTXOs to avoid not enough funds error\n    // Getting coin quantities from amounts being transferred\n    const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();\n    // Combining coin quantities from amounts being transferred and forwarding to contracts\n    const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);\n    // An arbitrary amount of the base asset is added to cover the transaction fee during dry runs\n    const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: bn('100000000000000000') }];\n\n    const findAssetInput = (assetId: string) =>\n      txRequestClone.inputs.find((input) => {\n        if (input.type === InputType.Coin) {\n          return input.assetId === assetId;\n        }\n\n        // We only consider the message input if it has no data.\n        // Messages with `data` cannot fund the gas of a transaction.\n        if (isRequestInputMessageWithoutData(input)) {\n          return baseAssetId === assetId;\n        }\n        return false;\n      });\n\n    const updateAssetInput = (assetId: string, quantity: BN) => {\n      const assetInput = findAssetInput(assetId);\n      const usedQuantity = quantity;\n\n      if (assetInput && 'amount' in assetInput) {\n        assetInput.amount = usedQuantity;\n      } else {\n        txRequestClone.addResources(\n          this.generateFakeResources([\n            {\n              amount: quantity,\n              assetId,\n            },\n          ])\n        );\n      }\n    };\n\n    mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(({ amount, assetId }) =>\n      updateAssetInput(assetId, amount)\n    );\n\n    const txCost = await this.provider.getTransactionCost(txRequestClone, {\n      signatureCallback,\n      gasPrice,\n    });\n\n    return {\n      ...txCost,\n      requiredQuantities,\n    };\n  }\n\n  /**\n   * Sign a message from the account via the connector.\n   *\n   * @param message - the message to sign.\n   * @returns a promise that resolves to the signature.\n   *\n   * @hidden\n   */\n  async signMessage(message: HashableMessage): Promise<string> {\n    if (!this._connector) {\n      throw new FuelError(ErrorCode.MISSING_CONNECTOR, 'A connector is required to sign messages.');\n    }\n    return this._connector.signMessage(this.address.toString(), message);\n  }\n\n  /**\n   * Signs a transaction from the account via the connector..\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature of the transaction.\n   */\n  async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    if (!this._connector) {\n      throw new FuelError(\n        ErrorCode.MISSING_CONNECTOR,\n        'A connector is required to sign transactions.'\n      );\n    }\n    return this._connector.signTransaction(this.address.toString(), transactionRequestLike);\n  }\n\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true, ...connectorOptions }: AccountSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    let transactionRequest = transactionRequestify(transactionRequestLike);\n\n    // Check if the account is using a connector, and therefore we do not have direct access to the\n    // private key.\n    if (this._connector) {\n      const { onBeforeSend, skipCustomFee = false } = connectorOptions;\n\n      transactionRequest = await this.prepareTransactionForSend(transactionRequest);\n\n      const params: FuelConnectorSendTxParams = {\n        onBeforeSend,\n        skipCustomFee,\n        provider: {\n          url: this.provider.url,\n          cache: await serializeProviderCache(this.provider),\n        },\n        transactionState: transactionRequest.flag.state,\n        transactionSummary: await this.prepareTransactionSummary(transactionRequest),\n      };\n\n      const transaction: string | TransactionResponse = await this._connector.sendTransaction(\n        this.address.toString(),\n        transactionRequest,\n        params\n      );\n\n      return typeof transaction === 'string'\n        ? this.provider.getTransactionResponse(transaction)\n        : transaction;\n    }\n\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false,\n    });\n  }\n\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins: FakeResources[]): Array<Resource> {\n    return coins.map((coin) => ({\n      id: hexlify(randomBytes(UTXO_ID_LEN)),\n      owner: this.address,\n      blockCreated: bn(1),\n      txCreatedIdx: bn(1),\n      ...coin,\n    }));\n  }\n\n  /** @hidden */\n  private async prepareTransactionForSend(\n    request: TransactionRequest\n  ): Promise<TransactionRequest> {\n    const { transactionId } = request.flag;\n\n    // If there is no transaction id, then no status is set.\n    if (!isDefined(transactionId)) {\n      return request;\n    }\n\n    const chainId = await this.provider.getChainId();\n    const currentTransactionId = request.getTransactionId(chainId);\n\n    // If the transaction id does not match the transaction id on the request.\n    // Then we need to invalidate the transaction status\n    if (transactionId !== currentTransactionId) {\n      request.updateState(chainId);\n    }\n    return request;\n  }\n\n  /** @hidden */\n  private async prepareTransactionSummary(\n    request: TransactionRequest\n  ): Promise<TransactionSummaryJson | undefined> {\n    const chainId = await this.provider.getChainId();\n\n    return isDefined(request.flag.summary)\n      ? {\n          ...request.flag.summary,\n          id: request.getTransactionId(chainId),\n          transactionBytes: hexlify(request.toTransactionBytes()),\n        }\n      : undefined;\n  }\n\n  /** @hidden * */\n  private async assembleTx(\n    transactionRequest: ScriptTransactionRequest,\n    quantities: CoinQuantity[] = []\n  ): Promise<{ transactionRequest: ScriptTransactionRequest; gasPrice: BN }> {\n    const outputQuantities = transactionRequest.outputs\n      .filter((o) => o.type === OutputType.Coin)\n      .map(({ amount, assetId }) => ({ assetId: String(assetId), amount: bn(amount) }));\n\n    transactionRequest.gasLimit = bn(0);\n    transactionRequest.maxFee = bn(0);\n\n    const { assembledRequest, gasPrice } = await this.provider.assembleTx({\n      request: transactionRequest,\n      accountCoinQuantities: mergeQuantities(outputQuantities, quantities),\n      feePayerAccount: this,\n    });\n\n    return { transactionRequest: assembledRequest as ScriptTransactionRequest, gasPrice };\n  }\n\n  /** @hidden * */\n  private validateTransferAmount(amount: BigNumberish) {\n    if (bn(amount).lte(0)) {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSFER_AMOUNT,\n        'Transfer amount must be a positive number.'\n      );\n    }\n  }\n\n  /** @hidden * */\n  private async estimateAndFundTransaction(\n    transactionRequest: ScriptTransactionRequest,\n    txParams: TxParamsType,\n    costParams?: TransactionCostParams\n  ) {\n    let request = transactionRequest;\n    const txCost = await this.getTransactionCost(request, costParams);\n    request = this.validateGasLimitAndMaxFee({\n      transactionRequest: request,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams,\n    });\n    request = await this.fund(request, txCost);\n    return request;\n  }\n\n  /** @hidden * */\n  private validateGasLimitAndMaxFee({\n    gasUsed,\n    maxFee,\n    transactionRequest,\n    txParams: { gasLimit: setGasLimit, maxFee: setMaxFee },\n  }: {\n    gasUsed: BN;\n    maxFee: BN;\n    transactionRequest: ScriptTransactionRequest;\n    txParams: Pick<TxParamsType, 'gasLimit' | 'maxFee'>;\n  }) {\n    const request = transactionRequestify(transactionRequest) as ScriptTransactionRequest;\n\n    if (!isDefined(setGasLimit)) {\n      request.gasLimit = gasUsed;\n    } else if (gasUsed.gt(setGasLimit)) {\n      throw new FuelError(\n        ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n\n    if (!isDefined(setMaxFee)) {\n      request.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new FuelError(\n        ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n\n    return request;\n  }\n\n  /** @hidden * */\n  private validateConsolidationTxsCoins(coins: Coin[], assetId: string) {\n    if (coins.length <= 1) {\n      throw new FuelError(ErrorCode.NO_COINS_TO_CONSOLIDATE, 'No coins to consolidate.');\n    }\n\n    if (!coins.every((c) => c.assetId === assetId)) {\n      throw new FuelError(\n        ErrorCode.COINS_ASSET_ID_MISMATCH,\n        'All coins to consolidate must be from the same asset id.'\n      );\n    }\n  }\n}\n","import type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type CoinQuantityLike =\n  | [amount: BigNumberish, assetId: BytesLike, max?: BigNumberish]\n  | { amount: BigNumberish; assetId: BytesLike; max?: BigNumberish };\nexport type CoinQuantity = { amount: BN; assetId: string; max?: BN };\n\n/** @hidden */\nexport const coinQuantityfy = (coinQuantityLike: CoinQuantityLike): CoinQuantity => {\n  let assetId;\n  let amount;\n  let max;\n  if (Array.isArray(coinQuantityLike)) {\n    amount = coinQuantityLike[0];\n    assetId = coinQuantityLike[1];\n    max = coinQuantityLike[2] ?? undefined;\n  } else {\n    amount = coinQuantityLike.amount;\n    assetId = coinQuantityLike.assetId;\n    max = coinQuantityLike.max ?? undefined;\n  }\n\n  return {\n    assetId: hexlify(assetId),\n    amount: bn(amount),\n    max: max ? bn(max) : undefined,\n  };\n};\n\nexport interface IAddAmountToAssetParams {\n  assetId: string;\n  amount: BN;\n  coinQuantities: CoinQuantity[];\n}\n\nexport const addAmountToCoinQuantities = (params: IAddAmountToAssetParams): CoinQuantity[] => {\n  const { amount, assetId } = params;\n\n  const coinQuantities = [...params.coinQuantities];\n\n  const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);\n\n  if (assetIdx !== -1) {\n    coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);\n  } else {\n    coinQuantities.push({ assetId, amount });\n  }\n\n  return coinQuantities;\n};\n","import type { AddressInput } from '@fuel-ts/address';\nimport { Address, isB256 } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { Transaction } from '@fuel-ts/transactions';\nimport { InputMessageCoder, TransactionCoder, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, DateTime, isDefined, sleep } from '@fuel-ts/utils';\nimport { checkFuelCoreVersionCompatibility, versions } from '@fuel-ts/versions';\nimport type { DocumentNode } from 'graphql';\nimport { GraphQLClient } from 'graphql-request';\nimport type { GraphQLClientResponse, GraphQLResponse } from 'graphql-request/src/types';\nimport gql from 'graphql-tag';\nimport { clone } from 'ramda';\n\nimport type { Account } from '../account';\n\nimport { getSdk as getOperationsSdk } from './__generated__/operations';\nimport type {\n  GqlReceiptFragment as TransactionReceiptJson,\n  GqlNodeInfoFragment as NodeInfoJson,\n  GqlChainInfoFragment as ChainInfoJson,\n  GqlConsensusParametersVersion,\n  GqlContractParameters as ContractParameters,\n  GqlDryRunFailureStatusFragment,\n  GqlDryRunSuccessStatusFragment,\n  GqlFeeParameters as FeeParameters,\n  GqlGasCostsFragment as GasCosts,\n  GqlPredicateParameters as PredicateParameters,\n  GqlScriptParameters as ScriptParameters,\n  GqlTxParameters as TxParameters,\n  GqlPageInfo,\n  GqlRelayedTransactionFailed,\n  Requester,\n  GqlBlockFragment,\n  GqlEstimatePredicatesQuery,\n  GqlExcludeInput,\n} from './__generated__/operations';\nimport { resolveAccountForAssembleTxParams } from './assemble-tx-helpers';\nimport type { Coin } from './coin';\nimport type { CoinQuantity, CoinQuantityLike } from './coin-quantity';\nimport { coinQuantityfy } from './coin-quantity';\nimport { FuelGraphqlSubscriber } from './fuel-graphql-subscriber';\nimport type { Message, MessageCoin, MessageProof, MessageStatus } from './message';\nimport type { Resource } from './resource';\nimport { ResourceCache } from './resource-cache';\nimport type {\n  TransactionRequestLike,\n  TransactionRequest,\n  TransactionRequestInput,\n  JsonAbisFromAllCalls,\n  ScriptTransactionRequest,\n  CoinTransactionRequestInput,\n} from './transaction-request';\nimport {\n  isPredicate,\n  isTransactionTypeCreate,\n  isTransactionTypeScript,\n  transactionRequestify,\n  validateTransactionForAssetBurn,\n} from './transaction-request';\nimport type { DecodedLogs, TransactionResultReceipt } from './transaction-response';\nimport { TransactionResponse, getAllDecodedLogs } from './transaction-response';\nimport {\n  calculateGasFee,\n  extractTxError,\n  getGasUsedFromReceipts,\n  getReceiptsWithMissingData,\n} from './utils';\nimport type { RetryOptions } from './utils/auto-retry-fetch';\nimport { autoRetryFetch, getWaitDelay } from './utils/auto-retry-fetch';\nimport { assertGqlResponseHasNoErrors } from './utils/handle-gql-error-message';\nimport { parseGraphqlResponse } from './utils/parse-graphql-response';\nimport type { ProviderCacheJson, TransactionSummaryJsonPartial } from './utils/serialization';\nimport {\n  deserializeChain,\n  deserializeNodeInfo,\n  deserializeProviderCache,\n  deserializeReceipt,\n  deserializeInput,\n  deserializeOutput,\n} from './utils/serialization';\nimport { validatePaginationArgs } from './utils/validate-pagination-args';\n\nconst MAX_RETRIES = 10;\n\nexport const RESOURCES_PAGE_SIZE_LIMIT = 512;\nexport const TRANSACTIONS_PAGE_SIZE_LIMIT = 60;\nexport const BALANCES_PAGE_SIZE_LIMIT = 100;\nexport const NON_PAGINATED_BALANCES_SIZE = 10000;\nexport const BLOCKS_PAGE_SIZE_LIMIT = 5;\nexport const DEFAULT_RESOURCE_CACHE_TTL = 20_000; // 20 seconds\nexport const GAS_USED_MODIFIER = 1.2;\n\nexport type Features = {\n  balancePagination: boolean;\n  amount128: boolean;\n};\n\nexport type DryRunFailureStatusFragment = GqlDryRunFailureStatusFragment;\nexport type DryRunSuccessStatusFragment = GqlDryRunSuccessStatusFragment;\n\nexport type DryRunStatus = DryRunFailureStatusFragment | DryRunSuccessStatusFragment;\n\nexport type CallResult = {\n  receipts: TransactionResultReceipt[];\n  dryRunStatus?: DryRunStatus;\n};\n\nexport type EstimateTxDependenciesReturns = CallResult & {\n  outputVariables: number;\n  missingContractIds: string[];\n  rawReceipts: TransactionReceiptJson[];\n};\n\n/**\n * A Fuel block\n */\nexport type Block = {\n  id: string;\n  height: BN;\n  time: string;\n  transactionIds: string[];\n  header: {\n    daHeight: BN;\n    stateTransitionBytecodeVersion: string;\n    transactionsCount: string;\n    transactionsRoot: string;\n    messageOutboxRoot: string;\n    eventInboxRoot: string;\n    prevRoot: string;\n    applicationHash: string;\n  };\n};\n\nexport type ResourcesIdsToIgnore = {\n  utxos?: BytesLike[];\n  messages?: BytesLike[];\n};\n\nexport type AccountCoinQuantity = {\n  assetId: string;\n  amount: BigNumberish;\n  account?: Account;\n  changeOutputAccount?: Account;\n};\n\n// #region assemble-tx-params\nexport type AssembleTxParams<T extends TransactionRequest = TransactionRequest> = {\n  // The transaction request to assemble\n  request: T;\n  // Coin quantities required for the transaction, optional if transaction only needs funds for the fee\n  accountCoinQuantities?: AccountCoinQuantity[];\n  // Account that will pay for the transaction fees\n  feePayerAccount: Account;\n  // Block horizon for gas price estimation (default: 10)\n  blockHorizon?: number;\n  // Whether to estimate predicates (default: true)\n  estimatePredicates?: boolean;\n  // Resources to be ignored when funding the transaction (optional)\n  resourcesIdsToIgnore?: ResourcesIdsToIgnore;\n  // Amount of gas to reserve (optional)\n  reserveGas?: number;\n};\n\nexport type AssembleTxResponse<T extends TransactionRequest = TransactionRequest> = {\n  assembledRequest: T;\n  gasPrice: BN;\n  receipts: TransactionResultReceipt[];\n  rawReceipts: TransactionReceiptJson[];\n};\n// #endregion assemble-tx-params\nexport type PageInfo = GqlPageInfo;\n\nexport type GetCoinsResponse = {\n  coins: Coin[];\n  pageInfo: PageInfo;\n};\n\nexport type GetMessagesResponse = {\n  messages: Message[];\n  pageInfo: PageInfo;\n};\n\nexport type GetBalancesResponse = {\n  balances: CoinQuantity[];\n  pageInfo?: PageInfo;\n};\n\nexport type GetTransactionsResponse = {\n  transactions: Transaction[];\n  pageInfo: PageInfo;\n};\n\nexport type GetAssetDetailsResponse = {\n  subId: string;\n  contractId: string;\n  totalSupply: BN;\n};\n\nexport type GetBlocksResponse = {\n  blocks: Block[];\n  pageInfo: PageInfo;\n};\n\nexport type GetAddressTypeResponse = 'Account' | 'Contract' | 'Transaction' | 'Blob' | 'Asset';\n\n/**\n * Deployed Contract bytecode and contract id\n */\nexport type ContractResult = {\n  id: string;\n  bytecode: string;\n};\n\ntype ModifyStringToBN<T> = {\n  [P in keyof T]: P extends 'version' ? T[P] : T[P] extends string ? BN : T[P];\n};\n\nexport {\n  TransactionReceiptJson,\n  NodeInfoJson,\n  ChainInfoJson,\n  GasCosts,\n  FeeParameters,\n  ContractParameters,\n  PredicateParameters,\n  ScriptParameters,\n  TxParameters,\n};\n\nexport type ConsensusParameters = {\n  version: GqlConsensusParametersVersion;\n  chainId: BN;\n  baseAssetId: string;\n  feeParameters: ModifyStringToBN<FeeParameters>;\n  contractParameters: ModifyStringToBN<ContractParameters>;\n  predicateParameters: ModifyStringToBN<PredicateParameters>;\n  scriptParameters: ModifyStringToBN<ScriptParameters>;\n  txParameters: ModifyStringToBN<TxParameters>;\n  gasCosts: GasCosts;\n};\n\n/**\n * Chain information\n */\nexport type ChainInfo = {\n  name: string;\n  baseChainHeight: BN;\n  consensusParameters: ConsensusParameters;\n  latestBlock: {\n    header: {\n      consensusParametersVersion: string;\n    };\n  };\n};\n\n/**\n * Node information\n */\nexport type NodeInfo = {\n  utxoValidation: boolean;\n  vmBacktrace: boolean;\n  maxTx: BN;\n  maxDepth: BN;\n  nodeVersion: string;\n  indexation: {\n    balances: boolean;\n    coinsToSpend: boolean;\n    assetMetadata: boolean;\n  };\n};\n\n/** @deprecated This type is no longer used. */\nexport type NodeInfoAndConsensusParameters = {\n  nodeVersion: string;\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  maxGasPerTx: BN;\n};\n\n// #region cost-estimation-1\nexport type TransactionCost = {\n  gasPrice: BN;\n  gasUsed: BN;\n  minGas: BN;\n  minFee: BN;\n  maxFee: BN;\n  maxGas: BN;\n  rawReceipts: TransactionReceiptJson[];\n  receipts: TransactionResultReceipt[];\n  outputVariables: number;\n  missingContractIds: string[];\n  estimatedPredicates: TransactionRequestInput[];\n  requiredQuantities: CoinQuantity[];\n  addedSignatures: number;\n  dryRunStatus?: DryRunStatus;\n  updateMaxFee?: boolean;\n  transactionSummary?: TransactionSummaryJsonPartial;\n};\n// #endregion cost-estimation-1\n\n/**\n * @hidden\n *\n * Cursor pagination arguments\n *\n * https://relay.dev/graphql/connections.htm#sec-Arguments\n */\nexport type CursorPaginationArgs = {\n  /** Forward pagination limit */\n  first?: number | null;\n  /** Forward pagination cursor */\n  after?: string | null;\n  /** Backward pagination limit  */\n  last?: number | null;\n  /** Backward pagination cursor */\n  before?: string | null;\n};\n\n/*\n * Provider initialization options\n */\nexport type ProviderOptions = {\n  /**\n   * Custom fetch function to use for making requests.\n   */\n  fetch?: (\n    url: string,\n    requestInit?: RequestInit,\n    providerOptions?: Omit<ProviderOptions, 'fetch'>\n  ) => Promise<Response>;\n  /**\n   * Timeout [ms] after which every request will be aborted.\n   */\n  timeout?: number;\n  /**\n   * Resources cache for the given time [ms]. If set to -1, the cache will be disabled.\n   */\n  resourceCacheTTL?: number;\n  /**\n   * Retry options to use when fetching data from the node.\n   */\n  retryOptions?: RetryOptions;\n  /**\n   * Custom headers to include in the request.\n   */\n  headers?: RequestInit['headers'];\n  /**\n   * Middleware to modify the request before it is sent.\n   * This can be used to add headers, modify the body, etc.\n   */\n  requestMiddleware?: (request: RequestInit) => RequestInit | Promise<RequestInit>;\n  /**\n   * The cache can be passed in to avoid re-fetching the chain + node info.\n   */\n  cache?: ProviderCacheJson;\n};\n\n/**\n * UTXO validation params\n */\nexport type UTXOValidationParams = {\n  utxoValidation?: boolean;\n};\n\n/**\n * Transaction estimation params\n */\nexport type EstimateTransactionParams = {\n  /**\n   * Estimate the transaction dependencies.\n   */\n  estimateTxDependencies?: boolean;\n};\n\nexport type TransactionCostParams = EstimateTransactionParams & {\n  /**\n   * The quantities to forward to the contract.\n   */\n  quantities?: CoinQuantity[];\n\n  /**\n   * A callback to sign the transaction.\n   *\n   * @param request - The transaction request to sign.\n   * @returns A promise that resolves to the signed transaction request.\n   */\n  signatureCallback?: (request: ScriptTransactionRequest) => Promise<ScriptTransactionRequest>;\n\n  /**\n   * The gas price to use for the transaction.\n   */\n  gasPrice?: BN;\n};\n\nexport type EstimateTxDependenciesParams = {\n  /**\n   * The gas price to use for the transaction.\n   */\n  gasPrice?: BN;\n};\n\nexport type EstimateTxGasAndFeeParams = {\n  /**\n   * The transaction request to estimate the gas and fee for.\n   */\n  transactionRequest: TransactionRequest;\n\n  /**\n   * The gas price to use for the transaction.\n   */\n  gasPrice?: BN;\n};\n\n/**\n * Provider Call transaction params\n */\nexport type ProviderCallParams = UTXOValidationParams & EstimateTransactionParams;\n/**\n * Provider Send transaction params\n */\nexport type ProviderSendTxParams = EstimateTransactionParams & {\n  /**\n   * Whether to enable asset burn for the transaction.\n   */\n  enableAssetBurn?: boolean;\n  /**\n   * Whether to include the pre-confirmation status for the transaction.\n   */\n  includePreConfirmation?: boolean;\n};\n\n/**\n * URL - Consensus Params mapping.\n */\ntype ChainInfoCache = Record<string, ChainInfo>;\n\n/**\n * URL - Node Info mapping.\n */\ntype NodeInfoCache = Record<string, NodeInfo>;\n\ntype Operations = ReturnType<typeof getOperationsSdk>;\n\ntype SdkOperations = Omit<Operations, 'statusChange' | 'submitAndAwaitStatus'> & {\n  statusChange: (\n    ...args: Parameters<Operations['statusChange']>\n  ) => Promise<ReturnType<Operations['statusChange']>>;\n  submitAndAwaitStatus: (\n    ...args: Parameters<Operations['submitAndAwaitStatus']>\n  ) => Promise<ReturnType<Operations['submitAndAwaitStatus']>>;\n  getBlobs: (variables: { blobIds: string[] }) => Promise<{ blob: { id: string } | null }[]>;\n};\n\nconst WRITE_OPERATIONS: Array<keyof SdkOperations> = [\n  'submit',\n  'submitAndAwaitStatus',\n  'produceBlocks',\n];\n\n/**\n * A provider for connecting to a node\n */\nexport default class Provider {\n  operations: SdkOperations;\n  cache?: ResourceCache;\n\n  /**\n   * @hidden\n   * @param url - If provided, clears cache only for given url\n   */\n  static clearChainAndNodeCaches(url?: string) {\n    if (url) {\n      delete Provider.inflightFetchChainAndNodeInfoRequests[url];\n      delete Provider.chainInfoCache[url];\n      delete Provider.nodeInfoCache[url];\n      delete Provider.currentBlockHeightCache[url];\n      return;\n    }\n    Provider.inflightFetchChainAndNodeInfoRequests = {};\n    Provider.nodeInfoCache = {};\n    Provider.chainInfoCache = {};\n    Provider.currentBlockHeightCache = {};\n  }\n\n  /** @hidden */\n  public url: string;\n  /** @hidden */\n  private urlWithoutAuth: string;\n\n  /**\n   * Governs whether to include the required block height in the request body\n   * for block-sensitive operations like when submitting a transaction.\n   *\n   * This ensures that the operation is executed at the correct block height,\n   * regardless of which node in the network the request is routed to.\n   *\n   * `true` by default.\n   */\n  public static ENABLE_RPC_CONSISTENCY: boolean = true;\n  /** @hidden */\n  private static inflightFetchChainAndNodeInfoRequests: Record<\n    string,\n    Promise<{ consensusParametersTimestamp: number }>\n  > = {};\n\n  /** @hidden */\n  private static chainInfoCache: ChainInfoCache = {};\n  /** @hidden */\n  private static nodeInfoCache: NodeInfoCache = {};\n  /** @hidden */\n  private static currentBlockHeightCache: Record<string, number> = {};\n  /** @hidden */\n  private static incompatibleNodeVersionMessage: string = '';\n\n  /** @hidden */\n  public consensusParametersTimestamp?: number;\n\n  options: ProviderOptions = {\n    timeout: undefined,\n    resourceCacheTTL: undefined,\n    fetch: undefined,\n    retryOptions: undefined,\n    headers: undefined,\n    cache: undefined,\n  };\n\n  private static extractOperationName(body: BodyInit | undefined | null) {\n    return body?.toString().match(/\"operationName\":\"(.+)\"/)?.[1] as keyof SdkOperations;\n  }\n\n  private static isWriteOperation(body: BodyInit | undefined | null) {\n    return WRITE_OPERATIONS.includes(this.extractOperationName(body));\n  }\n\n  private static normalizeUrl(url: string) {\n    return url.replace(/-sub$/, '');\n  }\n\n  private static hasWriteOperationHappened(url: string) {\n    return isDefined(Provider.currentBlockHeightCache[this.normalizeUrl(url)]);\n  }\n\n  /**\n   * @hidden\n   */\n  private static getFetchFn(options: ProviderOptions): NonNullable<ProviderOptions['fetch']> {\n    const { retryOptions, timeout, headers } = options;\n\n    return autoRetryFetch(async (...args) => {\n      const url = args[0];\n      const request = args[1];\n      const signal = timeout ? AbortSignal.timeout(timeout) : undefined;\n\n      let fullRequest: RequestInit = {\n        ...request,\n        signal,\n        headers: { ...request?.headers, ...headers },\n      };\n\n      if (options.requestMiddleware) {\n        fullRequest = await options.requestMiddleware(fullRequest);\n      }\n\n      if (Provider.ENABLE_RPC_CONSISTENCY && Provider.hasWriteOperationHappened(url)) {\n        Provider.applyBlockHeight(fullRequest, url);\n      }\n\n      return Provider.fetchAndProcessBlockHeight(url, fullRequest, options);\n    }, retryOptions);\n  }\n\n  private static applyBlockHeight(request: RequestInit, url: string) {\n    const normalizedUrl = this.normalizeUrl(url);\n\n    // Apply the block height to the request\n    const currentBlockHeight = Provider.currentBlockHeightCache[normalizedUrl] ?? 0;\n    request.body = request.body\n      ?.toString()\n      .replace(/}$/, `,\"extensions\":{\"required_fuel_block_height\":${currentBlockHeight}}}`);\n  }\n\n  private static async fetchAndProcessBlockHeight(\n    url: string,\n    request: RequestInit,\n    options: ProviderOptions\n  ): Promise<Response> {\n    const fetchFn = () =>\n      options.fetch ? options.fetch(url, request, options) : fetch(url, request);\n\n    const isWriteOperation = Provider.isWriteOperation(request.body);\n\n    // If it is a write operation, we will initialize the block height cache\n    if (isWriteOperation && !Provider.hasWriteOperationHappened(url)) {\n      Provider.currentBlockHeightCache[Provider.normalizeUrl(url)] = 0;\n    }\n\n    let response: Response = await fetchFn();\n\n    if (!Provider.ENABLE_RPC_CONSISTENCY) {\n      return response;\n    }\n\n    const retryOptions: RetryOptions = {\n      maxRetries: 5,\n      baseDelay: 500,\n    };\n\n    for (let retriesLeft = retryOptions.maxRetries; retriesLeft > 0; --retriesLeft) {\n      const { extensions } = await parseGraphqlResponse({\n        response,\n        isSubscription: url.endsWith('-sub'),\n      });\n      Provider.setCurrentBlockHeight(url, extensions?.current_fuel_block_height);\n\n      if (!extensions?.fuel_block_height_precondition_failed) {\n        break;\n      }\n\n      const retryAttempt = retryOptions.maxRetries - retriesLeft + 1;\n      const sleepTime = getWaitDelay(retryOptions, retryAttempt);\n      await sleep(sleepTime);\n\n      response = await fetchFn();\n    }\n\n    return response;\n  }\n\n  private static setCurrentBlockHeight(url: string, height?: number) {\n    /**\n     * If the height is undefined, there is nothing to set. We can also return early if\n     * no write operation has happened yet, as it means the 'currentBlockHeightCache' was\n     * not initialized and the current block height should not be used.\n     */\n    const writeOperationHappened = Provider.hasWriteOperationHappened(url);\n    if (!isDefined(height) || !writeOperationHappened) {\n      return;\n    }\n\n    const normalizedUrl = Provider.normalizeUrl(url);\n\n    if (height > Provider.currentBlockHeightCache[normalizedUrl]) {\n      Provider.currentBlockHeightCache[normalizedUrl] = height;\n    }\n  }\n\n  /**\n   * Constructor to initialize a Provider.\n   *\n   * @param url - GraphQL endpoint of the Fuel node\n   * @param options - Additional options for the provider\n   * @hidden\n   */\n  constructor(url: string, options: ProviderOptions = {}) {\n    const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = Provider.extractBasicAuth(url);\n\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.url = url;\n\n    const { FUELS } = versions;\n    const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };\n\n    this.options = {\n      ...this.options,\n      ...options,\n      headers,\n    };\n\n    this.operations = this.createOperations();\n    const { resourceCacheTTL, cache } = this.options;\n\n    /**\n     * Re-instantiate chain + node info from the passed in cache\n     */\n    if (cache) {\n      const { consensusParametersTimestamp, chain, nodeInfo } = deserializeProviderCache(cache);\n      this.consensusParametersTimestamp = consensusParametersTimestamp;\n      Provider.chainInfoCache[this.urlWithoutAuth] = chain;\n      Provider.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;\n    }\n\n    /**\n     * Instantiate the resource cache (for UTXO's + messages)\n     */\n    if (isDefined(resourceCacheTTL)) {\n      if (resourceCacheTTL !== -1) {\n        this.cache = new ResourceCache(resourceCacheTTL);\n      } else {\n        this.cache = undefined;\n      }\n    } else {\n      this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);\n    }\n  }\n\n  private static extractBasicAuth(url: string): {\n    url: string;\n    urlWithoutAuth: string;\n    headers: ProviderOptions['headers'];\n  } {\n    let parsedUrl: URL;\n    try {\n      parsedUrl = new URL(url);\n    } catch (error) {\n      throw new FuelError(FuelError.CODES.INVALID_URL, 'Invalid URL provided.', { url }, error);\n    }\n\n    const username = parsedUrl.username;\n    const password = parsedUrl.password;\n    const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    if (!(username && password)) {\n      return { url, urlWithoutAuth: url, headers: undefined };\n    }\n\n    return {\n      url,\n      urlWithoutAuth,\n      headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` },\n    };\n  }\n\n  /**\n   * Initialize Provider async stuff\n   */\n  async init(): Promise<Provider> {\n    await this.fetchChainAndNodeInfo();\n    return this;\n  }\n\n  /**\n   * Returns the `chainInfo` for the current network.\n   *\n   * @returns the chain information configuration.\n   */\n  async getChain(): Promise<ChainInfo> {\n    await this.init();\n    return Provider.chainInfoCache[this.urlWithoutAuth];\n  }\n\n  /**\n   * Returns the `nodeInfo` for the current network.\n   *\n   * @returns the node information configuration.\n   */\n  async getNode(): Promise<NodeInfo> {\n    await this.init();\n    return Provider.nodeInfoCache[this.urlWithoutAuth];\n  }\n\n  /**\n   * Returns some helpful parameters related to gas fees.\n   */\n  async getGasConfig() {\n    await this.init();\n\n    const {\n      txParameters: { maxGasPerTx },\n      predicateParameters: { maxGasPerPredicate },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts,\n    } = (await this.getChain()).consensusParameters;\n\n    return {\n      maxGasPerTx,\n      maxGasPerPredicate,\n      gasPriceFactor,\n      gasPerByte,\n      gasCosts,\n    };\n  }\n\n  /**\n   * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.\n   *\n   * @param url - The URL to connect to.\n   * @param options - Additional options for the provider.\n   */\n  async connect(url: string, options?: ProviderOptions): Promise<void> {\n    const { url: rawUrl, urlWithoutAuth, headers } = Provider.extractBasicAuth(url);\n\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.options = options ?? this.options;\n    this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };\n\n    this.operations = this.createOperations();\n\n    await this.init();\n  }\n\n  /**\n   * Return the chain and node information.\n   * @param ignoreCache - If true, ignores the cache and re-fetch configs.\n   * @returns A promise that resolves to the Chain and NodeInfo.\n   */\n  async fetchChainAndNodeInfo(\n    ignoreCache: boolean = false\n  ): Promise<{ chain: ChainInfo; nodeInfo: NodeInfo }> {\n    const nodeInfo: NodeInfo | undefined = Provider.nodeInfoCache[this.urlWithoutAuth];\n    const chain: ChainInfo | undefined = Provider.chainInfoCache[this.urlWithoutAuth];\n\n    // If we have a cache and we're not ignoring it, return the cache\n    const hasCache = nodeInfo && chain;\n    if (hasCache && !ignoreCache) {\n      return { nodeInfo, chain };\n    }\n\n    // Obtain any inflight requests from other instances of Provider\n    const inflightRequest: Promise<{ consensusParametersTimestamp: number }> =\n      Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth];\n\n    // If there is an inflight request, then wait for it to resolve and return the cached values\n    if (inflightRequest) {\n      return inflightRequest.then((data) => {\n        this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n        return {\n          nodeInfo: Provider.nodeInfoCache[this.urlWithoutAuth],\n          chain: Provider.chainInfoCache[this.urlWithoutAuth],\n        };\n      });\n    }\n\n    // If there is no inflight request, then fetch the chain and node info from the network\n    const getChainAndNodeInfoFromNetwork = this.operations\n      .getChainAndNodeInfo()\n      .then((data) => ({\n        chain: deserializeChain(data.chain),\n        nodeInfo: deserializeNodeInfo(data.nodeInfo),\n        consensusParametersTimestamp: Date.now(),\n      }))\n      .then((data) => {\n        Provider.setIncompatibleNodeVersionMessage(data.nodeInfo);\n        Provider.chainInfoCache[this.urlWithoutAuth] = data.chain;\n        Provider.nodeInfoCache[this.urlWithoutAuth] = data.nodeInfo;\n        this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n        return data;\n      })\n      .catch((err) => {\n        const error = new FuelError(\n          FuelError.CODES.CONNECTION_REFUSED,\n          'Unable to fetch chain and node info from the network',\n          { url: this.urlWithoutAuth },\n          err\n        );\n        error.cause = { code: 'ECONNREFUSED' };\n\n        throw error;\n      })\n      .finally(() => {\n        delete Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth];\n      });\n\n    // Set the inflight request to the network request\n    Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth] =\n      getChainAndNodeInfoFromNetwork;\n\n    // Return the cached values once the network request resolves\n    return Provider.inflightFetchChainAndNodeInfoRequests[this.urlWithoutAuth].then((data) => {\n      this.consensusParametersTimestamp = data.consensusParametersTimestamp;\n      return {\n        nodeInfo: Provider.nodeInfoCache[this.urlWithoutAuth],\n        chain: Provider.chainInfoCache[this.urlWithoutAuth],\n      };\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  private static setIncompatibleNodeVersionMessage(nodeInfo: NodeInfo) {\n    const { isMajorSupported, isMinorSupported, supportedVersion } =\n      checkFuelCoreVersionCompatibility(nodeInfo.nodeVersion);\n\n    if (!isMajorSupported || !isMinorSupported) {\n      Provider.incompatibleNodeVersionMessage = [\n        `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion}.`,\n        `The TS SDK currently supports fuel-core version ${supportedVersion}.`,\n        `Things may not work as expected.`,\n      ].join('\\n');\n      FuelGraphqlSubscriber.incompatibleNodeVersionMessage =\n        Provider.incompatibleNodeVersionMessage;\n    }\n  }\n\n  /**\n   * Create GraphQL client and set operations.\n   *\n   * @returns The operation SDK object\n   * @hidden\n   */\n  private createOperations(): SdkOperations {\n    const fetchFn = Provider.getFetchFn(this.options);\n    const gqlClient = new GraphQLClient(this.urlWithoutAuth, {\n      fetch: (input: RequestInfo | URL, requestInit?: RequestInit) =>\n        fetchFn(input.toString(), requestInit || {}, this.options),\n      responseMiddleware: (response: GraphQLClientResponse<unknown> | Error) => {\n        if ('response' in response) {\n          const graphQlResponse = response.response as GraphQLResponse;\n          assertGqlResponseHasNoErrors(\n            graphQlResponse.errors,\n            Provider.incompatibleNodeVersionMessage\n          );\n        }\n      },\n    });\n\n    const executeQuery = (query: DocumentNode, vars: Record<string, unknown>) => {\n      const opDefinition = query.definitions.find((x) => x.kind === 'OperationDefinition') as {\n        operation: string;\n        name: { kind: 'Name'; value: string };\n      };\n      const isSubscription = opDefinition?.operation === 'subscription';\n\n      if (isSubscription) {\n        return FuelGraphqlSubscriber.create({\n          url: this.urlWithoutAuth,\n          query,\n          fetchFn: (url, requestInit) => fetchFn(url as string, requestInit, this.options),\n          variables: vars,\n          operationName: opDefinition.name.value,\n          onEvent: (event) => {\n            Provider.setCurrentBlockHeight(\n              this.urlWithoutAuth,\n              event.extensions?.current_fuel_block_height as number\n            );\n          },\n        });\n      }\n      return gqlClient.request(query, vars);\n    };\n\n    const customOperations = (requester: Requester) => ({\n      getBlobs(variables: { blobIds: string[] }) {\n        const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(', ');\n        const blobParams = variables.blobIds\n          .map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`)\n          .join('\\n');\n\n        const updatedVariables = variables.blobIds.reduce(\n          (acc, blobId, i) => {\n            acc[`blobId${i}`] = blobId;\n            return acc;\n          },\n          {} as Record<string, string>\n        );\n\n        const document = gql`\n          query getBlobs(${queryParams}) {\n            ${blobParams}\n          }\n        `;\n\n        return requester(document, updatedVariables);\n      },\n    });\n\n    // @ts-expect-error This is due to this function being generic. Its type is specified when calling a specific operation via provider.operations.xyz.\n    return { ...getOperationsSdk(executeQuery), ...customOperations(executeQuery) };\n  }\n\n  /**\n   * Returns the version of the connected node.\n   *\n   * @returns A promise that resolves to the version string.\n   */\n  async getVersion(): Promise<string> {\n    const {\n      nodeInfo: { nodeVersion },\n    } = await this.operations.getVersion();\n    return nodeVersion;\n  }\n\n  /**\n   * Returns the latest block number.\n   *\n   * @returns A promise that resolves to the latest block number.\n   */\n  async getBlockNumber(): Promise<BN> {\n    const {\n      chain: {\n        latestBlock: { height },\n      },\n    } = await this.operations.getLatestBlockHeight();\n    return bn(height);\n  }\n\n  /**\n   * Returns the node information for the current provider network.\n   *\n   * @returns a promise that resolves to the node information.\n   */\n  async fetchNode(): Promise<NodeInfo> {\n    const { nodeInfo } = await this.operations.getNodeInfo();\n\n    const processedNodeInfo: NodeInfo = deserializeNodeInfo(nodeInfo);\n\n    Provider.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;\n\n    return processedNodeInfo;\n  }\n\n  /**\n   * Returns the chain information for the current provider network.\n   *\n   * @returns a promise that resolves to the chain information.\n   */\n  async fetchChain(): Promise<ChainInfo> {\n    const { chain } = await this.operations.getChain();\n\n    const processedChain = deserializeChain(chain);\n\n    Provider.chainInfoCache[this.urlWithoutAuth] = processedChain;\n\n    return processedChain;\n  }\n\n  /**\n   * Returns the chain ID for the current provider network.\n   *\n   * @returns A promise that resolves to the chain ID number.\n   */\n  async getChainId() {\n    const {\n      consensusParameters: { chainId },\n    } = await this.getChain();\n    return chainId.toNumber();\n  }\n\n  /**\n   * Returns the base asset ID for the current provider network.\n   *\n   * @returns the base asset ID.\n   */\n  async getBaseAssetId() {\n    const all = await this.getChain();\n    const {\n      consensusParameters: { baseAssetId },\n    } = all;\n    return baseAssetId;\n  }\n\n  /**\n   * Retrieves the details of an asset given its ID.\n   *\n   * @param assetId - The unique identifier of the asset.\n   * @returns A promise that resolves to an object containing the asset details.\n   */\n  async getAssetDetails(assetId: string): Promise<GetAssetDetailsResponse> {\n    const { assetMetadata } = await this.getNodeFeatures();\n\n    if (!assetMetadata) {\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_FEATURE,\n        'The current node does not supports fetching asset details'\n      );\n    }\n\n    const { assetDetails } = await this.operations.getAssetDetails({ assetId });\n\n    const { contractId, subId, totalSupply } = assetDetails;\n\n    return {\n      subId,\n      contractId,\n      totalSupply: bn(totalSupply),\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  #cacheInputs(inputs: TransactionRequestInput[], transactionId: string): void {\n    if (!this.cache) {\n      return;\n    }\n\n    this.cache.set(transactionId, inputs);\n  }\n\n  /**\n   * @hidden\n   */\n  async validateTransaction(tx: TransactionRequest) {\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs, maxOutputs },\n      },\n    } = await this.getChain();\n    if (bn(tx.inputs.length).gt(maxInputs)) {\n      throw new FuelError(\n        ErrorCode.MAX_INPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`\n      );\n    }\n\n    if (bn(tx.outputs.length).gt(maxOutputs)) {\n      throw new FuelError(\n        ErrorCode.MAX_OUTPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`\n      );\n    }\n  }\n\n  /**\n   * Submits a transaction to the chain to be executed.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response object.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    {\n      enableAssetBurn,\n      estimateTxDependencies = true,\n      includePreConfirmation: _includePreConfirmation = true,\n    }: ProviderSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n\n    if (estimateTxDependencies) {\n      await this.estimateTxDependencies(transactionRequest);\n    }\n\n    await this.validateTransaction(transactionRequest);\n\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n\n    let abis: JsonAbisFromAllCalls | undefined;\n\n    if (isTransactionTypeScript(transactionRequest)) {\n      abis = transactionRequest.abis;\n    }\n    const subscription = await this.operations.submitAndAwaitStatus({\n      encodedTransaction,\n      includePreConfirmation: true,\n    });\n\n    this.#cacheInputs(\n      transactionRequest.inputs,\n      transactionRequest.getTransactionId(await this.getChainId())\n    );\n\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);\n  }\n\n  /**\n   * Executes a transaction without actually submitting it to the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async dryRun(\n    transactionRequestLike: TransactionRequestLike,\n    { utxoValidation, estimateTxDependencies = true }: ProviderCallParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions: encodedTransaction,\n      utxoValidation: utxoValidation || false,\n    });\n    const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;\n    const receipts = rawReceipts.map(deserializeReceipt);\n\n    return { receipts, dryRunStatus };\n  }\n\n  /**\n   * Estimates the gas usage for predicates in a transaction request.\n   *\n   * @template T - The type of the transaction request object.\n   *\n   * @param transactionRequest - The transaction request to estimate predicates for.\n   * @returns A promise that resolves to the updated transaction request with estimated gas usage for predicates.\n   */\n  async estimatePredicates<T extends TransactionRequest>(transactionRequest: T): Promise<T> {\n    const shouldEstimatePredicates = transactionRequest.inputs.some(\n      (input) => isPredicate(input) && bn(input.predicateGasUsed).isZero()\n    );\n\n    if (!shouldEstimatePredicates) {\n      return transactionRequest;\n    }\n\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n\n    const response = await this.operations.estimatePredicates({\n      encodedTransaction,\n    });\n\n    const { estimatePredicates } = response;\n\n    // eslint-disable-next-line no-param-reassign\n    transactionRequest = this.parseEstimatePredicatesResponse(\n      transactionRequest,\n      estimatePredicates\n    );\n\n    return transactionRequest;\n  }\n\n  /**\n   * Estimates the gas price and predicates for a given transaction request and block horizon.\n   *\n   * @param transactionRequest - The transaction request to estimate predicates and gas price for.\n   * @param blockHorizon - The block horizon to use for gas price estimation.\n   * @returns A promise that resolves to an object containing the updated transaction\n   * request and the estimated gas price.\n   */\n  async estimatePredicatesAndGasPrice<T extends TransactionRequest>(\n    transactionRequest: T,\n    blockHorizon: number\n  ) {\n    const shouldEstimatePredicates = transactionRequest.inputs.some(\n      (input) => isPredicate(input) && bn(input.predicateGasUsed).isZero()\n    );\n\n    if (!shouldEstimatePredicates) {\n      const gasPrice = await this.estimateGasPrice(blockHorizon);\n\n      return { transactionRequest, gasPrice };\n    }\n\n    const {\n      estimateGasPrice: { gasPrice },\n      estimatePredicates,\n    } = await this.operations.estimatePredicatesAndGasPrice({\n      blockHorizon: String(blockHorizon),\n      encodedTransaction: hexlify(transactionRequest.toTransactionBytes()),\n    });\n\n    // eslint-disable-next-line no-param-reassign\n    transactionRequest = this.parseEstimatePredicatesResponse(\n      transactionRequest,\n      estimatePredicates\n    );\n\n    return { transactionRequest, gasPrice: bn(gasPrice) };\n  }\n\n  /**\n   * Will dryRun a transaction and check for missing dependencies.\n   *\n   * If there are missing variable outputs,\n   * `addVariableOutputs` is called on the transaction.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @param gasPrice - The gas price to use for the transaction, if not provided it will be fetched.\n   * @returns A promise that resolves to the estimate transaction dependencies.\n   */\n  async estimateTxDependencies(\n    transactionRequest: TransactionRequest,\n    { gasPrice: gasPriceParam }: EstimateTxDependenciesParams = {}\n  ): Promise<EstimateTxDependenciesReturns> {\n    if (isTransactionTypeCreate(transactionRequest)) {\n      return {\n        rawReceipts: [],\n        receipts: [],\n        outputVariables: 0,\n        missingContractIds: [],\n      };\n    }\n\n    let rawReceipts: TransactionReceiptJson[] = [];\n    let receipts: TransactionResultReceipt[] = [];\n    const missingContractIds: string[] = [];\n    let outputVariables = 0;\n    let dryRunStatus: DryRunStatus | undefined;\n\n    await this.validateTransaction(transactionRequest);\n\n    const gasPrice = gasPriceParam ?? (await this.estimateGasPrice(10));\n\n    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {\n      const {\n        dryRun: [{ receipts: serializedReceipts, status }],\n      } = await this.operations.dryRun({\n        encodedTransactions: [hexlify(transactionRequest.toTransactionBytes())],\n        utxoValidation: false,\n        gasPrice: gasPrice.toString(),\n      });\n\n      rawReceipts = serializedReceipts;\n      receipts = serializedReceipts.map(deserializeReceipt);\n      dryRunStatus = status;\n\n      const { missingOutputVariables, missingOutputContractIds } =\n        getReceiptsWithMissingData(receipts);\n\n      const hasMissingOutputs =\n        missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;\n\n      if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {\n        outputVariables += missingOutputVariables.length;\n        transactionRequest.addVariableOutputs(missingOutputVariables.length);\n        missingOutputContractIds.forEach(({ contractId }) => {\n          transactionRequest.addContractInputAndOutput(new Address(contractId));\n          missingContractIds.push(contractId);\n        });\n\n        const { maxFee } = await this.estimateTxGasAndFee({\n          transactionRequest,\n          gasPrice,\n        });\n\n        // eslint-disable-next-line no-param-reassign\n        transactionRequest.maxFee = maxFee;\n      } else {\n        break;\n      }\n    }\n\n    return {\n      rawReceipts,\n      receipts,\n      outputVariables,\n      missingContractIds,\n      dryRunStatus,\n    };\n  }\n\n  /**\n   * Dry runs multiple transactions and checks for missing dependencies in batches.\n   *\n   * Transactions are dry run in batches. After each dry run, transactions requiring\n   * further modifications are identified. The method iteratively updates these transactions\n   * and performs subsequent dry runs until all dependencies for each transaction are satisfied.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @returns A promise that resolves to an array of results for each transaction.\n   */\n  async estimateMultipleTxDependencies(\n    transactionRequests: TransactionRequest[]\n  ): Promise<EstimateTxDependenciesReturns[]> {\n    const results: EstimateTxDependenciesReturns[] = transactionRequests.map(() => ({\n      rawReceipts: [],\n      receipts: [],\n      outputVariables: 0,\n      missingContractIds: [],\n      dryRunStatus: undefined,\n    }));\n\n    const allRequests = clone(transactionRequests);\n\n    // Map of original request index to its serialized transaction (for ScriptTransactionRequest only)\n    const serializedTransactionsMap = new Map();\n\n    // Prepare ScriptTransactionRequests and their indices\n    allRequests.forEach((req, index) => {\n      if (isTransactionTypeScript(req)) {\n        serializedTransactionsMap.set(index, hexlify(req.toTransactionBytes()));\n      }\n    });\n\n    // Indices of ScriptTransactionRequests\n    let transactionsToProcess = Array.from(serializedTransactionsMap.keys());\n    let attempt = 0;\n\n    while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {\n      const encodedTransactions = transactionsToProcess.map((index) =>\n        serializedTransactionsMap.get(index)\n      );\n      const dryRunResults = await this.operations.dryRun({\n        encodedTransactions,\n        utxoValidation: false,\n      });\n\n      const nextRoundTransactions = [];\n\n      for (let i = 0; i < dryRunResults.dryRun.length; i++) {\n        const requestIdx = transactionsToProcess[i];\n        const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];\n        const result = results[requestIdx];\n        result.receipts = rawReceipts.map(deserializeReceipt);\n        result.dryRunStatus = status;\n        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(\n          result.receipts\n        );\n        const hasMissingOutputs =\n          missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;\n        const request = allRequests[requestIdx];\n        if (hasMissingOutputs && isTransactionTypeScript(request)) {\n          result.outputVariables += missingOutputVariables.length;\n          request.addVariableOutputs(missingOutputVariables.length);\n          missingOutputContractIds.forEach(({ contractId }) => {\n            request.addContractInputAndOutput(new Address(contractId));\n            result.missingContractIds.push(contractId);\n          });\n          const { maxFee } = await this.estimateTxGasAndFee({\n            transactionRequest: request,\n          });\n          request.maxFee = maxFee;\n          // Prepare for the next round of dry run\n          serializedTransactionsMap.set(requestIdx, hexlify(request.toTransactionBytes()));\n          nextRoundTransactions.push(requestIdx);\n        }\n      }\n\n      transactionsToProcess = nextRoundTransactions;\n      attempt += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Dry runs multiple transactions.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   *\n   * @returns A promise that resolves to an array of results for each transaction call.\n   */\n  async dryRunMultipleTransactions(\n    transactionRequests: TransactionRequest[],\n    { utxoValidation, estimateTxDependencies = true }: ProviderCallParams = {}\n  ): Promise<CallResult[]> {\n    if (estimateTxDependencies) {\n      return this.estimateMultipleTxDependencies(transactionRequests);\n    }\n    const encodedTransactions = transactionRequests.map((tx) => hexlify(tx.toTransactionBytes()));\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: utxoValidation || false,\n    });\n\n    const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {\n      const receipts = rawReceipts.map(deserializeReceipt);\n      return { receipts, dryRunStatus: status };\n    });\n\n    return results;\n  }\n\n  public async autoRefetchConfigs() {\n    const now = Date.now();\n    const diff = now - (this.consensusParametersTimestamp ?? 0);\n\n    if (diff < 60000) {\n      return;\n    }\n\n    // no cache? refetch.\n    if (!Provider.chainInfoCache?.[this.urlWithoutAuth]) {\n      await this.fetchChainAndNodeInfo(true);\n      return;\n    }\n\n    const chainInfo = Provider.chainInfoCache[this.urlWithoutAuth];\n\n    const {\n      latestBlock: {\n        header: { consensusParametersVersion: previous },\n      },\n    } = chainInfo;\n\n    const {\n      chain: {\n        latestBlock: {\n          header: { consensusParametersVersion: current },\n        },\n      },\n    } = await this.operations.getConsensusParametersVersion();\n\n    // old cache? refetch.\n    if (previous !== current) {\n      // calling with true to skip cache\n      await this.fetchChainAndNodeInfo(true);\n    }\n  }\n\n  /**\n   * Estimates the transaction gas and fee based on the provided transaction request.\n   * @param params - The parameters for estimating the transaction gas and fee.\n   * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.\n   */\n  async estimateTxGasAndFee(params: EstimateTxGasAndFeeParams) {\n    const { transactionRequest, gasPrice: gasPriceParam } = params;\n    let gasPrice = gasPriceParam;\n\n    await this.autoRefetchConfigs();\n\n    const chainInfo = await this.getChain();\n    const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();\n\n    const minGas = transactionRequest.calculateMinGas(chainInfo);\n    if (!isDefined(gasPrice)) {\n      gasPrice = await this.estimateGasPrice(10);\n    }\n\n    const minFee = calculateGasFee({\n      gasPrice: bn(gasPrice),\n      gas: minGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip,\n    }).add(1);\n\n    let gasLimit = bn(0);\n\n    // Only Script transactions consume gas\n    if (isTransactionTypeScript(transactionRequest)) {\n      // If the gasLimit is set to 0, it means we need to estimate it.\n      gasLimit = transactionRequest.gasLimit;\n      if (transactionRequest.gasLimit.eq(0)) {\n        transactionRequest.gasLimit = minGas;\n\n        /*\n         * Adjusting the gasLimit of a transaction (TX) impacts its maxGas.\n         * Consequently, this affects the maxFee, as it is derived from the maxGas. To accurately estimate the\n         * gasLimit for a transaction, especially when the exact gas consumption is uncertain (as in an estimation dry-run),\n         * the following steps are required:\n         * 1 - Initially, set the gasLimit using the calculated minGas.\n         * 2 - Based on this initial gasLimit, calculate the maxGas.\n         * 3 - Get the maximum gas per transaction allowed by the chain, and subtract the previously calculated maxGas from this limit.\n         * 4 - The result of this subtraction should then be adopted as the new, definitive gasLimit.\n         * 5 - Recalculate the maxGas with the updated gasLimit. This new maxGas is then used to compute the maxFee.\n         * 6 - The calculated maxFee represents the safe, estimated cost required to fund the transaction.\n         */\n        transactionRequest.gasLimit = maxGasPerTx.sub(\n          transactionRequest.calculateMaxGas(chainInfo, minGas)\n        );\n\n        gasLimit = transactionRequest.gasLimit;\n      }\n    }\n    const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);\n    const maxFee = calculateGasFee({\n      gasPrice: bn(gasPrice),\n      gas: maxGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip,\n    }).add(1);\n\n    return {\n      minGas,\n      minFee,\n      maxGas,\n      maxFee,\n      gasPrice,\n      gasLimit,\n    };\n  }\n\n  /**\n   * Executes a signed transaction without applying the states changes\n   * on the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async simulate(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransactions = [hexlify(transactionRequest.toTransactionBytes())];\n\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: true,\n    });\n\n    const callResult = dryRunStatuses.map((dryRunStatus) => {\n      const { id, receipts, status } = dryRunStatus;\n\n      const processedReceipts = receipts.map(deserializeReceipt);\n\n      return { id, receipts: processedReceipts, status };\n    });\n\n    return { receipts: callResult[0].receipts };\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   *\n   * @deprecated Use provider.assembleTx instead\n   * Check the migration guide https://docs.fuel.network/guide/assembling-transactions/migration-guide.html for more information.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    { signatureCallback, gasPrice: gasPriceParam }: TransactionCostParams = {}\n  ): Promise<Omit<TransactionCost, 'requiredQuantities'>> {\n    const txRequestClone = clone(transactionRequestify(transactionRequestLike));\n    const updateMaxFee = txRequestClone.maxFee.eq(0);\n    const isScriptTransaction = isTransactionTypeScript(txRequestClone);\n\n    // Remove gasLimit to avoid gasLimit when estimating predicates\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = bn(0);\n    }\n\n    const signedRequest = clone(txRequestClone);\n    let addedSignatures = 0;\n    if (signatureCallback && isTransactionTypeScript(signedRequest)) {\n      const lengthBefore = signedRequest.witnesses.length;\n      await signatureCallback(signedRequest);\n      addedSignatures = signedRequest.witnesses.length - lengthBefore;\n    }\n\n    let gasPrice: BN;\n\n    if (gasPriceParam) {\n      gasPrice = gasPriceParam;\n      await this.estimatePredicates(signedRequest);\n    } else {\n      ({ gasPrice } = await this.estimatePredicatesAndGasPrice(signedRequest, 10));\n    }\n\n    txRequestClone.updatePredicateGasUsed(signedRequest.inputs);\n\n    /**\n     * Calculate minGas and maxGas based on the real transaction\n     */\n    // eslint-disable-next-line prefer-const\n    let { maxFee, maxGas, minFee, minGas, gasLimit } = await this.estimateTxGasAndFee({\n      // Fetches and returns a gas price\n      transactionRequest: signedRequest,\n      gasPrice,\n    });\n\n    let rawReceipts: TransactionReceiptJson[] = [];\n    let receipts: TransactionResultReceipt[] = [];\n    let dryRunStatus: DryRunStatus | undefined;\n    let missingContractIds: string[] = [];\n    let outputVariables = 0;\n    let gasUsed = bn(0);\n\n    txRequestClone.maxFee = maxFee;\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = gasLimit;\n      if (signatureCallback) {\n        await signatureCallback(txRequestClone);\n      }\n\n      ({ rawReceipts, receipts, missingContractIds, outputVariables, dryRunStatus } =\n        await this.estimateTxDependencies(txRequestClone, { gasPrice }));\n\n      if (dryRunStatus && 'reason' in dryRunStatus) {\n        throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus.reason);\n      }\n\n      const { maxGasPerTx } = await this.getGasConfig();\n\n      const pristineGasUsed = getGasUsedFromReceipts(receipts);\n      gasUsed = bn(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));\n      txRequestClone.gasLimit = gasUsed;\n\n      ({ maxFee, maxGas, minFee, minGas } = await this.estimateTxGasAndFee({\n        transactionRequest: txRequestClone,\n        gasPrice,\n      }));\n    }\n\n    const transactionSummary: TransactionSummaryJsonPartial = {\n      gasPrice: gasPrice.toString(),\n      receipts: rawReceipts,\n    };\n\n    return {\n      rawReceipts,\n      receipts,\n      gasUsed,\n      gasPrice,\n      minGas,\n      maxGas,\n      minFee,\n      maxFee,\n      outputVariables,\n      missingContractIds,\n      addedSignatures,\n      estimatedPredicates: txRequestClone.inputs,\n      dryRunStatus,\n      updateMaxFee,\n      transactionSummary,\n    };\n  }\n\n  /**\n   * Assembles a transaction by completely estimating and funding it.\n   *\n   * @param params - Parameters used to assemble the transaction.\n   *\n   * @returns The assembled transaction request, estimated gas price, and receipts\n   */\n  async assembleTx<T extends TransactionRequest>(\n    params: AssembleTxParams<T>\n  ): Promise<AssembleTxResponse<T>> {\n    const {\n      request,\n      reserveGas,\n      resourcesIdsToIgnore,\n      feePayerAccount,\n      blockHorizon = 10,\n      estimatePredicates = true,\n      accountCoinQuantities = [],\n    } = params;\n\n    /**\n     * A set of all addresses that are involved in the transaction. This is used later\n     * to recover cached resources IDs from these users.\n     */\n    const allAddresses = new Set<string>();\n    const baseAssetId = await this.getBaseAssetId();\n\n    /**\n     * Setting the index of the fee payer account to -1 as we don't know it yet.\n     */\n    let feePayerIndex = -1;\n\n    /**\n     * The change output for the base asset.\n     */\n    let baseAssetChange: string | undefined;\n\n    const requiredBalances = accountCoinQuantities.map((quantity, index) => {\n      // When the `account` property is not provided, it defaults to the fee payer account.\n      const { amount, assetId, account = feePayerAccount, changeOutputAccount } = quantity;\n\n      const changeAccountAddress = changeOutputAccount\n        ? changeOutputAccount.address.toB256()\n        : account.address.toB256();\n\n      allAddresses.add(account.address.toB256());\n\n      const changePolicy = {\n        change: changeAccountAddress,\n      };\n\n      if (assetId === baseAssetId) {\n        baseAssetChange = changePolicy.change;\n      }\n\n      /**\n       * If the account is the same as the fee payer account, set the index to the current index.\n       */\n      if (account.address.equals(feePayerAccount.address)) {\n        feePayerIndex = index;\n      }\n\n      const requiredBalance = {\n        account: resolveAccountForAssembleTxParams(account),\n        amount: bn(amount).toString(10),\n        assetId,\n        changePolicy,\n      };\n\n      return requiredBalance;\n    });\n\n    /**\n     * If the fee payer index is still -1, it means that the fee payer account was not added to the required balances.\n     */\n    if (feePayerIndex === -1) {\n      allAddresses.add(feePayerAccount.address.toB256());\n\n      const newLength = requiredBalances.push({\n        account: resolveAccountForAssembleTxParams(feePayerAccount),\n        amount: bn(0).toString(10), // Since the correct fee amount cannot be determined yet, we can use 0\n        assetId: baseAssetId,\n        changePolicy: {\n          change: baseAssetChange || feePayerAccount.address.toB256(),\n        },\n      });\n\n      feePayerIndex = newLength - 1;\n    }\n\n    /**\n     * Retrieving from the cache the resources IDs that should be excluded based on the addresses\n     * that are involved in the transaction.\n     */\n    const excludeInput = await this.adjustResourcesToIgnoreForAddresses(\n      Array.from(allAddresses),\n      resourcesIdsToIgnore\n    );\n\n    const {\n      assembleTx: { status, transaction: gqlTransaction, gasPrice },\n    } = await this.operations.assembleTx({\n      tx: hexlify(request.toTransactionBytes()),\n      blockHorizon: String(blockHorizon),\n      feeAddressIndex: String(feePayerIndex),\n      requiredBalances,\n      estimatePredicates,\n      excludeInput,\n      reserveGas: reserveGas ? reserveGas.toString(10) : undefined,\n    });\n\n    if (status.type === 'DryRunFailureStatus') {\n      const parsedReceipts = status.receipts.map(deserializeReceipt);\n\n      throw this.extractDryRunError(request, parsedReceipts, status.reason);\n    }\n\n    request.witnesses = gqlTransaction.witnesses || request.witnesses;\n\n    request.inputs = gqlTransaction.inputs?.map(deserializeInput) || request.inputs;\n    request.outputs = gqlTransaction.outputs?.map(deserializeOutput) || request.outputs;\n\n    if (gqlTransaction.policies?.maxFee) {\n      request.maxFee = bn(gqlTransaction.policies.maxFee);\n    }\n\n    if (gqlTransaction.scriptGasLimit) {\n      (request as ScriptTransactionRequest).gasLimit = bn(gqlTransaction.scriptGasLimit);\n    }\n\n    const rawReceipts = status.receipts;\n    const chainId = await this.getChainId();\n\n    request.updateState(chainId, 'funded', {\n      gasPrice: gasPrice.toString(),\n      receipts: rawReceipts,\n    });\n\n    return {\n      assembledRequest: request,\n      gasPrice: bn(gasPrice),\n      receipts: status.receipts.map(deserializeReceipt),\n      rawReceipts,\n    };\n  }\n\n  /**\n   * Returns coins for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get (optional).\n   * @param paginationArgs - Pagination arguments (optional).\n   *\n   * @returns A promise that resolves to the coins.\n   */\n  async getCoins(\n    owner: AddressInput,\n    assetId?: BytesLike,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetCoinsResponse> {\n    const ownerAddress = new Address(owner);\n    const {\n      coins: { edges, pageInfo },\n    } = await this.operations.getCoins({\n      ...validatePaginationArgs({\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n        inputArgs: paginationArgs,\n      }),\n      filter: { owner: ownerAddress.toB256(), assetId: assetId && hexlify(assetId) },\n    });\n\n    const coins = edges.map(({ node }) => ({\n      id: node.utxoId,\n      assetId: node.assetId,\n      amount: bn(node.amount),\n      owner: ownerAddress,\n      blockCreated: bn(node.blockCreated),\n      txCreatedIdx: bn(node.txCreatedIdx),\n    }));\n\n    return {\n      coins,\n      pageInfo,\n    };\n  }\n\n  /**\n   * Returns resources for the given owner satisfying the spend query.\n   *\n   * @param owner - The address to get resources for.\n   * @param quantities - The coin quantities to get.\n   * @param resourcesIdsToIgnore - IDs of excluded resources from the selection (optional).\n   * @returns A promise that resolves to the resources.\n   */\n  async getResourcesToSpend(\n    owner: AddressInput,\n    quantities: CoinQuantityLike[],\n    resourcesIdsToIgnore?: ResourcesIdsToIgnore\n  ): Promise<Resource[]> {\n    const ownerAddress = new Address(owner);\n\n    const excludedIds = await this.adjustResourcesToIgnoreForAddresses(\n      [ownerAddress.b256Address],\n      resourcesIdsToIgnore\n    );\n\n    const coinsQuery = {\n      owner: ownerAddress.toB256(),\n      queryPerAsset: quantities\n        .map(coinQuantityfy)\n        .map(({ assetId, amount, max: maxPerAsset }) => ({\n          assetId: hexlify(assetId),\n          amount: (amount.eqn(0) ? bn(1) : amount).toString(10),\n          max: maxPerAsset ? maxPerAsset.toString(10) : undefined,\n        })),\n      excludedIds,\n    };\n\n    const result = await this.operations.getCoinsToSpend(coinsQuery);\n\n    const coins = result.coinsToSpend\n      .flat()\n      .map((coin) => {\n        switch (coin.type) {\n          case 'MessageCoin':\n            return {\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              daHeight: bn(coin.daHeight),\n              sender: new Address(coin.sender),\n              recipient: new Address(coin.recipient),\n              nonce: coin.nonce,\n            } as MessageCoin;\n          case 'Coin':\n            return {\n              id: coin.utxoId,\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              owner: ownerAddress,\n              blockCreated: bn(coin.blockCreated),\n              txCreatedIdx: bn(coin.txCreatedIdx),\n            } as Coin;\n          default:\n            return null;\n        }\n      })\n      .filter((v) => !!v) as Array<Resource>;\n\n    return coins;\n  }\n\n  /**\n   * Returns an array of blobIds that exist on chain, for a given array of blobIds.\n   *\n   * @param blobIds - blobIds to check.\n   * @returns - A promise that resolves to an array of blobIds that exist on chain.\n   */\n  async getBlobs(blobIds: string[]): Promise<string[]> {\n    const res = await this.operations.getBlobs({ blobIds });\n    const blobs: (string | null)[] = [];\n\n    Object.keys(res).forEach((key) => {\n      // @ts-expect-error keys are strings\n      const val = res[key];\n      blobs.push(val?.id ?? null);\n    });\n\n    return blobs.filter((v) => v) as string[];\n  }\n\n  /**\n   * Returns block matching the given ID or height.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block or null.\n   */\n  async getBlock(idOrHeight: BigNumberish | 'latest'): Promise<Block | null> {\n    let block: GqlBlockFragment | undefined | null;\n\n    if (idOrHeight === 'latest') {\n      const {\n        chain: { latestBlock },\n      } = await this.operations.getLatestBlock();\n      block = latestBlock;\n    } else {\n      const isblockId = typeof idOrHeight === 'string' && isB256(idOrHeight);\n      const variables = isblockId\n        ? { blockId: idOrHeight }\n        : { height: bn(idOrHeight).toString(10) };\n      const response = await this.operations.getBlock(variables);\n      block = response.block;\n    }\n\n    if (!block) {\n      return null;\n    }\n\n    const { header, height, id, transactions } = block;\n\n    return {\n      id,\n      height: bn(height),\n      time: header.time,\n      header: {\n        applicationHash: header.applicationHash,\n        daHeight: bn(header.daHeight),\n        eventInboxRoot: header.eventInboxRoot,\n        messageOutboxRoot: header.messageOutboxRoot,\n        prevRoot: header.prevRoot,\n        stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,\n        transactionsCount: header.transactionsCount,\n        transactionsRoot: header.transactionsRoot,\n      },\n      transactionIds: transactions.map((tx) => tx.id),\n    };\n  }\n\n  /**\n   * Returns all the blocks matching the given parameters.\n   *\n   * @param params - The parameters to query blocks.\n   * @returns A promise that resolves to the blocks.\n   */\n  async getBlocks(params?: CursorPaginationArgs): Promise<GetBlocksResponse> {\n    const {\n      blocks: { edges, pageInfo },\n    } = await this.operations.getBlocks({\n      ...validatePaginationArgs({\n        paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,\n        inputArgs: params,\n      }),\n    });\n\n    const blocks: Block[] = edges.map(({ node: block }) => ({\n      id: block.id,\n      height: bn(block.height),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot,\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n    }));\n\n    return { blocks, pageInfo };\n  }\n\n  /**\n   * Returns block matching the given ID or type, including transaction data.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlockWithTransactions(\n    /** ID or height of the block */\n    idOrHeight: BigNumberish | 'latest'\n  ): Promise<(Block & { transactions: Transaction[] }) | null> {\n    let variables;\n    if (typeof idOrHeight === 'number') {\n      variables = { blockHeight: bn(idOrHeight).toString(10) };\n    } else if (idOrHeight === 'latest') {\n      variables = { blockHeight: (await this.getBlockNumber()).toString() };\n    } else if (typeof idOrHeight === 'string' && isB256(idOrHeight)) {\n      variables = { blockId: idOrHeight };\n    } else {\n      variables = { blockHeight: bn(idOrHeight).toString() };\n    }\n\n    const { block } = await this.operations.getBlockWithTransactions(variables);\n\n    if (!block) {\n      return null;\n    }\n\n    return {\n      id: block.id,\n      height: bn(block.height, 10),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot,\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n      transactions: block.transactions.map(\n        (tx) => new TransactionCoder().decode(arrayify(tx.rawPayload), 0)?.[0]\n      ),\n    };\n  }\n\n  /**\n   * Get transaction with the given ID.\n   *\n   * @param transactionId - ID of the transaction.\n   * @returns A promise that resolves to the transaction.\n   */\n  async getTransaction<TTransactionType = void>(\n    transactionId: string\n  ): Promise<Transaction<TTransactionType> | null> {\n    const { transaction } = await this.operations.getTransaction({ transactionId });\n\n    if (!transaction) {\n      return null;\n    }\n\n    try {\n      return new TransactionCoder().decode(\n        arrayify(transaction.rawPayload),\n        0\n      )?.[0] as Transaction<TTransactionType>;\n    } catch (error) {\n      if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n        // eslint-disable-next-line no-console\n        console.warn('Unsupported transaction type encountered');\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves transactions based on the provided pagination arguments.\n   * @param paginationArgs - The pagination arguments for retrieving transactions.\n   * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.\n   */\n  async getTransactions(paginationArgs?: CursorPaginationArgs): Promise<GetTransactionsResponse> {\n    const {\n      transactions: { edges, pageInfo },\n    } = await this.operations.getTransactions({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT,\n      }),\n    });\n\n    const coder = new TransactionCoder();\n    const transactions = edges\n      .map(({ node: { rawPayload } }) => {\n        try {\n          return coder.decode(arrayify(rawPayload), 0)[0];\n        } catch (error) {\n          if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n            // eslint-disable-next-line no-console\n            console.warn('Unsupported transaction type encountered');\n            return null;\n          }\n          throw error;\n        }\n      })\n      .filter((tx): tx is Transaction => tx !== null);\n\n    return { transactions, pageInfo };\n  }\n\n  /**\n   * Fetches a compressed block at the specified height.\n   *\n   * @param height - The height of the block to fetch.\n   * @returns The compressed block if available, otherwise `null`.\n   */\n  async daCompressedBlock(height: string) {\n    const { daCompressedBlock } = await this.operations.daCompressedBlock({\n      height,\n    });\n\n    if (!daCompressedBlock) {\n      return null;\n    }\n\n    return daCompressedBlock;\n  }\n\n  /**\n   * Get deployed contract with the given ID.\n   *\n   * @param contractId - ID of the contract.\n   * @returns A promise that resolves to the contract.\n   */\n  async getContract(contractId: string): Promise<ContractResult | null> {\n    const { contract } = await this.operations.getContract({ contractId });\n    if (!contract) {\n      return null;\n    }\n    return contract;\n  }\n\n  /**\n   * Returns the balance for the given contract for the given asset ID.\n   *\n   * @param contractId - The contract ID to get the balance for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getContractBalance(\n    /** The contract ID to get the balance for */\n    contractId: string | Address,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { contractBalance } = await this.operations.getContractBalance({\n      contract: new Address(contractId).toB256(),\n      asset: hexlify(assetId),\n    });\n    return bn(contractBalance.amount, 10);\n  }\n\n  /**\n   * Returns the balance for the given owner for the given asset ID.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getBalance(\n    /** The address to get coins for */\n    owner: AddressInput,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { balance } = await this.operations.getBalanceV2({\n      owner: new Address(owner).toB256(),\n      assetId: hexlify(assetId),\n    });\n    return bn(balance.amountU128, 10);\n  }\n\n  /**\n   * Returns balances for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the balances.\n   */\n  async getBalances(\n    owner: string | Address,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetBalancesResponse> {\n    // The largest possible size allowed by the node.\n    let args: CursorPaginationArgs = { first: NON_PAGINATED_BALANCES_SIZE };\n\n    const { balancesPagination: supportsPagination } = await this.getNodeFeatures();\n\n    if (supportsPagination) {\n      // If the node supports pagination, we use the provided pagination arguments.\n      args = validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: BALANCES_PAGE_SIZE_LIMIT,\n      });\n    }\n\n    const {\n      balances: { edges, pageInfo },\n    } = await this.operations.getBalancesV2({\n      ...args,\n      filter: { owner: new Address(owner).toB256() },\n      supportsPagination,\n    });\n\n    const balances = edges.map(({ node }) => ({\n      assetId: node.assetId,\n      amount: bn(node.amountU128),\n    }));\n\n    return {\n      balances,\n      ...(supportsPagination ? { pageInfo } : {}),\n    };\n  }\n\n  /**\n   * Returns message for the given address.\n   *\n   * @param address - The address to get message from.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the messages.\n   */\n  async getMessages(\n    address: AddressInput,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetMessagesResponse> {\n    const {\n      messages: { edges, pageInfo },\n    } = await this.operations.getMessages({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n      }),\n      owner: new Address(address).toB256(),\n    });\n\n    const messages = edges.map(({ node }) => ({\n      messageId: InputMessageCoder.getMessageId({\n        sender: node.sender,\n        recipient: node.recipient,\n        nonce: node.nonce,\n        amount: bn(node.amount),\n        data: node.data,\n      }),\n      sender: new Address(node.sender),\n      recipient: new Address(node.recipient),\n      nonce: node.nonce,\n      amount: bn(node.amount),\n      data: InputMessageCoder.decodeData(node.data),\n      daHeight: bn(node.daHeight),\n    }));\n\n    return {\n      messages,\n      pageInfo,\n    };\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param transactionId - The transaction to get message from.\n   * @param messageId - The message id from MessageOut receipt.\n   * @param commitBlockId - The commit block id (optional).\n   * @param commitBlockHeight - The commit block height (optional).\n   * @returns A promise that resolves to the message proof.\n   */\n  async getMessageProof(\n    transactionId: string,\n    nonce: string,\n    commitBlockId?: string,\n    commitBlockHeight?: BN\n  ): Promise<MessageProof> {\n    let inputObject: {\n      /** The transaction to get message from */\n      transactionId: string;\n      /** The message id from MessageOut receipt */\n      nonce: string;\n      commitBlockId?: string;\n      commitBlockHeight?: string;\n    } = {\n      transactionId,\n      nonce,\n    };\n\n    if (commitBlockId && commitBlockHeight) {\n      throw new FuelError(\n        ErrorCode.INVALID_INPUT_PARAMETERS,\n        'commitBlockId and commitBlockHeight cannot be used together'\n      );\n    }\n\n    if (commitBlockId) {\n      inputObject = {\n        ...inputObject,\n        commitBlockId,\n      };\n    }\n\n    if (commitBlockHeight) {\n      inputObject = {\n        ...inputObject,\n        // Convert BN into a number string required on the query\n        // This should probably be fixed on the fuel client side\n        commitBlockHeight: commitBlockHeight.toNumber().toString(),\n      };\n    }\n\n    const result = await this.operations.getMessageProof(inputObject);\n\n    const {\n      messageProof,\n      messageBlockHeader,\n      commitBlockHeader,\n      blockProof,\n      sender,\n      recipient,\n      amount,\n      data,\n    } = result.messageProof;\n\n    return {\n      messageProof: {\n        proofIndex: bn(messageProof.proofIndex),\n        proofSet: messageProof.proofSet,\n      },\n      blockProof: {\n        proofIndex: bn(blockProof.proofIndex),\n        proofSet: blockProof.proofSet,\n      },\n      messageBlockHeader: {\n        id: messageBlockHeader.id,\n        daHeight: bn(messageBlockHeader.daHeight),\n        transactionsCount: Number(messageBlockHeader.transactionsCount),\n        transactionsRoot: messageBlockHeader.transactionsRoot,\n        height: bn(messageBlockHeader.height),\n        prevRoot: messageBlockHeader.prevRoot,\n        time: messageBlockHeader.time,\n        applicationHash: messageBlockHeader.applicationHash,\n        messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),\n        messageOutboxRoot: messageBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),\n        eventInboxRoot: messageBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion),\n      },\n      commitBlockHeader: {\n        id: commitBlockHeader.id,\n        daHeight: bn(commitBlockHeader.daHeight),\n        transactionsCount: Number(commitBlockHeader.transactionsCount),\n        transactionsRoot: commitBlockHeader.transactionsRoot,\n        height: bn(commitBlockHeader.height),\n        prevRoot: commitBlockHeader.prevRoot,\n        time: commitBlockHeader.time,\n        applicationHash: commitBlockHeader.applicationHash,\n        messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),\n        messageOutboxRoot: commitBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),\n        eventInboxRoot: commitBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion),\n      },\n      sender: new Address(sender),\n      recipient: new Address(recipient),\n      nonce,\n      amount: bn(amount),\n      data,\n    };\n  }\n\n  /**\n   * Get the latest gas price from the node.\n   *\n   * @returns A promise that resolves to the latest gas price.\n   */\n  async getLatestGasPrice(): Promise<BN> {\n    const { latestGasPrice } = await this.operations.getLatestGasPrice();\n    return bn(latestGasPrice.gasPrice);\n  }\n\n  /**\n   * Returns the estimate gas price for the given block horizon.\n   *\n   * @param blockHorizon - The block horizon to estimate gas price for.\n   * @returns A promise that resolves to the estimated gas price.\n   */\n  async estimateGasPrice(blockHorizon: number): Promise<BN> {\n    const { estimateGasPrice } = await this.operations.estimateGasPrice({\n      blockHorizon: String(blockHorizon),\n    });\n    return bn(estimateGasPrice.gasPrice);\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param nonce - The nonce of the message to get status from.\n   * @returns A promise that resolves to the message status\n   */\n  async getMessageStatus(\n    /** The nonce of the message to get status from */\n    nonce: string\n  ): Promise<MessageStatus> {\n    const result = await this.operations.getMessageStatus({ nonce });\n    return result.messageStatus;\n  }\n\n  /**\n   * Lets you produce blocks with custom timestamps and the block number of the last block produced.\n   *\n   * @param amount - The amount of blocks to produce.\n   * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).\n   * @returns A promise that resolves to the block number of the last produced block.\n   */\n  async produceBlocks(amount: number, startTime?: number) {\n    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({\n      blocksToProduce: bn(amount).toString(10),\n      startTimestamp: startTime ? DateTime.fromUnixMilliseconds(startTime).toTai64() : undefined,\n    });\n    return bn(latestBlockHeight);\n  }\n\n  /**\n   * Check if the given ID is an account.\n   *\n   * @param id - The ID to check.\n   * @returns A promise that resolves to the result of the check.\n   */\n  async isUserAccount(id: string): Promise<boolean> {\n    const type = await this.getAddressType(id);\n    return type === 'Account';\n  }\n\n  /**\n   * Determines the type of address based on the provided ID.\n   *\n   * @param id - The ID to be checked.\n   * @returns A promise that resolves to a string indicating the type of address.\n   */\n  async getAddressType(id: string): Promise<GetAddressTypeResponse> {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id,\n    });\n\n    if (contract) {\n      return 'Contract';\n    }\n    if (blob) {\n      return 'Blob';\n    }\n    if (transaction) {\n      return 'Transaction';\n    }\n\n    try {\n      // Unlike the previous queries this one will throw if the ID is not an assetId\n      const asset = await this.getAssetDetails(id);\n      if (asset) {\n        return 'Asset';\n      }\n    } catch (e) {}\n\n    return 'Account';\n  }\n\n  /**\n   * Get the transaction response for the given transaction ID.\n   *\n   * @param transactionId - The transaction ID to get the response for.\n   * @returns A promise that resolves to the transaction response.\n   */\n\n  async getTransactionResponse(transactionId: string): Promise<TransactionResponse> {\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionId, this, chainId);\n  }\n\n  /**\n   * Returns Message for given nonce.\n   *\n   * @param nonce - The nonce of the message to retrieve.\n   * @returns A promise that resolves to the Message object or null.\n   */\n  async getMessageByNonce(nonce: string): Promise<Message | null> {\n    const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });\n\n    if (!rawMessage) {\n      return null;\n    }\n\n    const message: Message = {\n      messageId: InputMessageCoder.getMessageId({\n        sender: rawMessage.sender,\n        recipient: rawMessage.recipient,\n        nonce,\n        amount: bn(rawMessage.amount),\n        data: rawMessage.data,\n      }),\n      sender: new Address(rawMessage.sender),\n      recipient: new Address(rawMessage.recipient),\n      nonce,\n      amount: bn(rawMessage.amount),\n      data: InputMessageCoder.decodeData(rawMessage.data),\n      daHeight: bn(rawMessage.daHeight),\n    };\n\n    return message;\n  }\n\n  /**\n   * Get the relayed transaction for the given transaction ID.\n   *\n   * @param relayedTransactionId - The relayed transaction ID to get the response for.\n   * @returns A promise that resolves to the relayed transaction.\n   */\n  async getRelayedTransactionStatus(\n    relayedTransactionId: string\n  ): Promise<GqlRelayedTransactionFailed | null> {\n    const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({\n      relayedTransactionId,\n    });\n\n    if (!relayedTransactionStatus) {\n      return null;\n    }\n\n    return relayedTransactionStatus;\n  }\n\n  /**\n   * @hidden\n   */\n  private extractDryRunError(\n    transactionRequest: TransactionRequest,\n    receipts: TransactionResultReceipt[],\n    reason: string\n  ): FuelError {\n    let logs: DecodedLogs['logs'] = [];\n    let groupedLogs: DecodedLogs['groupedLogs'] = {};\n\n    if (transactionRequest.type === TransactionType.Script && transactionRequest.abis) {\n      ({ logs, groupedLogs } = getAllDecodedLogs({\n        receipts,\n        mainAbi: transactionRequest.abis.main,\n        externalAbis: transactionRequest.abis.otherContractsAbis,\n      }));\n    }\n\n    return extractTxError({\n      logs,\n      groupedLogs,\n      receipts,\n      statusReason: reason,\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  async getNodeFeatures() {\n    const { indexation } = await this.getNode();\n\n    return {\n      assetMetadata: Boolean(indexation?.assetMetadata),\n      balancesPagination: Boolean(indexation?.balances),\n      coinsToSpend: Boolean(indexation?.coinsToSpend),\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  private parseEstimatePredicatesResponse<T extends TransactionRequest>(\n    transactionRequest: T,\n    { inputs }: GqlEstimatePredicatesQuery['estimatePredicates']\n  ): T {\n    if (inputs) {\n      inputs.forEach((input, i) => {\n        if (input && 'predicateGasUsed' in input && bn(input.predicateGasUsed).gt(0)) {\n          // eslint-disable-next-line no-param-reassign\n          (<CoinTransactionRequestInput>transactionRequest.inputs[i]).predicateGasUsed =\n            input.predicateGasUsed;\n        }\n      });\n    }\n\n    return transactionRequest;\n  }\n\n  /**\n   * @hidden\n   *\n   * This helper adjusts the resources to be excluded for a given set of addresses.\n   * Supporting multiple addresses is important because of the `assembleTx` method,\n   * which may be invoked with different addresses. It handles both messages and UTXOs,\n   * ensuring the total number of inputs does not exceed the maximum allowed by the chain's\n   * consensus parameters. The resources specified in the `resourcesIdsToIgnore` parameter have priority\n   * over those retrieved from the cache.\n   */\n  private async adjustResourcesToIgnoreForAddresses(\n    addresses: string[],\n    resourcesIdsToIgnore?: ResourcesIdsToIgnore\n  ): Promise<GqlExcludeInput> {\n    const final = {\n      messages: resourcesIdsToIgnore?.messages?.map((nonce) => hexlify(nonce)) || [],\n      utxos: resourcesIdsToIgnore?.utxos?.map((id) => hexlify(id)) || [],\n    };\n\n    if (this.cache) {\n      const cache = this.cache;\n      const allCached = addresses.map((address) => cache.getActiveData(address));\n\n      const {\n        consensusParameters: {\n          txParameters: { maxInputs: maxInputsBn },\n        },\n      } = await this.getChain();\n\n      const maxInputs = maxInputsBn.toNumber();\n\n      for (let i = 0; i < allCached.length; i++) {\n        let total = final.utxos.length + final.messages.length;\n        if (total >= maxInputs) {\n          break;\n        }\n\n        final.utxos = [...final.utxos, ...allCached[i].utxos.slice(0, maxInputs - total)];\n\n        total = final.utxos.length + final.messages.length;\n\n        if (total >= maxInputs) {\n          break;\n        }\n\n        final.messages = [...final.messages, ...allCached[i].messages.slice(0, maxInputs - total)];\n      }\n    }\n\n    return final;\n  }\n}\n","import type { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  Address: { input: string; output: string; }\n  AssetId: { input: string; output: string; }\n  BlobId: { input: any; output: any; }\n  BlockId: { input: string; output: string; }\n  Bytes32: { input: string; output: string; }\n  ContractId: { input: string; output: string; }\n  HexString: { input: string; output: string; }\n  Nonce: { input: string; output: string; }\n  RelayedTransactionId: { input: string; output: string; }\n  Salt: { input: string; output: string; }\n  Signature: { input: string; output: string; }\n  SubId: { input: string; output: string; }\n  Tai64Timestamp: { input: string; output: string; }\n  TransactionId: { input: string; output: string; }\n  TxPointer: { input: string; output: string; }\n  U16: { input: string; output: string; }\n  U32: { input: string; output: string; }\n  U64: { input: string; output: string; }\n  U128: { input: string; output: string; }\n  UtxoId: { input: string; output: string; }\n};\n\nexport type GqlAccount = {\n  address?: InputMaybe<Scalars['Address']['input']>;\n  predicate?: InputMaybe<GqlPredicate>;\n};\n\nexport type GqlAssembleTransactionResult = {\n  gasPrice: Scalars['U64']['output'];\n  status: GqlDryRunTransactionStatus;\n  transaction: GqlTransaction;\n};\n\nexport type GqlAssetInfoDetails = {\n  contractId: Scalars['ContractId']['output'];\n  subId: Scalars['SubId']['output'];\n  totalSupply: Scalars['U128']['output'];\n};\n\nexport type GqlBalance = {\n  amount: Scalars['U64']['output'];\n  amountU128: Scalars['U128']['output'];\n  assetId: Scalars['AssetId']['output'];\n  owner: Scalars['Address']['output'];\n};\n\nexport type GqlBalanceConnection = {\n  /** A list of edges. */\n  edges: Array<GqlBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBalanceEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlBalance;\n};\n\nexport type GqlBalanceFilterInput = {\n  /** Filter coins based on the `owner` field */\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlBlob = {\n  bytecode: Scalars['HexString']['output'];\n  id: Scalars['BlobId']['output'];\n};\n\nexport type GqlBlock = {\n  consensus: GqlConsensus;\n  header: GqlHeader;\n  height: Scalars['U32']['output'];\n  id: Scalars['BlockId']['output'];\n  transactionIds: Array<Scalars['TransactionId']['output']>;\n  transactions: Array<GqlTransaction>;\n  version: GqlBlockVersion;\n};\n\nexport type GqlBlockConnection = {\n  /** A list of edges. */\n  edges: Array<GqlBlockEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBlock>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBlockEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlBlock;\n};\n\nexport enum GqlBlockVersion {\n  V1 = 'V1'\n}\n\n/** Breakpoint, defined as a tuple of contract ID and relative PC offset inside it */\nexport type GqlBreakpoint = {\n  contract: Scalars['ContractId']['input'];\n  pc: Scalars['U64']['input'];\n};\n\nexport type GqlChainInfo = {\n  consensusParameters: GqlConsensusParameters;\n  daHeight: Scalars['U64']['output'];\n  gasCosts: GqlGasCosts;\n  latestBlock: GqlBlock;\n  name: Scalars['String']['output'];\n};\n\nexport type GqlChangeOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\nexport type GqlChangePolicy = {\n  /**\n   * Adds `Output::Change` to the transaction if it is not already present.\n   * Sending remaining assets to the provided address.\n   */\n  change?: InputMaybe<Scalars['Address']['input']>;\n  /** Destroys the remaining assets by the transaction for provided address. */\n  destroy?: InputMaybe<GqlDestroy>;\n};\n\nexport type GqlCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  /** TxPointer - the height of the block this coin was created in */\n  blockCreated: Scalars['U32']['output'];\n  owner: Scalars['Address']['output'];\n  /** TxPointer - the index of the transaction that created this coin */\n  txCreatedIdx: Scalars['U16']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport type GqlCoinConnection = {\n  /** A list of edges. */\n  edges: Array<GqlCoinEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlCoin>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlCoinEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlCoin;\n};\n\nexport type GqlCoinFilterInput = {\n  /** Returns coins only with `asset_id`. */\n  assetId?: InputMaybe<Scalars['AssetId']['input']>;\n  /** Returns coins owned by the `owner`. */\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlCoinOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\n/** The schema analog of the [`coins::CoinType`]. */\nexport type GqlCoinType = GqlCoin | GqlMessageCoin;\n\nexport type GqlConsensus = GqlGenesis | GqlPoAConsensus;\n\nexport type GqlConsensusParameters = {\n  baseAssetId: Scalars['AssetId']['output'];\n  blockGasLimit: Scalars['U64']['output'];\n  blockTransactionSizeLimit: Scalars['U64']['output'];\n  chainId: Scalars['U64']['output'];\n  contractParams: GqlContractParameters;\n  feeParams: GqlFeeParameters;\n  gasCosts: GqlGasCosts;\n  predicateParams: GqlPredicateParameters;\n  privilegedAddress: Scalars['Address']['output'];\n  scriptParams: GqlScriptParameters;\n  txParams: GqlTxParameters;\n  version: GqlConsensusParametersVersion;\n};\n\nexport type GqlConsensusParametersPurpose = {\n  checksum: Scalars['Bytes32']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport enum GqlConsensusParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlContract = {\n  bytecode: Scalars['HexString']['output'];\n  id: Scalars['ContractId']['output'];\n  salt: Scalars['Salt']['output'];\n};\n\nexport type GqlContractBalance = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  contract: Scalars['ContractId']['output'];\n};\n\nexport type GqlContractBalanceConnection = {\n  /** A list of edges. */\n  edges: Array<GqlContractBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlContractBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlContractBalanceEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlContractBalance;\n};\n\nexport type GqlContractBalanceFilterInput = {\n  /** Filter assets based on the `contractId` field */\n  contract: Scalars['ContractId']['input'];\n};\n\nexport type GqlContractCreated = {\n  contract: Scalars['ContractId']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlContractOutput = {\n  balanceRoot: Scalars['Bytes32']['output'];\n  inputIndex: Scalars['U16']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlContractParameters = {\n  contractMaxSize: Scalars['U64']['output'];\n  maxStorageSlots: Scalars['U64']['output'];\n  version: GqlContractParametersVersion;\n};\n\nexport enum GqlContractParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlDaCompressedBlock = {\n  bytes: Scalars['HexString']['output'];\n};\n\nexport type GqlDependentCost = GqlHeavyOperation | GqlLightOperation;\n\nexport enum GqlDestroy {\n  Destroy = 'DESTROY'\n}\n\nexport type GqlDryRunFailureStatus = {\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String']['output'];\n  receipts: Array<GqlReceipt>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n};\n\nexport type GqlDryRunStorageReads = {\n  storageReads: Array<GqlStorageReadReplayEvent>;\n  txStatuses: Array<GqlDryRunTransactionExecutionStatus>;\n};\n\nexport type GqlDryRunSuccessStatus = {\n  programState?: Maybe<GqlProgramState>;\n  receipts: Array<GqlReceipt>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n};\n\nexport type GqlDryRunTransactionExecutionStatus = {\n  id: Scalars['TransactionId']['output'];\n  receipts: Array<GqlReceipt>;\n  status: GqlDryRunTransactionStatus;\n};\n\nexport type GqlDryRunTransactionStatus = GqlDryRunFailureStatus | GqlDryRunSuccessStatus;\n\nexport type GqlEstimateGasPrice = {\n  gasPrice: Scalars['U64']['output'];\n};\n\nexport type GqlExcludeInput = {\n  /** Messages to exclude from the selection. */\n  messages: Array<Scalars['Nonce']['input']>;\n  /** Utxos to exclude from the selection. */\n  utxos: Array<Scalars['UtxoId']['input']>;\n};\n\nexport type GqlFailureStatus = {\n  block: GqlBlock;\n  blockHeight: Scalars['U32']['output'];\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String']['output'];\n  receipts: Array<GqlReceipt>;\n  time: Scalars['Tai64Timestamp']['output'];\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction: GqlTransaction;\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlFeeParameters = {\n  gasPerByte: Scalars['U64']['output'];\n  gasPriceFactor: Scalars['U64']['output'];\n  version: GqlFeeParametersVersion;\n};\n\nexport enum GqlFeeParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlGasCosts = {\n  add: Scalars['U64']['output'];\n  addi: Scalars['U64']['output'];\n  aloc: Scalars['U64']['output'];\n  alocDependentCost: GqlDependentCost;\n  and: Scalars['U64']['output'];\n  andi: Scalars['U64']['output'];\n  bal: Scalars['U64']['output'];\n  bhei: Scalars['U64']['output'];\n  bhsh: Scalars['U64']['output'];\n  bldd?: Maybe<GqlDependentCost>;\n  bsiz?: Maybe<GqlDependentCost>;\n  burn: Scalars['U64']['output'];\n  call: GqlDependentCost;\n  cb: Scalars['U64']['output'];\n  ccp: GqlDependentCost;\n  cfe: GqlDependentCost;\n  cfei: Scalars['U64']['output'];\n  cfeiDependentCost: GqlDependentCost;\n  cfsi: Scalars['U64']['output'];\n  contractRoot: GqlDependentCost;\n  croo: GqlDependentCost;\n  csiz: GqlDependentCost;\n  div: Scalars['U64']['output'];\n  divi: Scalars['U64']['output'];\n  eck1: Scalars['U64']['output'];\n  ecop?: Maybe<Scalars['U64']['output']>;\n  ecr1: Scalars['U64']['output'];\n  ed19: Scalars['U64']['output'];\n  ed19DependentCost: GqlDependentCost;\n  epar?: Maybe<GqlDependentCost>;\n  eq: Scalars['U64']['output'];\n  exp: Scalars['U64']['output'];\n  expi: Scalars['U64']['output'];\n  flag: Scalars['U64']['output'];\n  gm: Scalars['U64']['output'];\n  gt: Scalars['U64']['output'];\n  gtf: Scalars['U64']['output'];\n  ji: Scalars['U64']['output'];\n  jmp: Scalars['U64']['output'];\n  jmpb: Scalars['U64']['output'];\n  jmpf: Scalars['U64']['output'];\n  jne: Scalars['U64']['output'];\n  jneb: Scalars['U64']['output'];\n  jnef: Scalars['U64']['output'];\n  jnei: Scalars['U64']['output'];\n  jnzb: Scalars['U64']['output'];\n  jnzf: Scalars['U64']['output'];\n  jnzi: Scalars['U64']['output'];\n  k256: GqlDependentCost;\n  lb: Scalars['U64']['output'];\n  ldc: GqlDependentCost;\n  log: Scalars['U64']['output'];\n  logd: GqlDependentCost;\n  lt: Scalars['U64']['output'];\n  lw: Scalars['U64']['output'];\n  mcl: GqlDependentCost;\n  mcli: GqlDependentCost;\n  mcp: GqlDependentCost;\n  mcpi: GqlDependentCost;\n  meq: GqlDependentCost;\n  mint: Scalars['U64']['output'];\n  mldv: Scalars['U64']['output'];\n  mlog: Scalars['U64']['output'];\n  modOp: Scalars['U64']['output'];\n  modi: Scalars['U64']['output'];\n  moveOp: Scalars['U64']['output'];\n  movi: Scalars['U64']['output'];\n  mroo: Scalars['U64']['output'];\n  mul: Scalars['U64']['output'];\n  muli: Scalars['U64']['output'];\n  newStoragePerByte: Scalars['U64']['output'];\n  noop: Scalars['U64']['output'];\n  not: Scalars['U64']['output'];\n  or: Scalars['U64']['output'];\n  ori: Scalars['U64']['output'];\n  poph: Scalars['U64']['output'];\n  popl: Scalars['U64']['output'];\n  pshh: Scalars['U64']['output'];\n  pshl: Scalars['U64']['output'];\n  ret: Scalars['U64']['output'];\n  retd: GqlDependentCost;\n  rvrt: Scalars['U64']['output'];\n  s256: GqlDependentCost;\n  sb: Scalars['U64']['output'];\n  scwq: GqlDependentCost;\n  sll: Scalars['U64']['output'];\n  slli: Scalars['U64']['output'];\n  smo: GqlDependentCost;\n  srl: Scalars['U64']['output'];\n  srli: Scalars['U64']['output'];\n  srw: Scalars['U64']['output'];\n  srwq: GqlDependentCost;\n  stateRoot: GqlDependentCost;\n  sub: Scalars['U64']['output'];\n  subi: Scalars['U64']['output'];\n  sw: Scalars['U64']['output'];\n  sww: Scalars['U64']['output'];\n  swwq: GqlDependentCost;\n  time: Scalars['U64']['output'];\n  tr: Scalars['U64']['output'];\n  tro: Scalars['U64']['output'];\n  version: GqlGasCostsVersion;\n  vmInitialization: GqlDependentCost;\n  wdam: Scalars['U64']['output'];\n  wdcm: Scalars['U64']['output'];\n  wddv: Scalars['U64']['output'];\n  wdmd: Scalars['U64']['output'];\n  wdml: Scalars['U64']['output'];\n  wdmm: Scalars['U64']['output'];\n  wdop: Scalars['U64']['output'];\n  wqam: Scalars['U64']['output'];\n  wqcm: Scalars['U64']['output'];\n  wqdv: Scalars['U64']['output'];\n  wqmd: Scalars['U64']['output'];\n  wqml: Scalars['U64']['output'];\n  wqmm: Scalars['U64']['output'];\n  wqop: Scalars['U64']['output'];\n  xor: Scalars['U64']['output'];\n  xori: Scalars['U64']['output'];\n};\n\nexport enum GqlGasCostsVersion {\n  V1 = 'V1'\n}\n\nexport type GqlGenesis = {\n  /**\n   * The chain configs define what consensus type to use, what settlement layer to use,\n   * rules of block validity, etc.\n   */\n  chainConfigHash: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all genesis coins. */\n  coinsRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of state, balances, contracts code hash of each contract. */\n  contractsRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all genesis messages. */\n  messagesRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all processed transaction ids. */\n  transactionsRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlHeader = {\n  /** Hash of the application header. */\n  applicationHash: Scalars['Bytes32']['output'];\n  /** The version of the consensus parameters used to create this block. */\n  consensusParametersVersion: Scalars['U32']['output'];\n  /** The layer 1 height of messages and events to include since the last layer 1 block number. */\n  daHeight: Scalars['U64']['output'];\n  /** Merkle root of inbox events in this block. */\n  eventInboxRoot: Scalars['Bytes32']['output'];\n  /** Fuel block height. */\n  height: Scalars['U32']['output'];\n  /** Hash of the header */\n  id: Scalars['BlockId']['output'];\n  /** Merkle root of message receipts in this block. */\n  messageOutboxRoot: Scalars['Bytes32']['output'];\n  /** Number of message receipts in this block. */\n  messageReceiptCount: Scalars['U32']['output'];\n  /** Merkle root of all previous block header hashes. */\n  prevRoot: Scalars['Bytes32']['output'];\n  /** The version of the state transition bytecode used to create this block. */\n  stateTransitionBytecodeVersion: Scalars['U32']['output'];\n  /** The block producer time. */\n  time: Scalars['Tai64Timestamp']['output'];\n  /** Number of transactions in this block. */\n  transactionsCount: Scalars['U16']['output'];\n  /** Merkle root of transactions. */\n  transactionsRoot: Scalars['Bytes32']['output'];\n  /** Transaction ID Commitment */\n  txIdCommitment?: Maybe<Scalars['Bytes32']['output']>;\n  /** Version of the header */\n  version: GqlHeaderVersion;\n};\n\nexport enum GqlHeaderVersion {\n  V1 = 'V1',\n  V2 = 'V2'\n}\n\nexport type GqlHeavyOperation = {\n  base: Scalars['U64']['output'];\n  gasPerUnit: Scalars['U64']['output'];\n};\n\nexport type GqlIndexationFlags = {\n  /** Is asset metadata indexation enabled */\n  assetMetadata: Scalars['Boolean']['output'];\n  /** Is balances indexation enabled */\n  balances: Scalars['Boolean']['output'];\n  /** Is coins to spend indexation enabled */\n  coinsToSpend: Scalars['Boolean']['output'];\n};\n\nexport type GqlInput = GqlInputCoin | GqlInputContract | GqlInputMessage;\n\nexport type GqlInputCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  owner: Scalars['Address']['output'];\n  predicate: Scalars['HexString']['output'];\n  predicateData: Scalars['HexString']['output'];\n  predicateGasUsed: Scalars['U64']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport type GqlInputContract = {\n  balanceRoot: Scalars['Bytes32']['output'];\n  contractId: Scalars['ContractId']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport type GqlInputMessage = {\n  amount: Scalars['U64']['output'];\n  data: Scalars['HexString']['output'];\n  nonce: Scalars['Nonce']['output'];\n  predicate: Scalars['HexString']['output'];\n  predicateData: Scalars['HexString']['output'];\n  predicateGasUsed: Scalars['U64']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport type GqlLatestGasPrice = {\n  blockHeight: Scalars['U32']['output'];\n  gasPrice: Scalars['U64']['output'];\n};\n\nexport type GqlLightOperation = {\n  base: Scalars['U64']['output'];\n  unitsPerGas: Scalars['U64']['output'];\n};\n\nexport type GqlMerkleProof = {\n  proofIndex: Scalars['U64']['output'];\n  proofSet: Array<Scalars['Bytes32']['output']>;\n};\n\nexport type GqlMessage = {\n  amount: Scalars['U64']['output'];\n  daHeight: Scalars['U64']['output'];\n  data: Scalars['HexString']['output'];\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport type GqlMessageCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  daHeight: Scalars['U64']['output'];\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport type GqlMessageConnection = {\n  /** A list of edges. */\n  edges: Array<GqlMessageEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlMessage>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlMessageEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlMessage;\n};\n\nexport type GqlMessageProof = {\n  amount: Scalars['U64']['output'];\n  blockProof: GqlMerkleProof;\n  commitBlockHeader: GqlHeader;\n  data: Scalars['HexString']['output'];\n  messageBlockHeader: GqlHeader;\n  messageProof: GqlMerkleProof;\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport enum GqlMessageState {\n  NotFound = 'NOT_FOUND',\n  Spent = 'SPENT',\n  Unspent = 'UNSPENT'\n}\n\nexport type GqlMessageStatus = {\n  state: GqlMessageState;\n};\n\nexport type GqlMutation = {\n  /**\n   * Resume execution of the VM instance after a breakpoint.\n   * Runs until the next breakpoint or until the transaction completes.\n   */\n  continueTx: GqlRunResult;\n  /**\n   * Execute a dry-run of multiple transactions using a fork of current state, no changes are committed.\n   * @deprecated This doesn't need to be a mutation. Use query of the same name instead.\n   */\n  dryRun: Array<GqlDryRunTransactionExecutionStatus>;\n  /** End debugger session. */\n  endSession: Scalars['Boolean']['output'];\n  /** Execute a single fuel-asm instruction. */\n  execute: Scalars['Boolean']['output'];\n  /**\n   * Sequentially produces `blocks_to_produce` blocks. The first block starts with\n   * `start_timestamp`. If the block production in the [`crate::service::Config`] is\n   * `Trigger::Interval { block_time }`, produces blocks with `block_time ` intervals between\n   * them. The `start_timestamp` is the timestamp in seconds.\n   */\n  produceBlocks: Scalars['U32']['output'];\n  /** Reset the VM instance to the initial state. */\n  reset: Scalars['Boolean']['output'];\n  /** Set a breakpoint for a VM instance. */\n  setBreakpoint: Scalars['Boolean']['output'];\n  /** Set single-stepping mode for the VM instance. */\n  setSingleStepping: Scalars['Boolean']['output'];\n  /**\n   * Initialize a new debugger session, returning its ID.\n   * A new VM instance is spawned for each session.\n   * The session is run in a separate database transaction,\n   * on top of the most recent node state.\n   */\n  startSession: Scalars['ID']['output'];\n  /**\n   * Run a single transaction in given session until it\n   * hits a breakpoint or completes.\n   */\n  startTx: GqlRunResult;\n  /**\n   * Submits transaction to the `TxPool`.\n   *\n   * Returns submitted transaction if the transaction is included in the `TxPool` without problems.\n   */\n  submit: GqlTransaction;\n};\n\n\nexport type GqlMutationContinueTxArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationDryRunArgs = {\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n  txs: Array<Scalars['HexString']['input']>;\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\nexport type GqlMutationEndSessionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationExecuteArgs = {\n  id: Scalars['ID']['input'];\n  op: Scalars['String']['input'];\n};\n\n\nexport type GqlMutationProduceBlocksArgs = {\n  blocksToProduce: Scalars['U32']['input'];\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']['input']>;\n};\n\n\nexport type GqlMutationResetArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationSetBreakpointArgs = {\n  breakpoint: GqlBreakpoint;\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationSetSingleSteppingArgs = {\n  enable: Scalars['Boolean']['input'];\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationStartTxArgs = {\n  id: Scalars['ID']['input'];\n  txJson: Scalars['String']['input'];\n};\n\n\nexport type GqlMutationSubmitArgs = {\n  estimatePredicates?: InputMaybe<Scalars['Boolean']['input']>;\n  tx: Scalars['HexString']['input'];\n};\n\nexport type GqlNodeInfo = {\n  indexation: GqlIndexationFlags;\n  maxDepth: Scalars['U64']['output'];\n  maxGas: Scalars['U64']['output'];\n  maxSize: Scalars['U64']['output'];\n  maxTx: Scalars['U64']['output'];\n  nodeVersion: Scalars['String']['output'];\n  peers: Array<GqlPeerInfo>;\n  txPoolStats: GqlTxPoolStats;\n  utxoValidation: Scalars['Boolean']['output'];\n  vmBacktrace: Scalars['Boolean']['output'];\n};\n\nexport type GqlOutput = GqlChangeOutput | GqlCoinOutput | GqlContractCreated | GqlContractOutput | GqlVariableOutput;\n\n/**\n * A separate `Breakpoint` type to be used as an output, as a single\n * type cannot act as both input and output type in async-graphql\n */\nexport type GqlOutputBreakpoint = {\n  contract: Scalars['ContractId']['output'];\n  pc: Scalars['U64']['output'];\n};\n\n/** Information about pagination in a connection */\nexport type GqlPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\nexport type GqlPeerInfo = {\n  /** The advertised multi-addrs that can be used to connect to this peer */\n  addresses: Array<Scalars['String']['output']>;\n  /** The internal fuel p2p reputation of this peer */\n  appScore: Scalars['Float']['output'];\n  /** The last reported height of the peer */\n  blockHeight?: Maybe<Scalars['U32']['output']>;\n  /** The self-reported version of the client the peer is using */\n  clientVersion?: Maybe<Scalars['String']['output']>;\n  /** The libp2p peer id */\n  id: Scalars['String']['output'];\n  /** The last heartbeat from this peer in unix epoch time ms */\n  lastHeartbeatMs: Scalars['U64']['output'];\n};\n\nexport type GqlPoAConsensus = {\n  /** Gets the signature of the block produced by `PoA` consensus. */\n  signature: Scalars['Signature']['output'];\n};\n\nexport type GqlPolicies = {\n  maturity?: Maybe<Scalars['U32']['output']>;\n  maxFee?: Maybe<Scalars['U64']['output']>;\n  tip?: Maybe<Scalars['U64']['output']>;\n  witnessLimit?: Maybe<Scalars['U64']['output']>;\n};\n\nexport type GqlPreconfirmationFailureStatus = {\n  reason: Scalars['String']['output'];\n  receipts?: Maybe<Array<GqlReceipt>>;\n  resolvedOutputs?: Maybe<Array<GqlResolvedOutput>>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction?: Maybe<GqlTransaction>;\n  transactionId: Scalars['TransactionId']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n};\n\nexport type GqlPreconfirmationSuccessStatus = {\n  receipts?: Maybe<Array<GqlReceipt>>;\n  resolvedOutputs?: Maybe<Array<GqlResolvedOutput>>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction?: Maybe<GqlTransaction>;\n  transactionId: Scalars['TransactionId']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n};\n\nexport type GqlPredicate = {\n  predicate: Scalars['HexString']['input'];\n  predicateAddress: Scalars['Address']['input'];\n  predicateData: Scalars['HexString']['input'];\n};\n\nexport type GqlPredicateParameters = {\n  maxGasPerPredicate: Scalars['U64']['output'];\n  maxMessageDataLength: Scalars['U64']['output'];\n  maxPredicateDataLength: Scalars['U64']['output'];\n  maxPredicateLength: Scalars['U64']['output'];\n  version: GqlPredicateParametersVersion;\n};\n\nexport enum GqlPredicateParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlProgramState = {\n  data: Scalars['HexString']['output'];\n  returnType: GqlReturnType;\n};\n\nexport type GqlQuery = {\n  /**\n   * Assembles the transaction based on the provided requirements.\n   * The return transaction contains:\n   * - Input coins to cover `required_balances`\n   * - Input coins to cover the fee of the transaction based on the gas price from `block_horizon`\n   * - `Change` or `Destroy` outputs for all assets from the inputs\n   * - `Variable` outputs in the case they are required during the execution\n   * - `Contract` inputs and outputs in the case they are required during the execution\n   * - Reserved witness slots for signed coins filled with `64` zeroes\n   * - Set script gas limit(unless `script` is empty)\n   * - Estimated predicates, if `estimate_predicates == true`\n   *\n   * Returns an error if:\n   * - The number of required balances exceeds the maximum number of inputs allowed.\n   * - The fee address index is out of bounds.\n   * - The same asset has multiple change policies(either the receiver of\n   * the change is different, or one of the policies states about the destruction\n   * of the token while the other does not). The `Change` output from the transaction\n   * also count as a `ChangePolicy`.\n   * - The number of excluded coin IDs exceeds the maximum number of inputs allowed.\n   * - Required assets have multiple entries.\n   * - If accounts don't have sufficient amounts to cover the transaction requirements in assets.\n   * - If a constructed transaction breaks the rules defined by consensus parameters.\n   */\n  assembleTx: GqlAssembleTransactionResult;\n  assetDetails: GqlAssetInfoDetails;\n  balance: GqlBalance;\n  balances: GqlBalanceConnection;\n  blob?: Maybe<GqlBlob>;\n  block?: Maybe<GqlBlock>;\n  blocks: GqlBlockConnection;\n  chain: GqlChainInfo;\n  /** Gets the coin by `utxo_id`. */\n  coin?: Maybe<GqlCoin>;\n  /** Gets all unspent coins of some `owner` maybe filtered with by `asset_id` per page. */\n  coins: GqlCoinConnection;\n  /**\n   * For each `query_per_asset`, get some spendable coins(of asset specified by the query) owned by\n   * `owner` that add up at least the query amount. The returned coins can be spent.\n   * The number of coins is optimized to prevent dust accumulation.\n   *\n   * The query supports excluding and maximum the number of coins.\n   *\n   * Returns:\n   * The list of spendable coins per asset from the query. The length of the result is\n   * the same as the length of `query_per_asset`. The ordering of assets and `query_per_asset`\n   * is the same.\n   */\n  coinsToSpend: Array<Array<GqlCoinType>>;\n  consensusParameters: GqlConsensusParameters;\n  contract?: Maybe<GqlContract>;\n  contractBalance: GqlContractBalance;\n  /**\n   * Get balance values for a contract at a specific block height.\n   * Use the latest block height if not provided.\n   * Requires historical execution config to be enabled.\n   */\n  contractBalanceValues: Array<GqlContractBalance>;\n  contractBalances: GqlContractBalanceConnection;\n  /**\n   * Get storage slot values for a contract at a specific block height.\n   * Use the latest block height if not provided.\n   * Requires historical execution config to be enabled.\n   */\n  contractSlotValues: Array<GqlStorageSlot>;\n  daCompressedBlock?: Maybe<GqlDaCompressedBlock>;\n  /** Execute a dry-run of multiple transactions using a fork of current state, no changes are committed. */\n  dryRun: Array<GqlDryRunTransactionExecutionStatus>;\n  /**\n   * Execute a dry-run of multiple transactions using a fork of current state, no changes are committed.\n   * Also records accesses, so the execution can be replicated locally.\n   */\n  dryRunRecordStorageReads: GqlDryRunStorageReads;\n  estimateGasPrice: GqlEstimateGasPrice;\n  /** Estimate the predicate gas for the provided transaction */\n  estimatePredicates: GqlTransaction;\n  /** Returns true when the GraphQL API is serving requests. */\n  health: Scalars['Boolean']['output'];\n  latestGasPrice: GqlLatestGasPrice;\n  /** Read read a range of memory bytes. */\n  memory: Scalars['String']['output'];\n  message?: Maybe<GqlMessage>;\n  messageProof: GqlMessageProof;\n  messageStatus: GqlMessageStatus;\n  messages: GqlMessageConnection;\n  nodeInfo: GqlNodeInfo;\n  /** Read register value by index. */\n  register: Scalars['U64']['output'];\n  relayedTransactionStatus?: Maybe<GqlRelayedTransactionStatus>;\n  stateTransitionBytecodeByRoot: GqlStateTransitionBytecode;\n  stateTransitionBytecodeByVersion?: Maybe<GqlStateTransitionBytecode>;\n  /** Get execution trace for an already-executed block. */\n  storageReadReplay: Array<GqlStorageReadReplayEvent>;\n  transaction?: Maybe<GqlTransaction>;\n  transactions: GqlTransactionConnection;\n  transactionsByOwner: GqlTransactionConnection;\n};\n\n\nexport type GqlQueryAssembleTxArgs = {\n  blockHorizon: Scalars['U32']['input'];\n  estimatePredicates?: InputMaybe<Scalars['Boolean']['input']>;\n  excludeInput?: InputMaybe<GqlExcludeInput>;\n  feeAddressIndex: Scalars['U16']['input'];\n  requiredBalances: Array<GqlRequiredBalance>;\n  reserveGas?: InputMaybe<Scalars['U64']['input']>;\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryAssetDetailsArgs = {\n  id: Scalars['AssetId']['input'];\n};\n\n\nexport type GqlQueryBalanceArgs = {\n  assetId: Scalars['AssetId']['input'];\n  owner: Scalars['Address']['input'];\n};\n\n\nexport type GqlQueryBalancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryBlobArgs = {\n  id: Scalars['BlobId']['input'];\n};\n\n\nexport type GqlQueryBlockArgs = {\n  height?: InputMaybe<Scalars['U32']['input']>;\n  id?: InputMaybe<Scalars['BlockId']['input']>;\n};\n\n\nexport type GqlQueryBlocksArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryCoinArgs = {\n  utxoId: Scalars['UtxoId']['input'];\n};\n\n\nexport type GqlQueryCoinsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlCoinFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryCoinsToSpendArgs = {\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n  owner: Scalars['Address']['input'];\n  queryPerAsset: Array<GqlSpendQueryElementInput>;\n};\n\n\nexport type GqlQueryConsensusParametersArgs = {\n  version: Scalars['Int']['input'];\n};\n\n\nexport type GqlQueryContractArgs = {\n  id: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalanceArgs = {\n  asset: Scalars['AssetId']['input'];\n  contract: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalanceValuesArgs = {\n  assets: Array<Scalars['AssetId']['input']>;\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n  contractId: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlContractBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryContractSlotValuesArgs = {\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n  contractId: Scalars['ContractId']['input'];\n  storageSlots: Array<Scalars['Bytes32']['input']>;\n};\n\n\nexport type GqlQueryDaCompressedBlockArgs = {\n  height: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryDryRunArgs = {\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n  txs: Array<Scalars['HexString']['input']>;\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\nexport type GqlQueryDryRunRecordStorageReadsArgs = {\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n  txs: Array<Scalars['HexString']['input']>;\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\nexport type GqlQueryEstimateGasPriceArgs = {\n  blockHorizon?: InputMaybe<Scalars['U32']['input']>;\n};\n\n\nexport type GqlQueryEstimatePredicatesArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryMemoryArgs = {\n  id: Scalars['ID']['input'];\n  size: Scalars['U32']['input'];\n  start: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryMessageArgs = {\n  nonce: Scalars['Nonce']['input'];\n};\n\n\nexport type GqlQueryMessageProofArgs = {\n  commitBlockHeight?: InputMaybe<Scalars['U32']['input']>;\n  commitBlockId?: InputMaybe<Scalars['BlockId']['input']>;\n  nonce: Scalars['Nonce']['input'];\n  transactionId: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlQueryMessageStatusArgs = {\n  nonce: Scalars['Nonce']['input'];\n};\n\n\nexport type GqlQueryMessagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  owner?: InputMaybe<Scalars['Address']['input']>;\n};\n\n\nexport type GqlQueryRegisterArgs = {\n  id: Scalars['ID']['input'];\n  register: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryRelayedTransactionStatusArgs = {\n  id: Scalars['RelayedTransactionId']['input'];\n};\n\n\nexport type GqlQueryStateTransitionBytecodeByRootArgs = {\n  root: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryStateTransitionBytecodeByVersionArgs = {\n  version: Scalars['Int']['input'];\n};\n\n\nexport type GqlQueryStorageReadReplayArgs = {\n  height: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryTransactionArgs = {\n  id: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlQueryTransactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryTransactionsByOwnerArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlReceipt = {\n  amount?: Maybe<Scalars['U64']['output']>;\n  assetId?: Maybe<Scalars['AssetId']['output']>;\n  /** Set in the case of a Panic receipt to indicate a missing contract input id */\n  contractId?: Maybe<Scalars['ContractId']['output']>;\n  data?: Maybe<Scalars['HexString']['output']>;\n  digest?: Maybe<Scalars['Bytes32']['output']>;\n  gas?: Maybe<Scalars['U64']['output']>;\n  gasUsed?: Maybe<Scalars['U64']['output']>;\n  id?: Maybe<Scalars['ContractId']['output']>;\n  is?: Maybe<Scalars['U64']['output']>;\n  len?: Maybe<Scalars['U64']['output']>;\n  nonce?: Maybe<Scalars['Nonce']['output']>;\n  param1?: Maybe<Scalars['U64']['output']>;\n  param2?: Maybe<Scalars['U64']['output']>;\n  pc?: Maybe<Scalars['U64']['output']>;\n  ptr?: Maybe<Scalars['U64']['output']>;\n  ra?: Maybe<Scalars['U64']['output']>;\n  rb?: Maybe<Scalars['U64']['output']>;\n  rc?: Maybe<Scalars['U64']['output']>;\n  rd?: Maybe<Scalars['U64']['output']>;\n  reason?: Maybe<Scalars['U64']['output']>;\n  receiptType: GqlReceiptType;\n  recipient?: Maybe<Scalars['Address']['output']>;\n  result?: Maybe<Scalars['U64']['output']>;\n  sender?: Maybe<Scalars['Address']['output']>;\n  subId?: Maybe<Scalars['Bytes32']['output']>;\n  to?: Maybe<Scalars['ContractId']['output']>;\n  toAddress?: Maybe<Scalars['Address']['output']>;\n  val?: Maybe<Scalars['U64']['output']>;\n};\n\nexport enum GqlReceiptType {\n  Burn = 'BURN',\n  Call = 'CALL',\n  Log = 'LOG',\n  LogData = 'LOG_DATA',\n  MessageOut = 'MESSAGE_OUT',\n  Mint = 'MINT',\n  Panic = 'PANIC',\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT',\n  ScriptResult = 'SCRIPT_RESULT',\n  Transfer = 'TRANSFER',\n  TransferOut = 'TRANSFER_OUT'\n}\n\nexport type GqlRelayedTransactionFailed = {\n  blockHeight: Scalars['U32']['output'];\n  failure: Scalars['String']['output'];\n};\n\nexport type GqlRelayedTransactionStatus = GqlRelayedTransactionFailed;\n\nexport type GqlRequiredBalance = {\n  account: GqlAccount;\n  amount: Scalars['U64']['input'];\n  assetId: Scalars['AssetId']['input'];\n  changePolicy: GqlChangePolicy;\n};\n\nexport type GqlResolvedOutput = {\n  output: GqlOutput;\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport enum GqlReturnType {\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT'\n}\n\nexport type GqlRunResult = {\n  breakpoint?: Maybe<GqlOutputBreakpoint>;\n  jsonReceipts: Array<Scalars['String']['output']>;\n  state: GqlRunState;\n};\n\nexport enum GqlRunState {\n  /** Stopped on a breakpoint */\n  Breakpoint = 'BREAKPOINT',\n  /** All breakpoints have been processed, and the program has terminated */\n  Completed = 'COMPLETED'\n}\n\nexport type GqlScriptParameters = {\n  maxScriptDataLength: Scalars['U64']['output'];\n  maxScriptLength: Scalars['U64']['output'];\n  version: GqlScriptParametersVersion;\n};\n\nexport enum GqlScriptParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlSpendQueryElementInput = {\n  /** If true, returns available coins instead of failing when the requested amount is unavailable. */\n  allowPartial?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Target amount for the query. */\n  amount: Scalars['U128']['input'];\n  /** Identifier of the asset to spend. */\n  assetId: Scalars['AssetId']['input'];\n  /** The maximum number of currencies for selection. */\n  max?: InputMaybe<Scalars['U16']['input']>;\n};\n\nexport type GqlSqueezedOutStatus = {\n  reason: Scalars['String']['output'];\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlStateTransitionBytecode = {\n  bytecode: GqlUploadedBytecode;\n  root: Scalars['HexString']['output'];\n};\n\nexport type GqlStateTransitionPurpose = {\n  root: Scalars['Bytes32']['output'];\n};\n\nexport type GqlStorageReadReplayEvent = {\n  column: Scalars['U32']['output'];\n  key: Scalars['HexString']['output'];\n  value?: Maybe<Scalars['HexString']['output']>;\n};\n\nexport type GqlStorageSlot = {\n  key: Scalars['Bytes32']['output'];\n  value: Scalars['HexString']['output'];\n};\n\nexport type GqlSubmittedStatus = {\n  time: Scalars['Tai64Timestamp']['output'];\n};\n\nexport type GqlSubscription = {\n  contractStorageBalances: GqlContractBalance;\n  contractStorageSlots: GqlStorageSlot;\n  /**\n   * Returns a stream of status updates for the given transaction id.\n   * If the current status is [`TransactionStatus::Success`], [`TransactionStatus::Failed`],\n   * or [`TransactionStatus::SqueezedOut`] the stream will return that and end immediately.\n   * Other, intermediate statuses will also be returned but the stream will remain active\n   * and wait for a future updates.\n   *\n   * This stream will wait forever so it's advised to use within a timeout.\n   *\n   * It is possible for the stream to miss an update if it is polled slower\n   * then the updates arrive. In such a case the stream will close without\n   * a status. If this occurs the stream can simply be restarted to return\n   * the latest status.\n   */\n  statusChange: GqlTransactionStatus;\n  /** Submits transaction to the `TxPool` and await either success or failure. */\n  submitAndAwait: GqlTransactionStatus;\n  /**\n   * Submits the transaction to the `TxPool` and returns a stream of events.\n   * Compared to the `submitAndAwait`, the stream also contains\n   * `SubmittedStatus` and potentially preconfirmation as an intermediate state.\n   */\n  submitAndAwaitStatus: GqlTransactionStatus;\n};\n\n\nexport type GqlSubscriptionContractStorageBalancesArgs = {\n  contractId: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlSubscriptionContractStorageSlotsArgs = {\n  contractId: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlSubscriptionStatusChangeArgs = {\n  id: Scalars['TransactionId']['input'];\n  includePreconfirmation?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitArgs = {\n  estimatePredicates?: InputMaybe<Scalars['Boolean']['input']>;\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitStatusArgs = {\n  estimatePredicates?: InputMaybe<Scalars['Boolean']['input']>;\n  includePreconfirmation?: InputMaybe<Scalars['Boolean']['input']>;\n  tx: Scalars['HexString']['input'];\n};\n\nexport type GqlSuccessStatus = {\n  block: GqlBlock;\n  blockHeight: Scalars['U32']['output'];\n  programState?: Maybe<GqlProgramState>;\n  receipts: Array<GqlReceipt>;\n  time: Scalars['Tai64Timestamp']['output'];\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction: GqlTransaction;\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlTransaction = {\n  blobId?: Maybe<Scalars['BlobId']['output']>;\n  bytecodeRoot?: Maybe<Scalars['Bytes32']['output']>;\n  bytecodeWitnessIndex?: Maybe<Scalars['U16']['output']>;\n  id: Scalars['TransactionId']['output'];\n  inputAssetIds?: Maybe<Array<Scalars['AssetId']['output']>>;\n  inputContract?: Maybe<GqlInputContract>;\n  inputContracts?: Maybe<Array<Scalars['ContractId']['output']>>;\n  inputs?: Maybe<Array<GqlInput>>;\n  isBlob: Scalars['Boolean']['output'];\n  isCreate: Scalars['Boolean']['output'];\n  isMint: Scalars['Boolean']['output'];\n  isScript: Scalars['Boolean']['output'];\n  isUpgrade: Scalars['Boolean']['output'];\n  isUpload: Scalars['Boolean']['output'];\n  maturity?: Maybe<Scalars['U32']['output']>;\n  mintAmount?: Maybe<Scalars['U64']['output']>;\n  mintAssetId?: Maybe<Scalars['AssetId']['output']>;\n  mintGasPrice?: Maybe<Scalars['U64']['output']>;\n  outputContract?: Maybe<GqlContractOutput>;\n  outputs: Array<GqlOutput>;\n  policies?: Maybe<GqlPolicies>;\n  proofSet?: Maybe<Array<Scalars['Bytes32']['output']>>;\n  /** Return the transaction bytes using canonical encoding */\n  rawPayload: Scalars['HexString']['output'];\n  receiptsRoot?: Maybe<Scalars['Bytes32']['output']>;\n  salt?: Maybe<Scalars['Salt']['output']>;\n  script?: Maybe<Scalars['HexString']['output']>;\n  scriptData?: Maybe<Scalars['HexString']['output']>;\n  scriptGasLimit?: Maybe<Scalars['U64']['output']>;\n  status?: Maybe<GqlTransactionStatus>;\n  storageSlots?: Maybe<Array<Scalars['HexString']['output']>>;\n  subsectionIndex?: Maybe<Scalars['U16']['output']>;\n  subsectionsNumber?: Maybe<Scalars['U16']['output']>;\n  txPointer?: Maybe<Scalars['TxPointer']['output']>;\n  upgradePurpose?: Maybe<GqlUpgradePurpose>;\n  witnesses?: Maybe<Array<Scalars['HexString']['output']>>;\n};\n\n\nexport type GqlTransactionStatusArgs = {\n  includePreconfirmation?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\nexport type GqlTransactionConnection = {\n  /** A list of edges. */\n  edges: Array<GqlTransactionEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlTransaction>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlTransactionEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlTransaction;\n};\n\nexport type GqlTransactionStatus = GqlFailureStatus | GqlPreconfirmationFailureStatus | GqlPreconfirmationSuccessStatus | GqlSqueezedOutStatus | GqlSubmittedStatus | GqlSuccessStatus;\n\nexport type GqlTxParameters = {\n  maxBytecodeSubsections: Scalars['U16']['output'];\n  maxGasPerTx: Scalars['U64']['output'];\n  maxInputs: Scalars['U16']['output'];\n  maxOutputs: Scalars['U16']['output'];\n  maxSize: Scalars['U64']['output'];\n  maxWitnesses: Scalars['U32']['output'];\n  version: GqlTxParametersVersion;\n};\n\nexport enum GqlTxParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlTxPoolStats = {\n  /** The total gas of the transactions in the pool */\n  totalGas: Scalars['U64']['output'];\n  /** The total size of the transactions in the pool */\n  totalSize: Scalars['U64']['output'];\n  /** The number of transactions in the pool */\n  txCount: Scalars['U64']['output'];\n};\n\nexport type GqlUpgradePurpose = GqlConsensusParametersPurpose | GqlStateTransitionPurpose;\n\nexport type GqlUploadedBytecode = {\n  /** Combined bytecode of all uploaded subsections. */\n  bytecode: Scalars['HexString']['output'];\n  /** Indicates if the bytecode upload is complete. */\n  completed: Scalars['Boolean']['output'];\n  /** Number of uploaded subsections (if incomplete). */\n  uploadedSubsectionsNumber?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type GqlVariableOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\nexport type GqlInputCoinFragment = { utxoId: string, owner: string, amount: string, assetId: string, txPointer: string, predicateGasUsed: string, predicate: string, predicateData: string, type: 'InputCoin', coinWitnessIndex: string };\n\nexport type GqlInputMessageFragment = { sender: string, recipient: string, amount: string, nonce: string, predicateGasUsed: string, data: string, predicate: string, predicateData: string, type: 'InputMessage', messageWitnessIndex: string };\n\nexport type GqlInputContractFragment = { utxoId: string, balanceRoot: string, stateRoot: string, txPointer: string, contractId: string, type: 'InputContract' };\n\nexport type GqlOutputCoinFragment = { to: string, amount: string, assetId: string, type: 'CoinOutput' };\n\nexport type GqlOutputContractFragment = { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' };\n\nexport type GqlOutputChangeFragment = { to: string, amount: string, assetId: string, type: 'ChangeOutput' };\n\nexport type GqlOutputVariableFragment = { to: string, amount: string, assetId: string, type: 'VariableOutput' };\n\nexport type GqlOutputContractCreatedFragment = { contract: string, stateRoot: string, type: 'ContractCreated' };\n\nexport type GqlSubmittedStatusFragment = { time: string, type: 'SubmittedStatus' };\n\nexport type GqlSuccessStatusFragment = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlSuccessStatusWithBlockIdFragment = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlFailureStatusFragment = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlFailureStatusWithBlockIdFragment = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlSqueezedOutStatusFragment = { reason: string, type: 'SqueezedOutStatus' };\n\nexport type GqlPreconfirmationSuccessStatusFragment = { totalGas: string, totalFee: string, type: 'PreconfirmationSuccessStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null };\n\nexport type GqlPreconfirmationFailureStatusFragment = { reason: string, totalGas: string, totalFee: string, type: 'PreconfirmationFailureStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null };\n\ntype GqlTransactionStatusFragment_FailureStatus = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\ntype GqlTransactionStatusFragment_PreconfirmationFailureStatus = {};\n\ntype GqlTransactionStatusFragment_PreconfirmationSuccessStatus = {};\n\ntype GqlTransactionStatusFragment_SqueezedOutStatus = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusFragment_SubmittedStatus = { time: string, type: 'SubmittedStatus' };\n\ntype GqlTransactionStatusFragment_SuccessStatus = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlTransactionStatusFragment = GqlTransactionStatusFragment_FailureStatus | GqlTransactionStatusFragment_PreconfirmationFailureStatus | GqlTransactionStatusFragment_PreconfirmationSuccessStatus | GqlTransactionStatusFragment_SqueezedOutStatus | GqlTransactionStatusFragment_SubmittedStatus | GqlTransactionStatusFragment_SuccessStatus;\n\nexport type GqlMalleableTransactionFieldsFragment = { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> };\n\ntype GqlTransactionStatusSubscriptionFragment_FailureStatus = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\ntype GqlTransactionStatusSubscriptionFragment_PreconfirmationFailureStatus = { reason: string, totalGas: string, totalFee: string, type: 'PreconfirmationFailureStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null };\n\ntype GqlTransactionStatusSubscriptionFragment_PreconfirmationSuccessStatus = { totalGas: string, totalFee: string, type: 'PreconfirmationSuccessStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null };\n\ntype GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusSubscriptionFragment_SubmittedStatus = { time: string, type: 'SubmittedStatus' };\n\ntype GqlTransactionStatusSubscriptionFragment_SuccessStatus = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlTransactionStatusSubscriptionFragment = GqlTransactionStatusSubscriptionFragment_FailureStatus | GqlTransactionStatusSubscriptionFragment_PreconfirmationFailureStatus | GqlTransactionStatusSubscriptionFragment_PreconfirmationSuccessStatus | GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus | GqlTransactionStatusSubscriptionFragment_SubmittedStatus | GqlTransactionStatusSubscriptionFragment_SuccessStatus;\n\nexport type GqlTransactionFragment = { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | {} | null };\n\nexport type GqlTransactionRawPayloadFragment = { id: string, rawPayload: string };\n\ntype GqlInputEstimatePredicatesFragment_InputCoin = { predicateGasUsed: string };\n\ntype GqlInputEstimatePredicatesFragment_InputContract = {};\n\ntype GqlInputEstimatePredicatesFragment_InputMessage = { predicateGasUsed: string };\n\nexport type GqlInputEstimatePredicatesFragment = GqlInputEstimatePredicatesFragment_InputCoin | GqlInputEstimatePredicatesFragment_InputContract | GqlInputEstimatePredicatesFragment_InputMessage;\n\nexport type GqlTransactionEstimatePredicatesFragment = { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null };\n\nexport type GqlDryRunFailureStatusFragment = { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunSuccessStatusFragment = { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunFailureAssembleTxFragment = { reason: string, type: 'DryRunFailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlDryRunSuccessAssembleTxFragment = { type: 'DryRunSuccessStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlReceiptFragment = { id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null };\n\ntype GqlDryRunTransactionStatusFragment_DryRunFailureStatus = { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\ntype GqlDryRunTransactionStatusFragment_DryRunSuccessStatus = { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunTransactionStatusFragment = GqlDryRunTransactionStatusFragment_DryRunFailureStatus | GqlDryRunTransactionStatusFragment_DryRunSuccessStatus;\n\nexport type GqlDryRunTransactionExecutionStatusFragment = { id: string, status: { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null } | { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlBlockFragment = { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> };\n\nexport type GqlCoinFragment = { utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' };\n\nexport type GqlMessageCoinFragment = { sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string, type: 'MessageCoin' };\n\nexport type GqlMessageFragment = { amount: string, sender: string, recipient: string, data: string, daHeight: string };\n\nexport type GqlGetMessageFragment = { nonce: string, amount: string, sender: string, recipient: string, data: string, daHeight: string };\n\nexport type GqlMessageProofFragment = { sender: string, recipient: string, amount: string, data: string, messageProof: { proofSet: Array<string>, proofIndex: string }, blockProof: { proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string }, commitBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string } };\n\nexport type GqlTxParametersFragment = { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string };\n\nexport type GqlPredicateParametersFragment = { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string };\n\nexport type GqlScriptParametersFragment = { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string };\n\nexport type GqlContractParametersFragment = { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string };\n\nexport type GqlFeeParametersFragment = { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string };\n\ntype GqlDependentCostFragment_HeavyOperation = { base: string, gasPerUnit: string, type: 'HeavyOperation' };\n\ntype GqlDependentCostFragment_LightOperation = { base: string, unitsPerGas: string, type: 'LightOperation' };\n\nexport type GqlDependentCostFragment = GqlDependentCostFragment_HeavyOperation | GqlDependentCostFragment_LightOperation;\n\nexport type GqlGasCostsFragment = { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } };\n\nexport type GqlConsensusParametersFragment = { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } };\n\nexport type GqlChainInfoFragment = { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } }, latestBlock: { header: { consensusParametersVersion: string } } };\n\nexport type GqlContractBalanceFragment = { contract: string, amount: string, assetId: string };\n\nexport type GqlPageInfoFragment = { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null };\n\nexport type GqlGetVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetVersionQuery = { nodeInfo: { nodeVersion: string } };\n\nexport type GqlNodeInfoFragment = { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string, indexation: { balances: boolean, coinsToSpend: boolean, assetMetadata: boolean } };\n\nexport type GqlRelayedTransactionStatusFragment = { blockHeight: string, failure: string };\n\nexport type GqlGetNodeInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetNodeInfoQuery = { nodeInfo: { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string, indexation: { balances: boolean, coinsToSpend: boolean, assetMetadata: boolean } } };\n\nexport type GqlGetChainQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainQuery = { chain: { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } }, latestBlock: { header: { consensusParametersVersion: string } } } };\n\nexport type GqlGetChainAndNodeInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainAndNodeInfoQuery = { chain: { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } }, latestBlock: { header: { consensusParametersVersion: string } } }, nodeInfo: { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string, indexation: { balances: boolean, coinsToSpend: boolean, assetMetadata: boolean } } };\n\nexport type GqlGetTransactionQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlGetTransactionQuery = { transaction?: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | {} | null } | null };\n\nexport type GqlGetTransactionWithReceiptsQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlGetTransactionWithReceiptsQuery = { transaction?: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, totalGas: string, totalFee: string, type: 'PreconfirmationFailureStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null } | { totalGas: string, totalFee: string, type: 'PreconfirmationSuccessStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } | null };\n\nexport type GqlGetTransactionsQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetTransactionsQuery = { transactions: { edges: Array<{ node: { rawPayload: string } }>, pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null } } };\n\nexport type GqlGetTransactionsByOwnerQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetTransactionsByOwnerQuery = { transactionsByOwner: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | {} | null } }> } };\n\nexport type GqlEstimatePredicatesQueryVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlEstimatePredicatesQuery = { estimatePredicates: { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null } };\n\nexport type GqlEstimatePredicatesAndGasPriceQueryVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n  blockHorizon: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlEstimatePredicatesAndGasPriceQuery = { estimatePredicates: { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null }, estimateGasPrice: { gasPrice: string } };\n\nexport type GqlGetLatestBlockQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestBlockQuery = { chain: { latestBlock: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } } };\n\nexport type GqlGetLatestBlockHeightQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestBlockHeightQuery = { chain: { latestBlock: { height: string } } };\n\nexport type GqlGetBlockQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']['input']>;\n  height?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetBlockQuery = { block?: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } | null };\n\nexport type GqlGetBlockWithTransactionsQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']['input']>;\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetBlockWithTransactionsQuery = { block?: { id: string, height: string, transactions: Array<{ id: string, rawPayload: string }>, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string } } | null };\n\nexport type GqlGetBlocksQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetBlocksQuery = { blocks: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } }> } };\n\nexport type GqlGetCoinQueryVariables = Exact<{\n  coinId: Scalars['UtxoId']['input'];\n}>;\n\n\nexport type GqlGetCoinQuery = { coin?: { owner: string, utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } | null };\n\nexport type GqlGetCoinsQueryVariables = Exact<{\n  filter: GqlCoinFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetCoinsQuery = { coins: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } }> } };\n\nexport type GqlGetCoinsToSpendQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  queryPerAsset: Array<GqlSpendQueryElementInput> | GqlSpendQueryElementInput;\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n}>;\n\n\nexport type GqlGetCoinsToSpendQuery = { coinsToSpend: Array<Array<{ utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } | { sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string, type: 'MessageCoin' }>> };\n\nexport type GqlGetContractQueryVariables = Exact<{\n  contractId: Scalars['ContractId']['input'];\n}>;\n\n\nexport type GqlGetContractQuery = { contract?: { bytecode: string, id: string } | null };\n\nexport type GqlGetContractBalanceQueryVariables = Exact<{\n  contract: Scalars['ContractId']['input'];\n  asset: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetContractBalanceQuery = { contractBalance: { contract: string, amount: string, assetId: string } };\n\nexport type GqlGetBalanceQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  assetId: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetBalanceQuery = { balance: { amount: string } };\n\nexport type GqlGetBalanceV2QueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  assetId: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetBalanceV2Query = { balance: { amountU128: string } };\n\nexport type GqlGetLatestGasPriceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestGasPriceQuery = { latestGasPrice: { gasPrice: string } };\n\nexport type GqlEstimateGasPriceQueryVariables = Exact<{\n  blockHorizon: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlEstimateGasPriceQuery = { estimateGasPrice: { gasPrice: string } };\n\nexport type GqlGetBalancesQueryVariables = Exact<{\n  filter: GqlBalanceFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetBalancesQuery = { balances: { edges: Array<{ node: { assetId: string, amount: string } }> } };\n\nexport type GqlGetBalancesV2QueryVariables = Exact<{\n  filter: GqlBalanceFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  supportsPagination: Scalars['Boolean']['input'];\n}>;\n\n\nexport type GqlGetBalancesV2Query = { balances: { pageInfo?: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { assetId: string, amountU128: string } }> } };\n\nexport type GqlGetMessagesQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetMessagesQuery = { messages: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { nonce: string, amount: string, sender: string, recipient: string, data: string, daHeight: string } }> } };\n\nexport type GqlDaCompressedBlockQueryVariables = Exact<{\n  height: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlDaCompressedBlockQuery = { daCompressedBlock?: { bytes: string } | null };\n\nexport type GqlGetMessageProofQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n  nonce: Scalars['Nonce']['input'];\n  commitBlockId?: InputMaybe<Scalars['BlockId']['input']>;\n  commitBlockHeight?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetMessageProofQuery = { messageProof: { sender: string, recipient: string, amount: string, data: string, messageProof: { proofSet: Array<string>, proofIndex: string }, blockProof: { proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string }, commitBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string } } };\n\nexport type GqlGetMessageStatusQueryVariables = Exact<{\n  nonce: Scalars['Nonce']['input'];\n}>;\n\n\nexport type GqlGetMessageStatusQuery = { messageStatus: { state: GqlMessageState } };\n\nexport type GqlGetRelayedTransactionStatusQueryVariables = Exact<{\n  relayedTransactionId: Scalars['RelayedTransactionId']['input'];\n}>;\n\n\nexport type GqlGetRelayedTransactionStatusQuery = { relayedTransactionStatus?: { blockHeight: string, failure: string } | null };\n\nexport type GqlGetAssetDetailsQueryVariables = Exact<{\n  assetId: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetAssetDetailsQuery = { assetDetails: { subId: string, contractId: string, totalSupply: string } };\n\nexport type GqlAssembleTxQueryVariables = Exact<{\n  tx: Scalars['HexString']['input'];\n  blockHorizon: Scalars['U32']['input'];\n  requiredBalances: Array<GqlRequiredBalance> | GqlRequiredBalance;\n  feeAddressIndex: Scalars['U16']['input'];\n  excludeInput?: InputMaybe<GqlExcludeInput>;\n  estimatePredicates?: InputMaybe<Scalars['Boolean']['input']>;\n  reserveGas?: InputMaybe<Scalars['U64']['input']>;\n}>;\n\n\nexport type GqlAssembleTxQuery = { assembleTx: { gasPrice: string, transaction: { id: string, witnesses?: Array<string> | null, scriptGasLimit?: string | null, inputs?: Array<{ utxoId: string, owner: string, amount: string, assetId: string, txPointer: string, predicateGasUsed: string, predicate: string, predicateData: string, type: 'InputCoin', coinWitnessIndex: string } | { utxoId: string, balanceRoot: string, stateRoot: string, txPointer: string, contractId: string, type: 'InputContract' } | { sender: string, recipient: string, amount: string, nonce: string, predicateGasUsed: string, data: string, predicate: string, predicateData: string, type: 'InputMessage', messageWitnessIndex: string }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }>, policies?: { tip?: string | null, witnessLimit?: string | null, maturity?: string | null, maxFee?: string | null } | null }, status: { reason: string, type: 'DryRunFailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { type: 'DryRunSuccessStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } } };\n\nexport type GqlDryRunQueryVariables = Exact<{\n  encodedTransactions: Array<Scalars['HexString']['input']> | Scalars['HexString']['input'];\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n}>;\n\n\nexport type GqlDryRunQuery = { dryRun: Array<{ id: string, status: { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null } | { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> }> };\n\nexport type GqlSubmitMutationVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlSubmitMutation = { submit: { id: string } };\n\nexport type GqlProduceBlocksMutationVariables = Exact<{\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']['input']>;\n  blocksToProduce: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlProduceBlocksMutation = { produceBlocks: string };\n\nexport type GqlGetMessageByNonceQueryVariables = Exact<{\n  nonce: Scalars['Nonce']['input'];\n}>;\n\n\nexport type GqlGetMessageByNonceQuery = { message?: { amount: string, sender: string, recipient: string, data: string, daHeight: string } | null };\n\nexport type GqlIsUserAccountQueryVariables = Exact<{\n  blobId: Scalars['BlobId']['input'];\n  contractId: Scalars['ContractId']['input'];\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlIsUserAccountQuery = { blob?: { id: any } | null, contract?: { id: string } | null, transaction?: { id: string } | null };\n\nexport type GqlGetConsensusParametersVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetConsensusParametersVersionQuery = { chain: { latestBlock: { header: { consensusParametersVersion: string } } } };\n\nexport type GqlSubmitAndAwaitStatusSubscriptionVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n  estimatePredicates?: InputMaybe<Scalars['Boolean']['input']>;\n  includePreConfirmation?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GqlSubmitAndAwaitStatusSubscription = { submitAndAwaitStatus: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, totalGas: string, totalFee: string, type: 'PreconfirmationFailureStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null } | { totalGas: string, totalFee: string, type: 'PreconfirmationSuccessStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } };\n\nexport type GqlStatusChangeSubscriptionVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n  includePreConfirmation?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GqlStatusChangeSubscription = { statusChange: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, totalGas: string, totalFee: string, type: 'PreconfirmationFailureStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null } | { totalGas: string, totalFee: string, type: 'PreconfirmationSuccessStatus', resolvedOutputs?: Array<{ utxoId: string, output: { to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' } }> | null, preconfirmationReceipts?: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> | null } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } };\n\nexport const InputCoinFragmentDoc = gql`\n    fragment InputCoinFragment on InputCoin {\n  type: __typename\n  utxoId\n  owner\n  amount\n  assetId\n  txPointer\n  coinWitnessIndex: witnessIndex\n  predicateGasUsed\n  predicate\n  predicateData\n}\n    `;\nexport const InputMessageFragmentDoc = gql`\n    fragment InputMessageFragment on InputMessage {\n  type: __typename\n  sender\n  recipient\n  amount\n  nonce\n  messageWitnessIndex: witnessIndex\n  predicateGasUsed\n  data\n  predicate\n  predicateData\n}\n    `;\nexport const InputContractFragmentDoc = gql`\n    fragment InputContractFragment on InputContract {\n  type: __typename\n  utxoId\n  balanceRoot\n  stateRoot\n  txPointer\n  contractId\n}\n    `;\nexport const OutputCoinFragmentDoc = gql`\n    fragment OutputCoinFragment on CoinOutput {\n  type: __typename\n  to\n  amount\n  assetId\n}\n    `;\nexport const OutputContractFragmentDoc = gql`\n    fragment OutputContractFragment on ContractOutput {\n  type: __typename\n  inputIndex\n  balanceRoot\n  stateRoot\n}\n    `;\nexport const OutputChangeFragmentDoc = gql`\n    fragment OutputChangeFragment on ChangeOutput {\n  type: __typename\n  to\n  amount\n  assetId\n}\n    `;\nexport const OutputVariableFragmentDoc = gql`\n    fragment OutputVariableFragment on VariableOutput {\n  type: __typename\n  to\n  amount\n  assetId\n}\n    `;\nexport const OutputContractCreatedFragmentDoc = gql`\n    fragment OutputContractCreatedFragment on ContractCreated {\n  type: __typename\n  contract\n  stateRoot\n}\n    `;\nexport const SubmittedStatusFragmentDoc = gql`\n    fragment SubmittedStatusFragment on SubmittedStatus {\n  type: __typename\n  time\n}\n    `;\nexport const ReceiptFragmentDoc = gql`\n    fragment receiptFragment on Receipt {\n  id\n  pc\n  is\n  to\n  toAddress\n  amount\n  assetId\n  gas\n  param1\n  param2\n  val\n  ptr\n  digest\n  reason\n  ra\n  rb\n  rc\n  rd\n  len\n  receiptType\n  result\n  gasUsed\n  data\n  sender\n  recipient\n  nonce\n  contractId\n  subId\n}\n    `;\nexport const SuccessStatusFragmentDoc = gql`\n    fragment SuccessStatusFragment on SuccessStatus {\n  type: __typename\n  time\n  programState {\n    returnType\n    data\n  }\n  receipts {\n    ...receiptFragment\n  }\n  totalGas\n  totalFee\n}\n    ${ReceiptFragmentDoc}`;\nexport const SuccessStatusWithBlockIdFragmentDoc = gql`\n    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {\n  ...SuccessStatusFragment\n  block {\n    id\n  }\n}\n    ${SuccessStatusFragmentDoc}`;\nexport const MalleableTransactionFieldsFragmentDoc = gql`\n    fragment malleableTransactionFieldsFragment on Transaction {\n  receiptsRoot\n  inputs {\n    type: __typename\n    ... on InputCoin {\n      txPointer\n    }\n    ... on InputContract {\n      txPointer\n    }\n  }\n  outputs {\n    type: __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract\n      stateRoot\n    }\n  }\n}\n    `;\nexport const FailureStatusFragmentDoc = gql`\n    fragment FailureStatusFragment on FailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  time\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nexport const FailureStatusWithBlockIdFragmentDoc = gql`\n    fragment FailureStatusWithBlockIdFragment on FailureStatus {\n  ...FailureStatusFragment\n  block {\n    id\n  }\n}\n    ${FailureStatusFragmentDoc}`;\nexport const SqueezedOutStatusFragmentDoc = gql`\n    fragment SqueezedOutStatusFragment on SqueezedOutStatus {\n  type: __typename\n  reason\n}\n    `;\nexport const PreconfirmationSuccessStatusFragmentDoc = gql`\n    fragment PreconfirmationSuccessStatusFragment on PreconfirmationSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  resolvedOutputs {\n    utxoId\n    output {\n      type: __typename\n      ... on CoinOutput {\n        to\n        amount\n        assetId\n      }\n      ... on ContractOutput {\n        inputIndex\n        balanceRoot\n        stateRoot\n      }\n      ... on ChangeOutput {\n        to\n        amount\n        assetId\n      }\n      ... on VariableOutput {\n        to\n        amount\n        assetId\n      }\n      ... on ContractCreated {\n        contract\n        stateRoot\n      }\n    }\n  }\n  preconfirmationReceipts: receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nexport const PreconfirmationFailureStatusFragmentDoc = gql`\n    fragment PreconfirmationFailureStatusFragment on PreconfirmationFailureStatus {\n  type: __typename\n  reason\n  totalGas\n  totalFee\n  resolvedOutputs {\n    utxoId\n    output {\n      type: __typename\n      ... on CoinOutput {\n        to\n        amount\n        assetId\n      }\n      ... on ContractOutput {\n        inputIndex\n        balanceRoot\n        stateRoot\n      }\n      ... on ChangeOutput {\n        to\n        amount\n        assetId\n      }\n      ... on VariableOutput {\n        to\n        amount\n        assetId\n      }\n      ... on ContractCreated {\n        contract\n        stateRoot\n      }\n    }\n  }\n  preconfirmationReceipts: receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nexport const TransactionStatusSubscriptionFragmentDoc = gql`\n    fragment transactionStatusSubscriptionFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on FailureStatus {\n    ...FailureStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n  ... on PreconfirmationSuccessStatus {\n    ...PreconfirmationSuccessStatusFragment\n  }\n  ... on PreconfirmationFailureStatus {\n    ...PreconfirmationFailureStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${MalleableTransactionFieldsFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}\n${PreconfirmationSuccessStatusFragmentDoc}\n${PreconfirmationFailureStatusFragmentDoc}`;\nexport const TransactionStatusFragmentDoc = gql`\n    fragment transactionStatusFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusFragment\n  }\n  ... on FailureStatus {\n    ...FailureStatusFragment\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusFragmentDoc}\n${FailureStatusFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const TransactionFragmentDoc = gql`\n    fragment transactionFragment on Transaction {\n  id\n  rawPayload\n  status {\n    ...transactionStatusFragment\n  }\n}\n    ${TransactionStatusFragmentDoc}`;\nexport const TransactionRawPayloadFragmentDoc = gql`\n    fragment transactionRawPayloadFragment on Transaction {\n  id\n  rawPayload\n}\n    `;\nexport const InputEstimatePredicatesFragmentDoc = gql`\n    fragment inputEstimatePredicatesFragment on Input {\n  ... on InputCoin {\n    predicateGasUsed\n  }\n  ... on InputMessage {\n    predicateGasUsed\n  }\n}\n    `;\nexport const TransactionEstimatePredicatesFragmentDoc = gql`\n    fragment transactionEstimatePredicatesFragment on Transaction {\n  inputs {\n    ...inputEstimatePredicatesFragment\n  }\n}\n    ${InputEstimatePredicatesFragmentDoc}`;\nexport const DryRunFailureAssembleTxFragmentDoc = gql`\n    fragment dryRunFailureAssembleTxFragment on DryRunFailureStatus {\n  type: __typename\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nexport const DryRunSuccessAssembleTxFragmentDoc = gql`\n    fragment dryRunSuccessAssembleTxFragment on DryRunSuccessStatus {\n  type: __typename\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nexport const DryRunFailureStatusFragmentDoc = gql`\n    fragment dryRunFailureStatusFragment on DryRunFailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  reason\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nexport const DryRunSuccessStatusFragmentDoc = gql`\n    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nexport const DryRunTransactionStatusFragmentDoc = gql`\n    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {\n  ... on DryRunFailureStatus {\n    ...dryRunFailureStatusFragment\n  }\n  ... on DryRunSuccessStatus {\n    ...dryRunSuccessStatusFragment\n  }\n}\n    ${DryRunFailureStatusFragmentDoc}\n${DryRunSuccessStatusFragmentDoc}`;\nexport const DryRunTransactionExecutionStatusFragmentDoc = gql`\n    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {\n  id\n  status {\n    ...dryRunTransactionStatusFragment\n  }\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${DryRunTransactionStatusFragmentDoc}\n${ReceiptFragmentDoc}`;\nexport const BlockFragmentDoc = gql`\n    fragment blockFragment on Block {\n  id\n  height\n  header {\n    time\n    daHeight\n    stateTransitionBytecodeVersion\n    transactionsCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    prevRoot\n    applicationHash\n  }\n  transactions {\n    id\n  }\n}\n    `;\nexport const CoinFragmentDoc = gql`\n    fragment coinFragment on Coin {\n  type: __typename\n  utxoId\n  amount\n  assetId\n  blockCreated\n  txCreatedIdx\n}\n    `;\nexport const MessageCoinFragmentDoc = gql`\n    fragment messageCoinFragment on MessageCoin {\n  type: __typename\n  sender\n  recipient\n  nonce\n  amount\n  assetId\n  daHeight\n}\n    `;\nexport const MessageFragmentDoc = gql`\n    fragment messageFragment on Message {\n  amount\n  sender\n  recipient\n  data\n  daHeight\n}\n    `;\nexport const GetMessageFragmentDoc = gql`\n    fragment getMessageFragment on Message {\n  ...messageFragment\n  nonce\n}\n    ${MessageFragmentDoc}`;\nexport const MessageProofFragmentDoc = gql`\n    fragment messageProofFragment on MessageProof {\n  messageProof {\n    proofSet\n    proofIndex\n  }\n  blockProof {\n    proofSet\n    proofIndex\n  }\n  messageBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  commitBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  sender\n  recipient\n  amount\n  data\n}\n    `;\nexport const TxParametersFragmentDoc = gql`\n    fragment TxParametersFragment on TxParameters {\n  version\n  maxInputs\n  maxOutputs\n  maxWitnesses\n  maxGasPerTx\n  maxSize\n  maxBytecodeSubsections\n}\n    `;\nexport const PredicateParametersFragmentDoc = gql`\n    fragment PredicateParametersFragment on PredicateParameters {\n  version\n  maxPredicateLength\n  maxPredicateDataLength\n  maxGasPerPredicate\n  maxMessageDataLength\n}\n    `;\nexport const ScriptParametersFragmentDoc = gql`\n    fragment ScriptParametersFragment on ScriptParameters {\n  version\n  maxScriptLength\n  maxScriptDataLength\n}\n    `;\nexport const ContractParametersFragmentDoc = gql`\n    fragment ContractParametersFragment on ContractParameters {\n  version\n  contractMaxSize\n  maxStorageSlots\n}\n    `;\nexport const FeeParametersFragmentDoc = gql`\n    fragment FeeParametersFragment on FeeParameters {\n  version\n  gasPriceFactor\n  gasPerByte\n}\n    `;\nexport const DependentCostFragmentDoc = gql`\n    fragment DependentCostFragment on DependentCost {\n  ... on LightOperation {\n    type: __typename\n    base\n    unitsPerGas\n  }\n  ... on HeavyOperation {\n    type: __typename\n    base\n    gasPerUnit\n  }\n}\n    `;\nexport const GasCostsFragmentDoc = gql`\n    fragment GasCostsFragment on GasCosts {\n  contractRoot {\n    ...DependentCostFragment\n  }\n  stateRoot {\n    ...DependentCostFragment\n  }\n  vmInitialization {\n    ...DependentCostFragment\n  }\n  s256 {\n    ...DependentCostFragment\n  }\n  ecr1\n  newStoragePerByte\n}\n    ${DependentCostFragmentDoc}`;\nexport const ConsensusParametersFragmentDoc = gql`\n    fragment consensusParametersFragment on ConsensusParameters {\n  version\n  txParams {\n    ...TxParametersFragment\n  }\n  predicateParams {\n    ...PredicateParametersFragment\n  }\n  scriptParams {\n    ...ScriptParametersFragment\n  }\n  contractParams {\n    ...ContractParametersFragment\n  }\n  feeParams {\n    ...FeeParametersFragment\n  }\n  gasCosts {\n    ...GasCostsFragment\n  }\n  baseAssetId\n  chainId\n}\n    ${TxParametersFragmentDoc}\n${PredicateParametersFragmentDoc}\n${ScriptParametersFragmentDoc}\n${ContractParametersFragmentDoc}\n${FeeParametersFragmentDoc}\n${GasCostsFragmentDoc}`;\nexport const ChainInfoFragmentDoc = gql`\n    fragment chainInfoFragment on ChainInfo {\n  name\n  daHeight\n  consensusParameters {\n    ...consensusParametersFragment\n  }\n  latestBlock {\n    header {\n      consensusParametersVersion\n    }\n  }\n}\n    ${ConsensusParametersFragmentDoc}`;\nexport const ContractBalanceFragmentDoc = gql`\n    fragment contractBalanceFragment on ContractBalance {\n  contract\n  amount\n  assetId\n}\n    `;\nexport const PageInfoFragmentDoc = gql`\n    fragment pageInfoFragment on PageInfo {\n  hasPreviousPage\n  hasNextPage\n  startCursor\n  endCursor\n}\n    `;\nexport const NodeInfoFragmentDoc = gql`\n    fragment nodeInfoFragment on NodeInfo {\n  utxoValidation\n  vmBacktrace\n  maxTx\n  maxDepth\n  nodeVersion\n  indexation {\n    balances\n    coinsToSpend\n    assetMetadata\n  }\n}\n    `;\nexport const RelayedTransactionStatusFragmentDoc = gql`\n    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {\n  ... on RelayedTransactionFailed {\n    blockHeight\n    failure\n  }\n}\n    `;\nexport const GetVersionDocument = gql`\n    query getVersion {\n  nodeInfo {\n    nodeVersion\n  }\n}\n    `;\nexport const GetNodeInfoDocument = gql`\n    query getNodeInfo {\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${NodeInfoFragmentDoc}`;\nexport const GetChainDocument = gql`\n    query getChain {\n  chain {\n    ...chainInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}`;\nexport const GetChainAndNodeInfoDocument = gql`\n    query getChainAndNodeInfo {\n  chain {\n    ...chainInfoFragment\n  }\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}\n${NodeInfoFragmentDoc}`;\nexport const GetTransactionDocument = gql`\n    query getTransaction($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentDoc}`;\nexport const GetTransactionWithReceiptsDocument = gql`\n    query getTransactionWithReceipts($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    id\n    rawPayload\n    status {\n      ... on SubmittedStatus {\n        ...SubmittedStatusFragment\n      }\n      ... on SuccessStatus {\n        ...SuccessStatusWithBlockIdFragment\n      }\n      ... on FailureStatus {\n        ...FailureStatusWithBlockIdFragment\n      }\n      ... on SqueezedOutStatus {\n        ...SqueezedOutStatusFragment\n      }\n      ... on PreconfirmationSuccessStatus {\n        ...PreconfirmationSuccessStatusFragment\n      }\n      ... on PreconfirmationFailureStatus {\n        ...PreconfirmationFailureStatusFragment\n      }\n    }\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}\n${PreconfirmationSuccessStatusFragmentDoc}\n${PreconfirmationFailureStatusFragmentDoc}`;\nexport const GetTransactionsDocument = gql`\n    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {\n  transactions(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        rawPayload\n      }\n    }\n    pageInfo {\n      ...pageInfoFragment\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nexport const GetTransactionsByOwnerDocument = gql`\n    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  transactionsByOwner(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${TransactionFragmentDoc}`;\nexport const EstimatePredicatesDocument = gql`\n    query estimatePredicates($encodedTransaction: HexString!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nexport const EstimatePredicatesAndGasPriceDocument = gql`\n    query estimatePredicatesAndGasPrice($encodedTransaction: HexString!, $blockHorizon: U32!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nexport const GetLatestBlockDocument = gql`\n    query getLatestBlock {\n  chain {\n    latestBlock {\n      ...blockFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}`;\nexport const GetLatestBlockHeightDocument = gql`\n    query getLatestBlockHeight {\n  chain {\n    latestBlock {\n      height\n    }\n  }\n}\n    `;\nexport const GetBlockDocument = gql`\n    query getBlock($blockId: BlockId, $height: U32) {\n  block(id: $blockId, height: $height) {\n    ...blockFragment\n  }\n}\n    ${BlockFragmentDoc}`;\nexport const GetBlockWithTransactionsDocument = gql`\n    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n    transactions {\n      ...transactionRawPayloadFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}\n${TransactionRawPayloadFragmentDoc}`;\nexport const GetBlocksDocument = gql`\n    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {\n  blocks(after: $after, before: $before, first: $first, last: $last) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...blockFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${BlockFragmentDoc}`;\nexport const GetCoinDocument = gql`\n    query getCoin($coinId: UtxoId!) {\n  coin(utxoId: $coinId) {\n    ...coinFragment\n    owner\n  }\n}\n    ${CoinFragmentDoc}`;\nexport const GetCoinsDocument = gql`\n    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  coins(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...coinFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${CoinFragmentDoc}`;\nexport const GetCoinsToSpendDocument = gql`\n    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {\n  coinsToSpend(\n    owner: $owner\n    queryPerAsset: $queryPerAsset\n    excludedIds: $excludedIds\n  ) {\n    ...coinFragment\n    ...messageCoinFragment\n  }\n}\n    ${CoinFragmentDoc}\n${MessageCoinFragmentDoc}`;\nexport const GetContractDocument = gql`\n    query getContract($contractId: ContractId!) {\n  contract(id: $contractId) {\n    bytecode\n    id\n  }\n}\n    `;\nexport const GetContractBalanceDocument = gql`\n    query getContractBalance($contract: ContractId!, $asset: AssetId!) {\n  contractBalance(contract: $contract, asset: $asset) {\n    ...contractBalanceFragment\n  }\n}\n    ${ContractBalanceFragmentDoc}`;\nexport const GetBalanceDocument = gql`\n    query getBalance($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amount\n  }\n}\n    `;\nexport const GetBalanceV2Document = gql`\n    query getBalanceV2($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amountU128\n  }\n}\n    `;\nexport const GetLatestGasPriceDocument = gql`\n    query getLatestGasPrice {\n  latestGasPrice {\n    gasPrice\n  }\n}\n    `;\nexport const EstimateGasPriceDocument = gql`\n    query estimateGasPrice($blockHorizon: U32!) {\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    `;\nexport const GetBalancesDocument = gql`\n    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    edges {\n      node {\n        assetId\n        amount\n      }\n    }\n  }\n}\n    `;\nexport const GetBalancesV2Document = gql`\n    query getBalancesV2($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int, $supportsPagination: Boolean!) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo @include(if: $supportsPagination) {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        assetId\n        amountU128\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nexport const GetMessagesDocument = gql`\n    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  messages(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...getMessageFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${GetMessageFragmentDoc}`;\nexport const DaCompressedBlockDocument = gql`\n    query daCompressedBlock($height: U32!) {\n  daCompressedBlock(height: $height) {\n    bytes\n  }\n}\n    `;\nexport const GetMessageProofDocument = gql`\n    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {\n  messageProof(\n    transactionId: $transactionId\n    nonce: $nonce\n    commitBlockId: $commitBlockId\n    commitBlockHeight: $commitBlockHeight\n  ) {\n    ...messageProofFragment\n  }\n}\n    ${MessageProofFragmentDoc}`;\nexport const GetMessageStatusDocument = gql`\n    query getMessageStatus($nonce: Nonce!) {\n  messageStatus(nonce: $nonce) {\n    state\n  }\n}\n    `;\nexport const GetRelayedTransactionStatusDocument = gql`\n    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {\n  relayedTransactionStatus(id: $relayedTransactionId) {\n    ...relayedTransactionStatusFragment\n  }\n}\n    ${RelayedTransactionStatusFragmentDoc}`;\nexport const GetAssetDetailsDocument = gql`\n    query getAssetDetails($assetId: AssetId!) {\n  assetDetails(id: $assetId) {\n    subId\n    contractId\n    totalSupply\n  }\n}\n    `;\nexport const AssembleTxDocument = gql`\n    query assembleTx($tx: HexString!, $blockHorizon: U32!, $requiredBalances: [RequiredBalance!]!, $feeAddressIndex: U16!, $excludeInput: ExcludeInput, $estimatePredicates: Boolean, $reserveGas: U64) {\n  assembleTx(\n    tx: $tx\n    blockHorizon: $blockHorizon\n    requiredBalances: $requiredBalances\n    feeAddressIndex: $feeAddressIndex\n    excludeInput: $excludeInput\n    estimatePredicates: $estimatePredicates\n    reserveGas: $reserveGas\n  ) {\n    transaction {\n      id\n      inputs {\n        ... on InputCoin {\n          ...InputCoinFragment\n        }\n        ... on InputContract {\n          ...InputContractFragment\n        }\n        ... on InputMessage {\n          ...InputMessageFragment\n        }\n      }\n      outputs {\n        ... on CoinOutput {\n          ...OutputCoinFragment\n        }\n        ... on ContractOutput {\n          ...OutputContractFragment\n        }\n        ... on ChangeOutput {\n          ...OutputChangeFragment\n        }\n        ... on VariableOutput {\n          ...OutputVariableFragment\n        }\n        ... on ContractCreated {\n          ...OutputContractCreatedFragment\n        }\n      }\n      policies {\n        tip\n        witnessLimit\n        maturity\n        maxFee\n      }\n      witnesses\n      scriptGasLimit\n    }\n    status {\n      ... on DryRunFailureStatus {\n        ...dryRunFailureAssembleTxFragment\n      }\n      ... on DryRunSuccessStatus {\n        ...dryRunSuccessAssembleTxFragment\n      }\n    }\n    gasPrice\n  }\n}\n    ${InputCoinFragmentDoc}\n${InputContractFragmentDoc}\n${InputMessageFragmentDoc}\n${OutputCoinFragmentDoc}\n${OutputContractFragmentDoc}\n${OutputChangeFragmentDoc}\n${OutputVariableFragmentDoc}\n${OutputContractCreatedFragmentDoc}\n${DryRunFailureAssembleTxFragmentDoc}\n${DryRunSuccessAssembleTxFragmentDoc}`;\nexport const DryRunDocument = gql`\n    query dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {\n  dryRun(\n    txs: $encodedTransactions\n    utxoValidation: $utxoValidation\n    gasPrice: $gasPrice\n  ) {\n    ...dryRunTransactionExecutionStatusFragment\n  }\n}\n    ${DryRunTransactionExecutionStatusFragmentDoc}`;\nexport const SubmitDocument = gql`\n    mutation submit($encodedTransaction: HexString!) {\n  submit(tx: $encodedTransaction) {\n    id\n  }\n}\n    `;\nexport const ProduceBlocksDocument = gql`\n    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {\n  produceBlocks(\n    blocksToProduce: $blocksToProduce\n    startTimestamp: $startTimestamp\n  )\n}\n    `;\nexport const GetMessageByNonceDocument = gql`\n    query getMessageByNonce($nonce: Nonce!) {\n  message(nonce: $nonce) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentDoc}`;\nexport const IsUserAccountDocument = gql`\n    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {\n  blob(id: $blobId) {\n    id\n  }\n  contract(id: $contractId) {\n    id\n  }\n  transaction(id: $transactionId) {\n    id\n  }\n}\n    `;\nexport const GetConsensusParametersVersionDocument = gql`\n    query getConsensusParametersVersion {\n  chain {\n    latestBlock {\n      header {\n        consensusParametersVersion\n      }\n    }\n  }\n}\n    `;\nexport const SubmitAndAwaitStatusDocument = gql`\n    subscription submitAndAwaitStatus($encodedTransaction: HexString!, $estimatePredicates: Boolean, $includePreConfirmation: Boolean) {\n  submitAndAwaitStatus(\n    tx: $encodedTransaction\n    estimatePredicates: $estimatePredicates\n    includePreconfirmation: $includePreConfirmation\n  ) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nexport const StatusChangeDocument = gql`\n    subscription statusChange($transactionId: TransactionId!, $includePreConfirmation: Boolean) {\n  statusChange(\n    id: $transactionId\n    includePreconfirmation: $includePreConfirmation\n  ) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nexport type Requester<C = {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>\nexport function getSdk<C>(requester: Requester<C>) {\n  return {\n    getVersion(variables?: GqlGetVersionQueryVariables, options?: C): Promise<GqlGetVersionQuery> {\n      return requester<GqlGetVersionQuery, GqlGetVersionQueryVariables>(GetVersionDocument, variables, options) as Promise<GqlGetVersionQuery>;\n    },\n    getNodeInfo(variables?: GqlGetNodeInfoQueryVariables, options?: C): Promise<GqlGetNodeInfoQuery> {\n      return requester<GqlGetNodeInfoQuery, GqlGetNodeInfoQueryVariables>(GetNodeInfoDocument, variables, options) as Promise<GqlGetNodeInfoQuery>;\n    },\n    getChain(variables?: GqlGetChainQueryVariables, options?: C): Promise<GqlGetChainQuery> {\n      return requester<GqlGetChainQuery, GqlGetChainQueryVariables>(GetChainDocument, variables, options) as Promise<GqlGetChainQuery>;\n    },\n    getChainAndNodeInfo(variables?: GqlGetChainAndNodeInfoQueryVariables, options?: C): Promise<GqlGetChainAndNodeInfoQuery> {\n      return requester<GqlGetChainAndNodeInfoQuery, GqlGetChainAndNodeInfoQueryVariables>(GetChainAndNodeInfoDocument, variables, options) as Promise<GqlGetChainAndNodeInfoQuery>;\n    },\n    getTransaction(variables: GqlGetTransactionQueryVariables, options?: C): Promise<GqlGetTransactionQuery> {\n      return requester<GqlGetTransactionQuery, GqlGetTransactionQueryVariables>(GetTransactionDocument, variables, options) as Promise<GqlGetTransactionQuery>;\n    },\n    getTransactionWithReceipts(variables: GqlGetTransactionWithReceiptsQueryVariables, options?: C): Promise<GqlGetTransactionWithReceiptsQuery> {\n      return requester<GqlGetTransactionWithReceiptsQuery, GqlGetTransactionWithReceiptsQueryVariables>(GetTransactionWithReceiptsDocument, variables, options) as Promise<GqlGetTransactionWithReceiptsQuery>;\n    },\n    getTransactions(variables?: GqlGetTransactionsQueryVariables, options?: C): Promise<GqlGetTransactionsQuery> {\n      return requester<GqlGetTransactionsQuery, GqlGetTransactionsQueryVariables>(GetTransactionsDocument, variables, options) as Promise<GqlGetTransactionsQuery>;\n    },\n    getTransactionsByOwner(variables: GqlGetTransactionsByOwnerQueryVariables, options?: C): Promise<GqlGetTransactionsByOwnerQuery> {\n      return requester<GqlGetTransactionsByOwnerQuery, GqlGetTransactionsByOwnerQueryVariables>(GetTransactionsByOwnerDocument, variables, options) as Promise<GqlGetTransactionsByOwnerQuery>;\n    },\n    estimatePredicates(variables: GqlEstimatePredicatesQueryVariables, options?: C): Promise<GqlEstimatePredicatesQuery> {\n      return requester<GqlEstimatePredicatesQuery, GqlEstimatePredicatesQueryVariables>(EstimatePredicatesDocument, variables, options) as Promise<GqlEstimatePredicatesQuery>;\n    },\n    estimatePredicatesAndGasPrice(variables: GqlEstimatePredicatesAndGasPriceQueryVariables, options?: C): Promise<GqlEstimatePredicatesAndGasPriceQuery> {\n      return requester<GqlEstimatePredicatesAndGasPriceQuery, GqlEstimatePredicatesAndGasPriceQueryVariables>(EstimatePredicatesAndGasPriceDocument, variables, options) as Promise<GqlEstimatePredicatesAndGasPriceQuery>;\n    },\n    getLatestBlock(variables?: GqlGetLatestBlockQueryVariables, options?: C): Promise<GqlGetLatestBlockQuery> {\n      return requester<GqlGetLatestBlockQuery, GqlGetLatestBlockQueryVariables>(GetLatestBlockDocument, variables, options) as Promise<GqlGetLatestBlockQuery>;\n    },\n    getLatestBlockHeight(variables?: GqlGetLatestBlockHeightQueryVariables, options?: C): Promise<GqlGetLatestBlockHeightQuery> {\n      return requester<GqlGetLatestBlockHeightQuery, GqlGetLatestBlockHeightQueryVariables>(GetLatestBlockHeightDocument, variables, options) as Promise<GqlGetLatestBlockHeightQuery>;\n    },\n    getBlock(variables?: GqlGetBlockQueryVariables, options?: C): Promise<GqlGetBlockQuery> {\n      return requester<GqlGetBlockQuery, GqlGetBlockQueryVariables>(GetBlockDocument, variables, options) as Promise<GqlGetBlockQuery>;\n    },\n    getBlockWithTransactions(variables?: GqlGetBlockWithTransactionsQueryVariables, options?: C): Promise<GqlGetBlockWithTransactionsQuery> {\n      return requester<GqlGetBlockWithTransactionsQuery, GqlGetBlockWithTransactionsQueryVariables>(GetBlockWithTransactionsDocument, variables, options) as Promise<GqlGetBlockWithTransactionsQuery>;\n    },\n    getBlocks(variables?: GqlGetBlocksQueryVariables, options?: C): Promise<GqlGetBlocksQuery> {\n      return requester<GqlGetBlocksQuery, GqlGetBlocksQueryVariables>(GetBlocksDocument, variables, options) as Promise<GqlGetBlocksQuery>;\n    },\n    getCoin(variables: GqlGetCoinQueryVariables, options?: C): Promise<GqlGetCoinQuery> {\n      return requester<GqlGetCoinQuery, GqlGetCoinQueryVariables>(GetCoinDocument, variables, options) as Promise<GqlGetCoinQuery>;\n    },\n    getCoins(variables: GqlGetCoinsQueryVariables, options?: C): Promise<GqlGetCoinsQuery> {\n      return requester<GqlGetCoinsQuery, GqlGetCoinsQueryVariables>(GetCoinsDocument, variables, options) as Promise<GqlGetCoinsQuery>;\n    },\n    getCoinsToSpend(variables: GqlGetCoinsToSpendQueryVariables, options?: C): Promise<GqlGetCoinsToSpendQuery> {\n      return requester<GqlGetCoinsToSpendQuery, GqlGetCoinsToSpendQueryVariables>(GetCoinsToSpendDocument, variables, options) as Promise<GqlGetCoinsToSpendQuery>;\n    },\n    getContract(variables: GqlGetContractQueryVariables, options?: C): Promise<GqlGetContractQuery> {\n      return requester<GqlGetContractQuery, GqlGetContractQueryVariables>(GetContractDocument, variables, options) as Promise<GqlGetContractQuery>;\n    },\n    getContractBalance(variables: GqlGetContractBalanceQueryVariables, options?: C): Promise<GqlGetContractBalanceQuery> {\n      return requester<GqlGetContractBalanceQuery, GqlGetContractBalanceQueryVariables>(GetContractBalanceDocument, variables, options) as Promise<GqlGetContractBalanceQuery>;\n    },\n    getBalance(variables: GqlGetBalanceQueryVariables, options?: C): Promise<GqlGetBalanceQuery> {\n      return requester<GqlGetBalanceQuery, GqlGetBalanceQueryVariables>(GetBalanceDocument, variables, options) as Promise<GqlGetBalanceQuery>;\n    },\n    getBalanceV2(variables: GqlGetBalanceV2QueryVariables, options?: C): Promise<GqlGetBalanceV2Query> {\n      return requester<GqlGetBalanceV2Query, GqlGetBalanceV2QueryVariables>(GetBalanceV2Document, variables, options) as Promise<GqlGetBalanceV2Query>;\n    },\n    getLatestGasPrice(variables?: GqlGetLatestGasPriceQueryVariables, options?: C): Promise<GqlGetLatestGasPriceQuery> {\n      return requester<GqlGetLatestGasPriceQuery, GqlGetLatestGasPriceQueryVariables>(GetLatestGasPriceDocument, variables, options) as Promise<GqlGetLatestGasPriceQuery>;\n    },\n    estimateGasPrice(variables: GqlEstimateGasPriceQueryVariables, options?: C): Promise<GqlEstimateGasPriceQuery> {\n      return requester<GqlEstimateGasPriceQuery, GqlEstimateGasPriceQueryVariables>(EstimateGasPriceDocument, variables, options) as Promise<GqlEstimateGasPriceQuery>;\n    },\n    getBalances(variables: GqlGetBalancesQueryVariables, options?: C): Promise<GqlGetBalancesQuery> {\n      return requester<GqlGetBalancesQuery, GqlGetBalancesQueryVariables>(GetBalancesDocument, variables, options) as Promise<GqlGetBalancesQuery>;\n    },\n    getBalancesV2(variables: GqlGetBalancesV2QueryVariables, options?: C): Promise<GqlGetBalancesV2Query> {\n      return requester<GqlGetBalancesV2Query, GqlGetBalancesV2QueryVariables>(GetBalancesV2Document, variables, options) as Promise<GqlGetBalancesV2Query>;\n    },\n    getMessages(variables: GqlGetMessagesQueryVariables, options?: C): Promise<GqlGetMessagesQuery> {\n      return requester<GqlGetMessagesQuery, GqlGetMessagesQueryVariables>(GetMessagesDocument, variables, options) as Promise<GqlGetMessagesQuery>;\n    },\n    daCompressedBlock(variables: GqlDaCompressedBlockQueryVariables, options?: C): Promise<GqlDaCompressedBlockQuery> {\n      return requester<GqlDaCompressedBlockQuery, GqlDaCompressedBlockQueryVariables>(DaCompressedBlockDocument, variables, options) as Promise<GqlDaCompressedBlockQuery>;\n    },\n    getMessageProof(variables: GqlGetMessageProofQueryVariables, options?: C): Promise<GqlGetMessageProofQuery> {\n      return requester<GqlGetMessageProofQuery, GqlGetMessageProofQueryVariables>(GetMessageProofDocument, variables, options) as Promise<GqlGetMessageProofQuery>;\n    },\n    getMessageStatus(variables: GqlGetMessageStatusQueryVariables, options?: C): Promise<GqlGetMessageStatusQuery> {\n      return requester<GqlGetMessageStatusQuery, GqlGetMessageStatusQueryVariables>(GetMessageStatusDocument, variables, options) as Promise<GqlGetMessageStatusQuery>;\n    },\n    getRelayedTransactionStatus(variables: GqlGetRelayedTransactionStatusQueryVariables, options?: C): Promise<GqlGetRelayedTransactionStatusQuery> {\n      return requester<GqlGetRelayedTransactionStatusQuery, GqlGetRelayedTransactionStatusQueryVariables>(GetRelayedTransactionStatusDocument, variables, options) as Promise<GqlGetRelayedTransactionStatusQuery>;\n    },\n    getAssetDetails(variables: GqlGetAssetDetailsQueryVariables, options?: C): Promise<GqlGetAssetDetailsQuery> {\n      return requester<GqlGetAssetDetailsQuery, GqlGetAssetDetailsQueryVariables>(GetAssetDetailsDocument, variables, options) as Promise<GqlGetAssetDetailsQuery>;\n    },\n    assembleTx(variables: GqlAssembleTxQueryVariables, options?: C): Promise<GqlAssembleTxQuery> {\n      return requester<GqlAssembleTxQuery, GqlAssembleTxQueryVariables>(AssembleTxDocument, variables, options) as Promise<GqlAssembleTxQuery>;\n    },\n    dryRun(variables: GqlDryRunQueryVariables, options?: C): Promise<GqlDryRunQuery> {\n      return requester<GqlDryRunQuery, GqlDryRunQueryVariables>(DryRunDocument, variables, options) as Promise<GqlDryRunQuery>;\n    },\n    submit(variables: GqlSubmitMutationVariables, options?: C): Promise<GqlSubmitMutation> {\n      return requester<GqlSubmitMutation, GqlSubmitMutationVariables>(SubmitDocument, variables, options) as Promise<GqlSubmitMutation>;\n    },\n    produceBlocks(variables: GqlProduceBlocksMutationVariables, options?: C): Promise<GqlProduceBlocksMutation> {\n      return requester<GqlProduceBlocksMutation, GqlProduceBlocksMutationVariables>(ProduceBlocksDocument, variables, options) as Promise<GqlProduceBlocksMutation>;\n    },\n    getMessageByNonce(variables: GqlGetMessageByNonceQueryVariables, options?: C): Promise<GqlGetMessageByNonceQuery> {\n      return requester<GqlGetMessageByNonceQuery, GqlGetMessageByNonceQueryVariables>(GetMessageByNonceDocument, variables, options) as Promise<GqlGetMessageByNonceQuery>;\n    },\n    isUserAccount(variables: GqlIsUserAccountQueryVariables, options?: C): Promise<GqlIsUserAccountQuery> {\n      return requester<GqlIsUserAccountQuery, GqlIsUserAccountQueryVariables>(IsUserAccountDocument, variables, options) as Promise<GqlIsUserAccountQuery>;\n    },\n    getConsensusParametersVersion(variables?: GqlGetConsensusParametersVersionQueryVariables, options?: C): Promise<GqlGetConsensusParametersVersionQuery> {\n      return requester<GqlGetConsensusParametersVersionQuery, GqlGetConsensusParametersVersionQueryVariables>(GetConsensusParametersVersionDocument, variables, options) as Promise<GqlGetConsensusParametersVersionQuery>;\n    },\n    submitAndAwaitStatus(variables: GqlSubmitAndAwaitStatusSubscriptionVariables, options?: C): AsyncIterable<GqlSubmitAndAwaitStatusSubscription> {\n      return requester<GqlSubmitAndAwaitStatusSubscription, GqlSubmitAndAwaitStatusSubscriptionVariables>(SubmitAndAwaitStatusDocument, variables, options) as AsyncIterable<GqlSubmitAndAwaitStatusSubscription>;\n    },\n    statusChange(variables: GqlStatusChangeSubscriptionVariables, options?: C): AsyncIterable<GqlStatusChangeSubscription> {\n      return requester<GqlStatusChangeSubscription, GqlStatusChangeSubscriptionVariables>(StatusChangeDocument, variables, options) as AsyncIterable<GqlStatusChangeSubscription>;\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { TransactionType } from '@fuel-ts/transactions';\nimport { hexlify, isDefined } from '@fuel-ts/utils';\n\nimport type { Predicate } from '../predicate';\nimport type { AbstractAccount } from '../types';\n\nimport type { GqlAccount } from './__generated__/operations';\nimport type Provider from './provider';\nimport type { TransactionRequest } from './transaction-request';\n\n/**\n * Resolve the account for the `assembleTx` GraphQL input params. More specifically to the properties:\n * - feePayerAccount\n * - accountCoinQuantities[n].account\n *\n * These should be informed to the client in the following signature:\n *\n * 1 - Common Account (Not a Predicate)\n * ```ts\n * feePayerAccount: {\n *   address: string;\n * }\n * ```\n *\n * 2 - Predicate\n * ```ts\n * feePayerAccount: {\n *   predicate: {\n *     predicate: string;\n *     predicateAddress: string;\n *     predicateData: string;\n *   };\n * }\n * ```\n */\nexport const resolveAccountForAssembleTxParams = (account: AbstractAccount): GqlAccount => {\n  const assembleTxAccount: GqlAccount = {};\n  const accountIsPredicate = 'bytes' in account;\n\n  if (accountIsPredicate) {\n    assembleTxAccount.predicate = {\n      predicate: hexlify((account as Predicate).bytes),\n      predicateAddress: account.address.toB256(),\n      predicateData: hexlify((account as Predicate).getPredicateData()),\n    };\n  } else {\n    assembleTxAccount.address = account.address.toB256();\n  }\n\n  return assembleTxAccount;\n};\n\nexport const setAndValidateGasAndFeeForAssembledTx = async <T extends TransactionRequest>(params: {\n  transactionRequest: T;\n  provider: Provider;\n  gasPrice: BN;\n  setGasLimit?: BigNumberish;\n  setMaxFee?: BigNumberish;\n}): Promise<T> => {\n  const { gasPrice, transactionRequest, setGasLimit, setMaxFee, provider } = params;\n\n  const gasLimitSpecified = isDefined(setGasLimit);\n  const maxFeeSpecified = isDefined(setMaxFee);\n  const isScriptTx = transactionRequest.type === TransactionType.Script;\n\n  if (gasLimitSpecified && isScriptTx) {\n    const requiredGasLimit = transactionRequest.gasLimit;\n    if (bn(setGasLimit).lt(bn(requiredGasLimit))) {\n      throw new FuelError(\n        ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${requiredGasLimit}'.`\n      );\n    }\n\n    transactionRequest.gasLimit = bn(setGasLimit);\n  }\n\n  if (maxFeeSpecified) {\n    const requiredMaxFee = transactionRequest.maxFee;\n    if (bn(setMaxFee).lt(requiredMaxFee)) {\n      throw new FuelError(\n        ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${requiredMaxFee}'.`\n      );\n    }\n\n    transactionRequest.maxFee = bn(setMaxFee);\n  }\n\n  if (gasLimitSpecified && !maxFeeSpecified) {\n    const { maxFee: feeForGasPrice } = await provider.estimateTxGasAndFee({\n      transactionRequest,\n      gasPrice,\n    });\n\n    transactionRequest.maxFee = feeForGasPrice;\n  }\n\n  return transactionRequest;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { DocumentNode } from 'graphql';\nimport { print } from 'graphql';\n\nimport { assertGqlResponseHasNoErrors } from './utils/handle-gql-error-message';\n\ntype FuelGraphQLSubscriberOptions = {\n  url: string;\n  query: DocumentNode;\n  variables?: Record<string, unknown>;\n  fetchFn: typeof fetch;\n  operationName: string;\n  onEvent?: (event: FuelGraphqlSubscriberEvent) => void;\n};\n\nexport interface FuelGraphqlSubscriberEvent {\n  data: unknown;\n  errors?: { message: string }[];\n  extensions?: Record<string, unknown>;\n}\n\nexport class FuelGraphqlSubscriber implements AsyncIterator<unknown> {\n  public static incompatibleNodeVersionMessage: string | false = false;\n  private static textDecoder = new TextDecoder();\n\n  private constructor(\n    private stream: ReadableStreamDefaultReader<Uint8Array>,\n    private onEvent?: (event: FuelGraphqlSubscriberEvent) => void\n  ) {}\n\n  public static async create(options: FuelGraphQLSubscriberOptions) {\n    const { url, query, variables, fetchFn, operationName, onEvent } = options;\n    const response = await fetchFn(`${url}-sub`, {\n      method: 'POST',\n      body: JSON.stringify({\n        query: print(query),\n        variables,\n        operationName,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/event-stream',\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [errorReader, resultReader] = response.body!.tee().map((stream) => stream.getReader());\n\n    /**\n     * If the node threw an error, read it and throw it to the user\n     * Else just discard the response and return the subscriber below,\n     * which will have that same response via `resultReader`\n     */\n    await new FuelGraphqlSubscriber(errorReader).next();\n\n    return new FuelGraphqlSubscriber(resultReader, onEvent);\n  }\n\n  /**\n   * This method will take a stream reader and parse the event from the stream.\n   *\n   * @param reader - The reader of the SSE stream\n   * @param parsingLeftover - The leftover string from parsing the previous event\n   * @returns The event parsed as a full GraphQL response, whether the stream is done and the leftover string after parsing\n   */\n  public static async readEvent(\n    reader: ReadableStreamDefaultReader<Uint8Array>,\n    parsingLeftover: string = ''\n  ): Promise<{\n    event: FuelGraphqlSubscriberEvent | undefined;\n    done: boolean;\n    parsingLeftover: string;\n  }> {\n    let text = parsingLeftover;\n    const regex = /data:.*\\n\\n/g;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      /**\n       * Given the steam has a `data:.*\\n\\n` text stream, we will extract the data from the stream\n       * and parse it as a GraphQL response.\n       */\n      const matches = [...text.matchAll(regex)].flatMap((match) => match);\n      if (matches.length > 0) {\n        try {\n          const event = JSON.parse(matches[0].replace(/^data:/, ''));\n\n          return {\n            event,\n            done: false,\n            parsingLeftover: text.replace(matches[0], ''),\n          };\n        } catch (e) {\n          throw new FuelError(\n            ErrorCode.STREAM_PARSING_ERROR,\n            `Error while parsing stream data response: ${text}`\n          );\n        }\n      }\n\n      /**\n       * Otherwise, it's in another format, that we will read differently.\n       * This could be responses such as `keep-alive` messages.\n       */\n      const { value, done } = await reader.read();\n\n      if (done) {\n        return { event: undefined, done, parsingLeftover: '' };\n      }\n\n      /**\n       * We don't care about keep-alive messages.\n       * The only responses that I came across from the node are either 200 responses with \"data:.*\" or keep-alive messages.\n       * You can find the keep-alive message in the fuel-core codebase (latest permalink as of writing):\n       * https://github.com/FuelLabs/fuel-core/blob/e1e631902f762081d2124d9c457ddfe13ac366dc/crates/fuel-core/src/graphql_api/service.rs#L247\n       * To get the actual latest info you need to check out the master branch (might change):\n       * https://github.com/FuelLabs/fuel-core/blob/master/crates/fuel-core/src/graphql_api/service.rs#L247\n       * */\n      const decoded = FuelGraphqlSubscriber.textDecoder\n        .decode(value)\n        .replace(':keep-alive-text\\n\\n', '');\n\n      text += decoded;\n    }\n  }\n\n  private events: Array<FuelGraphqlSubscriberEvent> = [];\n\n  private parsingLeftover = '';\n\n  /**\n   * Gets automatically called when iterating in a `for-await-of` loop.\n   * It can also be called manually.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next\n   */\n  async next(): Promise<IteratorResult<unknown, unknown>> {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      /**\n       * If we have an event in the queue, we will return it (ensure there is not an error).\n       */\n      const nextEvent = this.events.shift();\n      if (nextEvent) {\n        this.onEvent?.(nextEvent);\n        assertGqlResponseHasNoErrors(\n          nextEvent.errors,\n          FuelGraphqlSubscriber.incompatibleNodeVersionMessage\n        );\n        return { value: nextEvent.data, done: false };\n      }\n\n      /**\n       * Otherwise, we will try and read the next event from the stream.\n       */\n      const { event, done, parsingLeftover } = await FuelGraphqlSubscriber.readEvent(\n        this.stream,\n        this.parsingLeftover\n      );\n\n      this.parsingLeftover = parsingLeftover;\n\n      if (done) {\n        return { value: undefined, done: true };\n      }\n      this.events.push(event as FuelGraphqlSubscriberEvent);\n    }\n  }\n\n  /**\n   * Gets called when `break` is called in a `for-await-of` loop.\n   */\n  return(): Promise<IteratorResult<unknown, undefined>> {\n    return Promise.resolve({ done: true, value: undefined });\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<unknown, unknown, undefined> {\n    return this;\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { GraphQLError } from 'graphql';\n\nconst gqlErrorMessage = {\n  RPC_CONSISTENCY:\n    /The required fuel block height is higher than the current block height. Required: \\d+, Current: \\d+/,\n  NOT_ENOUGH_COINS_MAX_COINS:\n    /the target cannot be met due to no coins available or exceeding the \\d+ coin limit./,\n  ASSET_NOT_FOUND: /resource was not found in table/,\n  MULTIPLE_CHANGE_POLICIES: /The asset ([a-fA-F0-9]{64}) has multiple change policies/,\n  DUPLICATE_CHANGE_OUTPUT_ACCOUNT: /required balances contain duplicate \\(asset, account\\) pair/,\n  INSUFFICIENT_FEE_AMOUNT: /InsufficientFeeAmount { expected: (\\d+), provided: (\\d+) }/,\n};\n\ntype GqlError = { message: string } | GraphQLError;\n\nconst mapGqlErrorMessage = (error: GqlError): FuelError => {\n  if (gqlErrorMessage.NOT_ENOUGH_COINS_MAX_COINS.test(error.message)) {\n    return new FuelError(\n      ErrorCode.INSUFFICIENT_FUNDS_OR_MAX_COINS,\n      `Insufficient funds or too many small value coins. Consider combining UTXOs.`,\n      {},\n      error\n    );\n  }\n\n  if (gqlErrorMessage.MULTIPLE_CHANGE_POLICIES.test(error.message)) {\n    const match = error.message.match(/asset ([a-fA-F0-9]{64})/);\n    const assetId = match?.[1] || '';\n    return new FuelError(\n      ErrorCode.CHANGE_OUTPUT_COLLISION,\n      `OutputChange address for asset 0x${assetId} differs between transaction request and assembleTx parameters.`,\n      {},\n      error\n    );\n  }\n\n  if (gqlErrorMessage.DUPLICATE_CHANGE_OUTPUT_ACCOUNT.test(error.message)) {\n    return new FuelError(\n      ErrorCode.DUPLICATE_CHANGE_OUTPUT_ACCOUNT,\n      `The parameter 'accountCoinQuantities' of assembleTx contains duplicate entries for the same assetId with different 'changeOutputAccount'.`,\n      {},\n      error\n    );\n  }\n\n  if (gqlErrorMessage.ASSET_NOT_FOUND.test(error.message)) {\n    return new FuelError(\n      ErrorCode.ASSET_NOT_FOUND,\n      `Asset not found for given asset id.`,\n      {},\n      error\n    );\n  }\n\n  if (gqlErrorMessage.RPC_CONSISTENCY.test(error.message)) {\n    return new FuelError(ErrorCode.RPC_CONSISTENCY, error.message, {}, error);\n  }\n\n  if (gqlErrorMessage.INSUFFICIENT_FEE_AMOUNT.test(error.message)) {\n    const match = error.message.match(gqlErrorMessage.INSUFFICIENT_FEE_AMOUNT);\n    return new FuelError(ErrorCode.FUNDS_TOO_LOW, match?.[0] || error.message, {}, error);\n  }\n\n  return new FuelError(ErrorCode.INVALID_REQUEST, error.message, {}, error);\n};\n\nconst mapGqlErrorWithIncompatibleNodeVersion = (\n  error: FuelError,\n  incompatibleNodeVersionMessage: string | false\n) => {\n  if (!incompatibleNodeVersionMessage) {\n    return error;\n  }\n\n  return new FuelError(\n    error.code,\n    `${error.message}\\n\\n${incompatibleNodeVersionMessage}`,\n    error.metadata,\n    error.rawError\n  );\n};\n\nexport const assertGqlResponseHasNoErrors = (\n  errors: GqlError[] | undefined,\n  incompatibleNodeVersionMessage: string | false = false\n) => {\n  if (!Array.isArray(errors)) {\n    return;\n  }\n\n  const mappedErrors = errors.map(mapGqlErrorMessage);\n  if (mappedErrors.length === 1) {\n    throw mapGqlErrorWithIncompatibleNodeVersion(mappedErrors[0], incompatibleNodeVersionMessage);\n  }\n\n  const errorMessage = mappedErrors.map((err) => err.message).join('\\n');\n  throw mapGqlErrorWithIncompatibleNodeVersion(\n    new FuelError(ErrorCode.INVALID_REQUEST, errorMessage, {}, mappedErrors),\n    incompatibleNodeVersionMessage\n  );\n};\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport { isRequestInputCoin, isRequestInputCoinOrMessage } from './transaction-request';\nimport type {\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n  TransactionRequestInput,\n} from './transaction-request';\n\ntype ResourcesOwnersMap = Map<string, { utxos: Set<string>; messages: Set<string> }>;\n\ninterface TransactionResourcesCache {\n  owners: ResourcesOwnersMap;\n  timestamp: number;\n}\n\nconst cache = new Map<string, TransactionResourcesCache>();\n\nexport class ResourceCache {\n  readonly ttl: number;\n\n  constructor(ttl: number) {\n    this.ttl = ttl; // TTL in milliseconds\n\n    if (typeof ttl !== 'number' || this.ttl <= 0) {\n      throw new FuelError(\n        ErrorCode.INVALID_TTL,\n        `Invalid TTL: ${this.ttl}. Use a value greater than zero.`\n      );\n    }\n  }\n\n  // Add resources to the cache\n  set(transactionId: string, inputs: TransactionRequestInput[]): void {\n    const transactionResourceCache = this.setupResourcesCache(inputs);\n    cache.set(transactionId, transactionResourceCache);\n  }\n\n  unset(transactionId: string): void {\n    cache.delete(transactionId);\n  }\n\n  getActiveData(owner: string) {\n    const activeData: { utxos: string[]; messages: string[] } = { utxos: [], messages: [] };\n    const currentTime = Date.now();\n    const expired: string[] = [];\n\n    cache.forEach((resource, transactionId) => {\n      const isActive = currentTime - resource.timestamp < this.ttl;\n\n      if (isActive) {\n        const resourcesFromOwner = resource.owners.get(owner);\n        if (resourcesFromOwner) {\n          activeData.utxos.push(...resourcesFromOwner.utxos);\n          activeData.messages.push(...resourcesFromOwner.messages);\n        }\n      } else {\n        expired.push(transactionId);\n      }\n    });\n\n    expired.forEach(this.unset);\n\n    activeData.utxos.reverse();\n    activeData.messages.reverse();\n\n    return activeData;\n  }\n\n  isCached(owner: string, key: string): boolean {\n    const currentTime = Date.now();\n    let cached = false;\n    const expired: string[] = [];\n\n    for (const [transactionId, resourceData] of cache.entries()) {\n      const isActive = currentTime - resourceData.timestamp < this.ttl;\n      if (isActive) {\n        const resourcesFromOwner = resourceData.owners.get(owner);\n\n        if (resourcesFromOwner?.utxos.has(key) || resourcesFromOwner?.messages.has(key)) {\n          cached = true;\n          break;\n        }\n      } else {\n        expired.push(transactionId);\n      }\n    }\n\n    expired.forEach(this.unset);\n\n    return cached;\n  }\n\n  clear() {\n    cache.clear();\n  }\n\n  private setupResourcesCache(inputs: TransactionRequestInput[]) {\n    const currentTime = Date.now();\n\n    const transactionResourcesCache: TransactionResourcesCache = {\n      owners: new Map() as ResourcesOwnersMap,\n      timestamp: currentTime,\n    };\n\n    inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      const { owner, key, type } = this.extractResourceData(input);\n\n      if (!transactionResourcesCache.owners.has(owner)) {\n        transactionResourcesCache.owners.set(owner, { utxos: new Set(), messages: new Set() });\n      }\n\n      if (type === 'utxo') {\n        transactionResourcesCache.owners.get(owner)?.utxos.add(key);\n      } else {\n        transactionResourcesCache.owners.get(owner)?.messages.add(key);\n      }\n    });\n\n    return transactionResourcesCache;\n  }\n\n  private extractResourceData(input: CoinTransactionRequestInput | MessageTransactionRequestInput) {\n    if (isRequestInputCoin(input)) {\n      return { owner: hexlify(input.owner), key: hexlify(input.id), type: 'utxo' as const };\n    }\n    return { owner: hexlify(input.recipient), key: hexlify(input.nonce), type: 'message' as const };\n  }\n}\n","import { BYTES_32, UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn, toNumber } from '@fuel-ts/math';\nimport type { Input } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type CoinTransactionRequestInput = {\n  type: InputType.Coin;\n\n  /** UTXO ID */\n  id: BytesLike;\n\n  /** Owning address or script hash */\n  owner: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Asset ID of the coins */\n  assetId: BytesLike;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Index of witness that authorizes spending the coin */\n  witnessIndex: number;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n};\n\nexport type MessageTransactionRequestInput = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: BytesLike;\n\n  /** Address of recipient */\n  recipient: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Index of witness that authorizes the message */\n  witnessIndex: number;\n\n  /** Unique nonce of message */\n  nonce: BytesLike;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n\n  /** data of message */\n  data?: BytesLike;\n};\n\nexport type ContractTransactionRequestInput = {\n  type: InputType.Contract;\n\n  /** ID of the last transaction that modified the contract state (It can be zeroed if unsure) */\n  txID?: BytesLike;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Contract ID */\n  contractId: BytesLike;\n};\nexport type TransactionRequestInput =\n  | CoinTransactionRequestInput\n  | ContractTransactionRequestInput\n  | MessageTransactionRequestInput;\n\n/** @hidden */\nexport const inputify = (value: TransactionRequestInput): Input => {\n  const { type } = value;\n\n  switch (value.type) {\n    case InputType.Coin: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      return {\n        type: InputType.Coin,\n        txID: hexlify(arrayify(value.id).slice(0, BYTES_32)),\n        outputIndex: toNumber(arrayify(value.id).slice(BYTES_32, UTXO_ID_LEN)),\n        owner: hexlify(value.owner),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: bn(predicate.length),\n        predicateDataLength: bn(predicateData.length),\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n      };\n    }\n    case InputType.Contract: {\n      return {\n        type: InputType.Contract,\n        txID: hexlify(value.txID || ZeroBytes32),\n        outputIndex: 0,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        contractID: hexlify(value.contractId),\n      };\n    }\n    case InputType.Message: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      const data = arrayify(value.data ?? '0x');\n      return {\n        type: InputType.Message,\n        sender: hexlify(value.sender),\n        recipient: hexlify(value.recipient),\n        amount: bn(value.amount),\n        nonce: hexlify(value.nonce),\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: bn(predicate.length),\n        predicateDataLength: bn(predicateData.length),\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n        data: hexlify(data),\n        dataLength: data.length,\n      };\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction input type: ${type}.`\n      );\n    }\n  }\n};\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { Output } from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type CoinTransactionRequestOutput = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Amount of coins to send */\n  amount: BigNumberish;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type ContractTransactionRequestOutput = {\n  type: OutputType.Contract;\n  /** Index of input contract */\n  inputIndex: number;\n};\nexport type ChangeTransactionRequestOutput = {\n  type: OutputType.Change;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type VariableTransactionRequestOutput = {\n  type: OutputType.Variable;\n  /** Receiving address or script hash */\n  to?: BytesLike;\n  /** Amount of coins to send */\n  amount?: BigNumberish;\n  /** Asset ID of coins */\n  assetId?: BytesLike;\n};\nexport type ContractCreatedTransactionRequestOutput = {\n  type: OutputType.ContractCreated;\n  /** Contract ID */\n  contractId: BytesLike;\n  /** State Root */\n  stateRoot: BytesLike;\n};\nexport type TransactionRequestOutput =\n  | CoinTransactionRequestOutput\n  | ContractTransactionRequestOutput\n  | ChangeTransactionRequestOutput\n  | VariableTransactionRequestOutput\n  | ContractCreatedTransactionRequestOutput;\n\n/** @hidden */\nexport const outputify = (value: TransactionRequestOutput): Output => {\n  const { type } = value;\n\n  switch (type) {\n    case OutputType.Coin: {\n      return {\n        type: OutputType.Coin,\n        to: hexlify(value.to),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Contract: {\n      return {\n        type: OutputType.Contract,\n        inputIndex: value.inputIndex,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n      };\n    }\n    case OutputType.Change: {\n      return {\n        type: OutputType.Change,\n        to: hexlify(value.to),\n        amount: bn(0),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Variable: {\n      return {\n        type: OutputType.Variable,\n        to: hexlify(value.to || ZeroBytes32),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId || ZeroBytes32),\n      };\n    }\n    case OutputType.ContractCreated: {\n      return {\n        type: OutputType.ContractCreated,\n        contractId: hexlify(value.contractId),\n        stateRoot: hexlify(value.stateRoot),\n      };\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction output type: ${type}.`\n      );\n    }\n  }\n};\n","import { UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport { Address, addressify } from '@fuel-ts/address';\nimport type { AddressInput, AddressLike } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { FuelError } from '@fuel-ts/errors';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  TransactionScript,\n  Policy,\n  TransactionCreate,\n  TransactionBlob,\n  TransactionUpload,\n  TransactionUpgrade,\n} from '@fuel-ts/transactions';\nimport {\n  PolicyType,\n  TransactionCoder,\n  InputType,\n  OutputType,\n  TransactionType,\n} from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { concat, hexlify, isDefined } from '@fuel-ts/utils';\n\nimport type { Account } from '../../account';\nimport type { Coin } from '../coin';\nimport type { CoinQuantity, CoinQuantityLike } from '../coin-quantity';\nimport { coinQuantityfy } from '../coin-quantity';\nimport { isMessageCoin, type Message, type MessageCoin } from '../message';\nimport type { ChainInfo, GasCosts } from '../provider';\nimport type { Resource } from '../resource';\nimport { isCoin } from '../resource';\nimport type { TransactionSummaryJsonPartial } from '../utils';\nimport { normalizeJSON } from '../utils';\nimport { getMaxGas, getMinGas } from '../utils/gas';\n\nimport { NoWitnessAtIndexError } from './errors';\nimport {\n  getRequestInputResourceOwner,\n  isRequestInputCoinOrMessage,\n  isRequestInputResource,\n  isRequestInputResourceFromOwner,\n} from './helpers';\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport { inputify } from './input';\nimport type {\n  TransactionRequestOutput,\n  ChangeTransactionRequestOutput,\n  CoinTransactionRequestOutput,\n} from './output';\nimport { outputify } from './output';\nimport type { TransactionRequestLike } from './types';\nimport type { TransactionRequestWitness } from './witness';\nimport { witnessify } from './witness';\n\nexport {\n  /**\n   * @hidden\n   */\n  TransactionType,\n};\n\n/**\n * @hidden\n *\n * Interface defining a like structure for a base transaction request.\n */\nexport interface BaseTransactionRequestLike {\n  /** Gas price for transaction */\n  tip?: BigNumberish;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** The block number after which the transaction is no longer valid. */\n  expiration?: number;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee?: BigNumberish;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit?: BigNumberish;\n  /** List of inputs */\n  inputs?: TransactionRequestInput[];\n  /** List of outputs */\n  outputs?: TransactionRequestOutput[];\n  /** List of witnesses */\n  witnesses?: TransactionRequestWitness[];\n  /** The state of the transaction */\n  flag?: TransactionStateFlag;\n}\n\ntype ToBaseTransactionResponse = Pick<\n  TransactionScript,\n  | 'inputs'\n  | 'inputsCount'\n  | 'outputs'\n  | 'outputsCount'\n  | 'witnesses'\n  | 'witnessesCount'\n  | 'policies'\n  | 'policyTypes'\n>;\n\nexport type TransactionStateFlag =\n  | { state: undefined; transactionId: undefined; summary: undefined }\n  | {\n      state: 'funded';\n      transactionId: string;\n      summary: TransactionSummaryJsonPartial | undefined;\n    };\n\n/**\n * Abstract class to define the functionalities of a transaction request transaction request.\n */\nexport abstract class BaseTransactionRequest implements BaseTransactionRequestLike {\n  /** Type of the transaction */\n  abstract type: TransactionType;\n  /** Gas price for transaction */\n  tip?: BN;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** The block number after which the transaction is no longer valid. */\n  expiration?: number;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee: BN;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit?: BN | undefined;\n  /** List of inputs */\n  inputs: TransactionRequestInput[] = [];\n  /** List of outputs */\n  outputs: TransactionRequestOutput[] = [];\n  /** List of witnesses */\n  witnesses: TransactionRequestWitness[] = [];\n\n  /**\n   * The current status of the transaction\n   */\n  flag: TransactionStateFlag = { state: undefined, transactionId: undefined, summary: undefined };\n\n  /**\n   * Constructor for initializing a base transaction request.\n   *\n   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.\n   */\n  constructor({\n    tip,\n    maturity,\n    expiration,\n    maxFee,\n    witnessLimit,\n    inputs,\n    outputs,\n    witnesses,\n    flag,\n  }: BaseTransactionRequestLike = {}) {\n    this.tip = tip ? bn(tip) : undefined;\n    this.maturity = maturity && maturity > 0 ? maturity : undefined;\n    this.expiration = expiration && expiration > 0 ? expiration : undefined;\n    this.witnessLimit = isDefined(witnessLimit) ? bn(witnessLimit) : undefined;\n    this.maxFee = bn(maxFee);\n    this.inputs = inputs ?? [];\n    this.outputs = outputs ?? [];\n    this.witnesses = witnesses ?? [];\n    this.flag = flag ?? { state: undefined, transactionId: undefined, summary: undefined };\n  }\n\n  static getPolicyMeta(req: BaseTransactionRequest) {\n    let policyTypes = 0;\n    const policies: Policy[] = [];\n\n    const { tip, witnessLimit, maturity, expiration } = req;\n\n    if (bn(tip).gt(0)) {\n      policyTypes += PolicyType.Tip;\n      policies.push({ data: bn(tip), type: PolicyType.Tip });\n    }\n    if (isDefined(witnessLimit) && bn(witnessLimit).gte(0)) {\n      policyTypes += PolicyType.WitnessLimit;\n      policies.push({ data: bn(witnessLimit), type: PolicyType.WitnessLimit });\n    }\n    if (maturity && maturity > 0) {\n      policyTypes += PolicyType.Maturity;\n      policies.push({ data: maturity, type: PolicyType.Maturity });\n    }\n\n    policyTypes += PolicyType.MaxFee;\n    policies.push({ data: req.maxFee, type: PolicyType.MaxFee });\n\n    if (expiration && expiration > 0) {\n      policyTypes += PolicyType.Expiration;\n      policies.push({ data: expiration, type: PolicyType.Expiration });\n    }\n\n    return {\n      policyTypes,\n      policies,\n    };\n  }\n\n  /**\n   * Method to obtain the base transaction details.\n   *\n   * @returns The base transaction details.\n   */\n\n  protected getBaseTransaction(): ToBaseTransactionResponse {\n    const inputs = this.inputs?.map(inputify) ?? [];\n    const outputs = this.outputs?.map(outputify) ?? [];\n    const witnesses = this.witnesses?.map(witnessify) ?? [];\n\n    const { policyTypes, policies } = BaseTransactionRequest.getPolicyMeta(this);\n\n    return {\n      policyTypes,\n      inputs,\n      outputs,\n      policies,\n      witnesses,\n      inputsCount: inputs.length,\n      outputsCount: outputs.length,\n      witnessesCount: witnesses.length,\n    };\n  }\n\n  abstract toTransaction():\n    | TransactionCreate\n    | TransactionScript\n    | TransactionBlob\n    | TransactionUpgrade\n    | TransactionUpload;\n\n  /**\n   * Converts the transaction request to a byte array.\n   *\n   * @returns The transaction bytes.\n   */\n  toTransactionBytes(): Uint8Array {\n    return new TransactionCoder().encode(this.toTransaction());\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an input to the list without any side effects and returns the index\n   */\n  protected pushInput(input: TransactionRequestInput): number {\n    this.inputs.push(input);\n    return this.inputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an output to the list without any side effects and returns the index\n   */\n  protected pushOutput(output: TransactionRequestOutput): number {\n    this.outputs.push(output);\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes a witness to the list and returns the index\n   *\n   * @param signature - The signature to add to the witness.\n   * @returns The index of the created witness.\n   */\n  addWitness(signature: BytesLike) {\n    this.witnesses.push(signature);\n    return this.witnesses.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Creates an empty witness without any side effects and returns the index\n   *\n   * @returns The index of the created witness.\n   */\n  addEmptyWitness(): number {\n    // Push a dummy witness with same byte size as a real witness signature\n    return this.addWitness(concat([ZeroBytes32, ZeroBytes32]));\n  }\n\n  /**\n   * Updates the witness for a given owner and signature.\n   *\n   * @param address - The address to get the coin input witness index for.\n   * @param signature - The signature to update the witness with.\n   */\n  updateWitnessByOwner(address: AddressInput, signature: BytesLike) {\n    const ownerAddress = new Address(address);\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);\n    if (typeof witnessIndex === 'number') {\n      this.updateWitness(witnessIndex, signature);\n    }\n  }\n\n  /**\n   * Updates an existing witness without any side effects.\n   *\n   * @param index - The index of the witness to update.\n   * @param witness - The new witness.\n   * @throws If the witness does not exist.\n   */\n  updateWitness(index: number, witness: TransactionRequestWitness) {\n    if (!this.witnesses[index]) {\n      throw new NoWitnessAtIndexError(index);\n    }\n    this.witnesses[index] = witness;\n  }\n\n  /**\n   * Helper function to add an external signature to the transaction.\n   *\n   * @param account - The account/s to sign to the transaction.\n   * @returns The transaction with the signature witness added.\n   */\n  async addAccountWitnesses(account: Account | Account[]) {\n    const accounts = Array.isArray(account) ? account : [account];\n    await Promise.all(\n      accounts.map(async (acc) => {\n        this.addWitness(await acc.signTransaction(<TransactionRequestLike>this));\n      })\n    );\n\n    return this;\n  }\n\n  /**\n   * Gets the coin inputs for a transaction.\n   *\n   * @returns The coin inputs.\n   */\n  getCoinInputs(): CoinTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is CoinTransactionRequestInput => input.type === InputType.Coin\n    );\n  }\n\n  /**\n   * Gets the coin outputs for a transaction.\n   *\n   * @returns The coin outputs.\n   */\n  getCoinOutputs(): CoinTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is CoinTransactionRequestOutput => output.type === OutputType.Coin\n    );\n  }\n\n  /**\n   * Gets the change outputs for a transaction.\n   *\n   * @returns The change outputs.\n   */\n  getChangeOutputs(): ChangeTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ChangeTransactionRequestOutput => output.type === OutputType.Change\n    );\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns the witnessIndex of the found CoinInput.\n   */\n  getCoinInputWitnessIndexByOwner(owner: AddressLike): number | undefined {\n    const ownerAddress = addressify(owner);\n\n    const found = this.inputs.find((input) => {\n      switch (input.type) {\n        case InputType.Coin:\n          return hexlify((<CoinTransactionRequestInput>input).owner) === ownerAddress.toB256();\n        case InputType.Message:\n          return (\n            hexlify((<MessageTransactionRequestInput>input).recipient) === ownerAddress.toB256()\n          );\n        default:\n          return false;\n      }\n    });\n\n    return (<CoinTransactionRequestInput>found)?.witnessIndex;\n  }\n\n  /**\n   * Adds a single coin input to the transaction and a change output for the related\n   * assetId, if one it was not added yet.\n   *\n   * @param coin - Coin resource.\n   */\n  addCoinInput(coin: Coin) {\n    const { assetId, owner, amount, id, predicate, predicateData } = coin;\n\n    let witnessIndex;\n\n    if (coin.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);\n\n      // Insert a dummy witness if no witness exists\n      if (typeof witnessIndex !== 'number') {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n\n    const input: CoinTransactionRequestInput = {\n      id,\n      type: InputType.Coin,\n      owner: owner.toB256(),\n      amount,\n      assetId,\n      txPointer: '0x00000000000000000000000000000000',\n      witnessIndex,\n      predicate,\n      predicateData,\n    };\n\n    // Insert the Input\n    this.pushInput(input);\n\n    // Insert a ChangeOutput if it does not exist\n    this.addChangeOutput(owner, assetId);\n  }\n\n  /**\n   * Adds a single message input to the transaction and a change output for the\n   * asset against the message\n   *\n   * @param message - Message resource.\n   */\n  addMessageInput(message: Message | MessageCoin) {\n    const { recipient, sender, amount, predicate, nonce, predicateData } = message;\n\n    let witnessIndex;\n\n    if (message.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);\n\n      // Insert a dummy witness if no witness exists\n      if (typeof witnessIndex !== 'number') {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n\n    const input: MessageTransactionRequestInput = {\n      nonce,\n      type: InputType.Message,\n      sender: sender.toB256(),\n      recipient: recipient.toB256(),\n      data: isMessageCoin(message) ? '0x' : message.data,\n      amount,\n      witnessIndex,\n      predicate,\n      predicateData,\n    };\n\n    // Insert the Input\n    this.pushInput(input);\n\n    // Insert a ChangeOutput if it does not exist\n    if (isMessageCoin(message)) {\n      this.addChangeOutput(recipient, message.assetId);\n    }\n  }\n\n  /**\n   * Adds a single resource to the transaction by adding a coin/message input and a\n   * change output for the related assetId, if one it was not added yet.\n   *\n   * @param resource - The resource to add.\n   * @returns This transaction.\n   */\n  addResource(resource: Resource) {\n    if (isCoin(resource)) {\n      this.addCoinInput(resource);\n    } else {\n      this.addMessageInput(resource);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds multiple resources to the transaction by adding coin/message inputs and change\n   * outputs from the related assetIds.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResources(resources: ReadonlyArray<Resource>) {\n    resources.forEach((resource) => this.addResource(resource));\n\n    return this;\n  }\n\n  /**\n   * Adds a coin output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param amount - Amount of coin.\n   * @param assetId - Asset ID of coin.\n   */\n  addCoinOutput(to: AddressLike, amount: BigNumberish, assetId: BytesLike) {\n    this.pushOutput({\n      type: OutputType.Coin,\n      to: addressify(to).toB256(),\n      amount,\n      assetId,\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds multiple coin outputs to the transaction.\n   *\n   * @param to - Address of the destination.\n   * @param quantities - Quantities of coins.\n   */\n  addCoinOutputs(to: AddressLike, quantities: CoinQuantityLike[]) {\n    quantities.map(coinQuantityfy).forEach((quantity) => {\n      this.pushOutput({\n        type: OutputType.Coin,\n        to: addressify(to).toB256(),\n        amount: quantity.amount,\n        assetId: quantity.assetId,\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds a change output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param assetId - Asset ID of coin.\n   */\n  addChangeOutput(to: AddressLike, assetId: BytesLike) {\n    // Find the ChangeOutput for the AssetId of the Resource\n    const changeOutput = this.getChangeOutputs().find(\n      (output) => hexlify(output.assetId) === assetId\n    );\n\n    // Insert a ChangeOutput if it does not exist\n    if (!changeOutput) {\n      this.pushOutput({\n        type: OutputType.Change,\n        to: addressify(to).toB256(),\n        assetId,\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  byteSize() {\n    return this.toTransactionBytes().length;\n  }\n\n  /**\n   * @hidden\n   */\n  metadataGas(_gasCosts: GasCosts): BN {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Not implemented');\n  }\n\n  /**\n   * @hidden\n   */\n  calculateMinGas(chainInfo: ChainInfo): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      gasCosts,\n      feeParameters: { gasPerByte },\n    } = consensusParameters;\n    return getMinGas({\n      gasPerByte,\n      gasCosts,\n      inputs: this.inputs,\n      txBytesSize: this.byteSize(),\n      metadataGas: this.metadataGas(gasCosts),\n    });\n  }\n\n  calculateMaxGas(chainInfo: ChainInfo, minGas: BN): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx },\n    } = consensusParameters;\n\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      maxGasPerTx,\n    });\n  }\n\n  /**\n   * Funds the transaction with fake UTXOs for each assetId and amount in the\n   * quantities array.\n   *\n   * @param quantities - CoinQuantity Array.\n   * @param baseAssetId - The base asset to fund the transaction.\n   * @deprecated - This method is deprecated and will be removed in future versions.\n   * Please use `Account.generateFakeResources` along with `this.addResources` instead.\n   */\n  fundWithFakeUtxos(quantities: CoinQuantity[], baseAssetId: string, resourcesOwner?: Address) {\n    const findAssetInput = (assetId: string) =>\n      this.inputs.find((input) => {\n        if ('assetId' in input) {\n          return input.assetId === assetId;\n        }\n        return false;\n      });\n\n    const updateAssetInput = (assetId: string, quantity: BN) => {\n      const assetInput = findAssetInput(assetId);\n\n      let usedQuantity = quantity;\n\n      if (assetId === baseAssetId) {\n        usedQuantity = bn('1000000000000000000');\n      }\n\n      if (assetInput && 'assetId' in assetInput) {\n        assetInput.id = hexlify(randomBytes(UTXO_ID_LEN));\n        assetInput.amount = usedQuantity;\n      } else {\n        this.addResources([\n          {\n            id: hexlify(randomBytes(UTXO_ID_LEN)),\n            amount: usedQuantity,\n            assetId,\n            owner: resourcesOwner || Address.fromRandom(),\n            blockCreated: bn(1),\n            txCreatedIdx: bn(1),\n          },\n        ]);\n      }\n    };\n\n    updateAssetInput(baseAssetId, bn(100_000_000_000));\n    quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));\n\n    return this;\n  }\n\n  /**\n   * Retrieves an array of CoinQuantity for each coin output present in the transaction.\n   * a transaction.\n   *\n   * @returns  CoinQuantity array.\n   */\n  getCoinOutputsQuantities(): CoinQuantity[] {\n    const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({\n      amount: bn(amount),\n      assetId: assetId.toString(),\n    }));\n\n    return coinsQuantities;\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  abstract getTransactionId(chainId: number): string;\n\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction.\n   *\n   * @returns The transaction as a JSON object.\n   */\n  toJSON() {\n    return normalizeJSON(this);\n  }\n\n  removeWitness(index: number) {\n    this.witnesses.splice(index, 1);\n    this.adjustWitnessIndexes(index);\n  }\n\n  private adjustWitnessIndexes(removedIndex: number) {\n    this.inputs.filter(isRequestInputResource).forEach((input) => {\n      if (input.witnessIndex > removedIndex) {\n        // eslint-disable-next-line no-param-reassign\n        input.witnessIndex -= 1;\n      }\n    });\n  }\n\n  updatePredicateGasUsed(inputs: TransactionRequestInput[]) {\n    const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);\n\n    this.inputs.filter(isRequestInputResource).forEach((i) => {\n      const owner = getRequestInputResourceOwner(i);\n      const correspondingInput = inputsToExtractGasUsed.find((x) =>\n        isRequestInputResourceFromOwner(x, new Address(String(owner)))\n      );\n\n      if (\n        correspondingInput &&\n        'predicateGasUsed' in correspondingInput &&\n        bn(correspondingInput.predicateGasUsed).gt(0)\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        i.predicateGasUsed = correspondingInput.predicateGasUsed;\n      }\n    });\n  }\n\n  byteLength(): number {\n    return this.toTransactionBytes().byteLength;\n  }\n\n  /**\n   * @hidden\n   *\n   * Used internally to update the state of a transaction request.\n   *\n   * @param state - The state to update.\n   */\n  public updateState(\n    chainId: number,\n    state?: TransactionStateFlag['state'],\n    summary?: TransactionSummaryJsonPartial\n  ) {\n    if (!state) {\n      this.flag = { state: undefined, transactionId: undefined, summary: undefined };\n      return;\n    }\n\n    const transactionId = this.getTransactionId(chainId);\n    this.flag = { state, transactionId, summary };\n  }\n}\n","import type { Address } from '@fuel-ts/address';\nimport type { BN } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { GqlMessageState } from './__generated__/operations';\n\n/**\n * A Fuel message\n */\nexport type Message = {\n  messageId: BytesLike;\n  sender: Address;\n  recipient: Address;\n  nonce: BytesLike;\n  amount: BN;\n  data: BytesLike;\n  daHeight: BN;\n  predicate?: BytesLike;\n  predicateData?: BytesLike;\n};\n\nexport type MessageCoin = {\n  assetId: string;\n  sender: Address;\n  recipient: Address;\n  nonce: BytesLike;\n  amount: BN;\n  daHeight: BN;\n  predicate?: BytesLike;\n  predicateData?: BytesLike;\n};\n\nexport type MerkleProof = {\n  proofSet: Array<string>;\n  proofIndex: BN;\n};\n\nexport type BlockHeader = {\n  id: string;\n  daHeight: BN;\n  transactionsCount: number;\n  transactionsRoot: string;\n  height: BN;\n  prevRoot: string;\n  time: string;\n  applicationHash: string;\n  messageOutboxRoot: string;\n  eventInboxRoot: string;\n  consensusParametersVersion: number;\n  stateTransitionBytecodeVersion: number;\n  messageReceiptCount: number;\n};\n\n/**\n * Message Proof\n */\nexport type MessageProof = {\n  messageProof: MerkleProof;\n  blockProof: MerkleProof;\n  messageBlockHeader: BlockHeader;\n  commitBlockHeader: BlockHeader;\n  sender: Address;\n  recipient: Address;\n  nonce: string;\n  amount: BN;\n  data: string;\n};\n\n/**\n * Message Status\n */\nexport type MessageStatus = {\n  state: GqlMessageState;\n};\n\nexport const isMessageCoin = (message: Message | MessageCoin): message is MessageCoin =>\n  !('data' in message);\n","import type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Coin } from './coin';\nimport type { MessageCoin } from './message';\n\nexport type RawCoin = {\n  utxoId: string;\n  owner: string;\n  amount: string;\n  assetId: string;\n  blockCreated: string;\n  txCreatedIdx: string;\n};\n\nexport type RawMessage = {\n  amount: string;\n  sender: string;\n  assetId: string;\n  recipient: string;\n  data: string;\n  nonce: string;\n  daHeight: string;\n};\n\nexport type RawResource = RawCoin | RawMessage;\nexport type Resource = Coin | MessageCoin;\n\n/**\n * @hidden\n * @deprecated Use type `ResourcesIdsToIgnore` instead\n */\nexport type ExcludeResourcesOption = {\n  utxos?: BytesLike[];\n  messages?: BytesLike[];\n};\n\n/** @hidden */\nexport const isRawCoin = (resource: RawResource): resource is RawCoin => 'utxoId' in resource;\n/** @hidden */\nexport const isRawMessage = (resource: RawResource): resource is RawMessage =>\n  'recipient' in resource;\n/** @hidden */\nexport const isCoin = (resource: Resource): resource is Coin => 'id' in resource;\n/** @hidden */\nexport const isMessage = (resource: Resource): resource is MessageCoin => 'recipient' in resource;\n","import type { ReceiptPanic, ReceiptRevert } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport { FAILED_TRANSFER_TO_ADDRESS_SIGNAL } from '@fuel-ts/transactions/configs';\n\nimport type { TransactionReceiptJson } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\nimport { deserializeReceipt } from './serialization';\n\n/** @hidden */\nconst doesReceiptHaveMissingOutputVariables = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptRevert =>\n  receipt.type === ReceiptType.Revert &&\n  receipt.val.toString('hex') === FAILED_TRANSFER_TO_ADDRESS_SIGNAL;\n\n/** @hidden */\nconst doesReceiptHaveMissingContractId = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptPanic =>\n  receipt.type === ReceiptType.Panic &&\n  receipt.contractId !== '0x0000000000000000000000000000000000000000000000000000000000000000';\n\n/** @hidden */\nexport const getReceiptsWithMissingData = (receipts: Array<TransactionResultReceipt>) =>\n  receipts.reduce<{\n    missingOutputVariables: Array<ReceiptRevert>;\n    missingOutputContractIds: Array<ReceiptPanic>;\n  }>(\n    (memo, receipt) => {\n      if (doesReceiptHaveMissingOutputVariables(receipt)) {\n        memo.missingOutputVariables.push(receipt);\n      }\n      if (doesReceiptHaveMissingContractId(receipt)) {\n        memo.missingOutputContractIds.push(receipt);\n      }\n      return memo;\n    },\n    {\n      missingOutputVariables: [],\n      missingOutputContractIds: [],\n    }\n  );\n\n/** @deprecated Use `deserializeReceipt` instead. */\nexport const assembleReceiptByType = (\n  gqlReceipt: TransactionReceiptJson\n): TransactionResultReceipt => deserializeReceipt(gqlReceipt);\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  Output,\n  ReceiptBurn,\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptMessageOut,\n  ReceiptMint,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptScriptResult,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n} from '@fuel-ts/transactions';\nimport {\n  getMintedAssetId,\n  InputMessageCoder,\n  InputType,\n  OutputType,\n  ReceiptType,\n} from '@fuel-ts/transactions';\nimport { hexlify, arrayify, assertUnreachable } from '@fuel-ts/utils';\n\nimport type {\n  GqlInputCoinFragment,\n  GqlInputContractFragment,\n  GqlInputMessageFragment,\n  GqlOutputChangeFragment,\n  GqlOutputCoinFragment,\n  GqlOutputContractCreatedFragment,\n  GqlOutputContractFragment,\n  GqlOutputVariableFragment,\n} from '../__generated__/operations';\nimport { GqlReceiptType } from '../__generated__/operations';\nimport type {\n  ChainInfo,\n  NodeInfo,\n  ChainInfoJson,\n  NodeInfoJson,\n  TransactionReceiptJson,\n} from '../provider';\nimport type Provider from '../provider';\nimport type { TransactionRequestInput, TransactionRequestOutput } from '../transaction-request';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\ntype InputJson = GqlInputCoinFragment | GqlInputMessageFragment | GqlInputContractFragment;\n\ntype OutputJson =\n  | GqlOutputCoinFragment\n  | GqlOutputChangeFragment\n  | GqlOutputVariableFragment\n  | GqlOutputContractFragment\n  | GqlOutputContractCreatedFragment;\n\nexport interface ProviderCache {\n  consensusParametersTimestamp?: number;\n  chain: ChainInfo;\n  nodeInfo: NodeInfo;\n}\n\nexport interface ProviderCacheJson {\n  consensusParametersTimestamp?: number;\n  chain: ChainInfoJson;\n  nodeInfo: NodeInfoJson;\n}\n\nexport interface TransactionSummaryJson {\n  id: string;\n  transactionBytes: string;\n  receipts: TransactionReceiptJson[];\n  gasPrice: string;\n}\n\nexport type TransactionSummaryJsonPartial = Omit<TransactionSummaryJson, 'id' | 'transactionBytes'>;\n\n/** @hidden */\nexport const deserializeChain = (chain: ChainInfoJson): ChainInfo => {\n  const { name, daHeight, consensusParameters, latestBlock } = chain;\n\n  const {\n    contractParams,\n    feeParams,\n    predicateParams,\n    scriptParams,\n    txParams,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version,\n  } = consensusParameters;\n\n  return {\n    name,\n    baseChainHeight: bn(daHeight),\n    consensusParameters: {\n      version,\n      chainId: bn(chainId),\n      baseAssetId,\n      feeParameters: {\n        version: feeParams.version,\n        gasPerByte: bn(feeParams.gasPerByte),\n        gasPriceFactor: bn(feeParams.gasPriceFactor),\n      },\n      contractParameters: {\n        version: contractParams.version,\n        contractMaxSize: bn(contractParams.contractMaxSize),\n        maxStorageSlots: bn(contractParams.maxStorageSlots),\n      },\n      txParameters: {\n        version: txParams.version,\n        maxInputs: bn(txParams.maxInputs),\n        maxOutputs: bn(txParams.maxOutputs),\n        maxWitnesses: bn(txParams.maxWitnesses),\n        maxGasPerTx: bn(txParams.maxGasPerTx),\n        maxSize: bn(txParams.maxSize),\n        maxBytecodeSubsections: bn(txParams.maxBytecodeSubsections),\n      },\n      predicateParameters: {\n        version: predicateParams.version,\n        maxPredicateLength: bn(predicateParams.maxPredicateLength),\n        maxPredicateDataLength: bn(predicateParams.maxPredicateDataLength),\n        maxGasPerPredicate: bn(predicateParams.maxGasPerPredicate),\n        maxMessageDataLength: bn(predicateParams.maxMessageDataLength),\n      },\n      scriptParameters: {\n        version: scriptParams.version,\n        maxScriptLength: bn(scriptParams.maxScriptLength),\n        maxScriptDataLength: bn(scriptParams.maxScriptDataLength),\n      },\n      gasCosts,\n    },\n    latestBlock,\n  };\n};\n\n/** @hidden */\nexport const serializeChain = (chain: ChainInfo): ChainInfoJson => {\n  const { name, baseChainHeight, consensusParameters, latestBlock } = chain;\n\n  const {\n    contractParameters,\n    feeParameters,\n    predicateParameters,\n    scriptParameters,\n    txParameters,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version,\n  } = consensusParameters;\n\n  return {\n    name,\n    daHeight: baseChainHeight.toString(),\n    consensusParameters: {\n      version,\n      chainId: chainId.toString(),\n      baseAssetId,\n      feeParams: {\n        version: feeParameters.version,\n        gasPerByte: feeParameters.gasPerByte.toString(),\n        gasPriceFactor: feeParameters.gasPriceFactor.toString(),\n      },\n      contractParams: {\n        version: contractParameters.version,\n        contractMaxSize: contractParameters.contractMaxSize.toString(),\n        maxStorageSlots: contractParameters.maxStorageSlots.toString(),\n      },\n      txParams: {\n        version: txParameters.version,\n        maxInputs: txParameters.maxInputs.toString(),\n        maxOutputs: txParameters.maxOutputs.toString(),\n        maxWitnesses: txParameters.maxWitnesses.toString(),\n        maxGasPerTx: txParameters.maxGasPerTx.toString(),\n        maxSize: txParameters.maxSize.toString(),\n        maxBytecodeSubsections: txParameters.maxBytecodeSubsections.toString(),\n      },\n      predicateParams: {\n        version: predicateParameters.version,\n        maxPredicateLength: predicateParameters.maxPredicateLength.toString(),\n        maxPredicateDataLength: predicateParameters.maxPredicateDataLength.toString(),\n        maxGasPerPredicate: predicateParameters.maxGasPerPredicate.toString(),\n        maxMessageDataLength: predicateParameters.maxMessageDataLength.toString(),\n      },\n      scriptParams: {\n        version: scriptParameters.version,\n        maxScriptLength: scriptParameters.maxScriptLength.toString(),\n        maxScriptDataLength: scriptParameters.maxScriptDataLength.toString(),\n      },\n      gasCosts,\n    },\n    latestBlock,\n  };\n};\n\n/** @hidden */\nexport const deserializeNodeInfo = (nodeInfo: NodeInfoJson): NodeInfo => {\n  const { maxDepth, maxTx, nodeVersion, utxoValidation, vmBacktrace, indexation } = nodeInfo;\n\n  return {\n    maxDepth: bn(maxDepth),\n    maxTx: bn(maxTx),\n    nodeVersion,\n    utxoValidation,\n    vmBacktrace,\n    indexation,\n  };\n};\n\n/** @hidden */\nexport const serializeNodeInfo = (nodeInfo: NodeInfo): NodeInfoJson => {\n  const { maxDepth, maxTx, nodeVersion, utxoValidation, vmBacktrace, indexation } = nodeInfo;\n\n  return {\n    maxDepth: maxDepth.toString(),\n    maxTx: maxTx.toString(),\n    nodeVersion,\n    utxoValidation,\n    vmBacktrace,\n    indexation,\n  };\n};\n\n/** @hidden */\nexport const deserializeProviderCache = (cache: ProviderCacheJson): ProviderCache => ({\n  consensusParametersTimestamp: cache.consensusParametersTimestamp,\n  chain: deserializeChain(cache.chain),\n  nodeInfo: deserializeNodeInfo(cache.nodeInfo),\n});\n\n/** @hidden */\nexport const serializeProviderCache = async (provider: Provider): Promise<ProviderCacheJson> => ({\n  consensusParametersTimestamp: provider.consensusParametersTimestamp,\n  chain: serializeChain(await provider.getChain()),\n  nodeInfo: serializeNodeInfo(await provider.getNode()),\n});\n\nconst hexOrZero = (hex?: string | null) => hex || ZeroBytes32;\n\n/** @hidden */\nexport const deserializeReceipt = (receipt: TransactionReceiptJson): TransactionResultReceipt => {\n  const { receiptType } = receipt;\n\n  switch (receiptType) {\n    case GqlReceiptType.Call: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const callReceipt: ReceiptCall = {\n        type: ReceiptType.Call,\n        id,\n        to: hexOrZero(receipt?.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        gas: bn(receipt.gas),\n        param1: bn(receipt.param1),\n        param2: bn(receipt.param2),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return callReceipt;\n    }\n\n    case GqlReceiptType.Return: {\n      const returnReceipt: ReceiptReturn = {\n        type: ReceiptType.Return,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return returnReceipt;\n    }\n\n    case GqlReceiptType.ReturnData: {\n      const returnDataReceipt: ReceiptReturnData = {\n        type: ReceiptType.ReturnData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn(receipt.is),\n      };\n\n      return returnDataReceipt;\n    }\n\n    case GqlReceiptType.Panic: {\n      const panicReceipt: ReceiptPanic = {\n        type: ReceiptType.Panic,\n        id: hexOrZero(receipt.id),\n        reason: bn(receipt.reason),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n        contractId: hexOrZero(receipt.contractId),\n      };\n\n      return panicReceipt;\n    }\n\n    case GqlReceiptType.Revert: {\n      const revertReceipt: ReceiptRevert = {\n        type: ReceiptType.Revert,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn(receipt.ra),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return revertReceipt;\n    }\n\n    case GqlReceiptType.Log: {\n      const ra = bn(receipt.ra);\n      const rb = bn(receipt.rb);\n      const rc = bn(receipt.rc);\n      const rd = bn(receipt.rd);\n\n      const logReceipt: ReceiptLog = {\n        type: ReceiptType.Log,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        rc,\n        rd,\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return logReceipt;\n    }\n\n    case GqlReceiptType.LogData: {\n      const ra = bn(receipt.ra);\n      const rb = bn(receipt.rb);\n      const logDataReceipt: ReceiptLogData = {\n        type: ReceiptType.LogData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn(receipt.is),\n      };\n      return logDataReceipt;\n    }\n\n    case GqlReceiptType.Transfer: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferReceipt: ReceiptTransfer = {\n        type: ReceiptType.Transfer,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt?.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return transferReceipt;\n    }\n\n    case GqlReceiptType.TransferOut: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferOutReceipt: ReceiptTransferOut = {\n        type: ReceiptType.TransferOut,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return transferOutReceipt;\n    }\n\n    case GqlReceiptType.ScriptResult: {\n      const scriptResultReceipt: ReceiptScriptResult = {\n        type: ReceiptType.ScriptResult,\n        result: bn(receipt.result),\n        gasUsed: bn(receipt.gasUsed),\n      };\n\n      return scriptResultReceipt;\n    }\n\n    case GqlReceiptType.MessageOut: {\n      const sender = hexOrZero(receipt.sender);\n      const recipient = hexOrZero(receipt.recipient);\n      const nonce = hexOrZero(receipt.nonce);\n      const amount = bn(receipt.amount);\n      const data = receipt.data ? arrayify(receipt.data) : Uint8Array.from([]);\n      const digest = hexOrZero(receipt.digest);\n      const len = bn(receipt.len).toNumber();\n\n      const messageId = InputMessageCoder.getMessageId({\n        sender,\n        recipient,\n        nonce,\n        amount,\n        data: hexlify(data),\n      });\n\n      const receiptMessageOut: ReceiptMessageOut = {\n        type: ReceiptType.MessageOut,\n        sender,\n        recipient,\n        amount,\n        nonce,\n        len,\n        data,\n        digest,\n        messageId,\n      };\n\n      return receiptMessageOut;\n    }\n\n    case GqlReceiptType.Mint: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n\n      const mintReceipt: ReceiptMint = {\n        type: ReceiptType.Mint,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return mintReceipt;\n    }\n\n    case GqlReceiptType.Burn: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n\n      const burnReceipt: ReceiptBurn = {\n        type: ReceiptType.Burn,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return burnReceipt;\n    }\n\n    default:\n      throw new FuelError(ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);\n  }\n};\n\nexport const deserializeInput = (input: InputJson) => {\n  let parsedInput: TransactionRequestInput;\n\n  switch (input.type) {\n    case 'InputCoin':\n      parsedInput = {\n        type: InputType.Coin,\n        id: input.utxoId,\n        amount: bn(input.amount),\n        assetId: input.assetId,\n        owner: input.owner,\n        txPointer: `0x${input.txPointer}`,\n        witnessIndex: Number(input.coinWitnessIndex),\n        predicate: input.predicate,\n        predicateData: input.predicateData,\n        predicateGasUsed: bn(input.predicateGasUsed),\n      };\n      break;\n\n    case 'InputMessage':\n      parsedInput = {\n        type: InputType.Message,\n        nonce: input.nonce,\n        amount: bn(input.amount),\n        recipient: input.recipient,\n        sender: input.sender,\n        data: input.data,\n        witnessIndex: Number(input.messageWitnessIndex),\n        predicate: input.predicate,\n        predicateData: input.predicateData,\n        predicateGasUsed: bn(input.predicateGasUsed),\n      };\n      break;\n\n    case 'InputContract':\n      parsedInput = {\n        type: InputType.Contract,\n        contractId: input.contractId,\n        txPointer: `0x${input.txPointer}`,\n        txID: hexlify(arrayify(input.utxoId).slice(0, 32)),\n      };\n      break;\n\n    default:\n      assertUnreachable(input);\n  }\n\n  return parsedInput;\n};\n\nexport const deserializeOutput = (output: OutputJson) => {\n  let parsedOutput: TransactionRequestOutput;\n\n  switch (output.type) {\n    case 'CoinOutput':\n      parsedOutput = {\n        type: OutputType.Coin,\n        amount: bn(output.amount),\n        assetId: output.assetId,\n        to: output.to,\n      };\n      break;\n\n    case 'ContractOutput':\n      parsedOutput = {\n        type: OutputType.Contract,\n        inputIndex: Number(output.inputIndex),\n      };\n      break;\n\n    case 'ChangeOutput':\n      parsedOutput = {\n        type: OutputType.Change,\n        assetId: output.assetId,\n        to: output.to,\n      };\n      break;\n\n    case 'ContractCreated':\n      parsedOutput = {\n        type: OutputType.ContractCreated,\n        stateRoot: output.stateRoot,\n        contractId: output.contract,\n      };\n      break;\n\n    case 'VariableOutput':\n      parsedOutput = {\n        type: OutputType.Variable,\n        amount: bn(output.amount),\n        assetId: output.assetId,\n        to: output.to,\n      };\n      break;\n\n    default:\n      assertUnreachable(output);\n  }\n\n  return parsedOutput;\n};\n\nexport const deserializeProcessedTxOutput = (output: OutputJson) => {\n  let parsedOutput: Output;\n\n  switch (output.type) {\n    case 'CoinOutput':\n      parsedOutput = {\n        type: OutputType.Coin,\n        amount: bn(output.amount),\n        assetId: output.assetId,\n        to: output.to,\n      };\n      break;\n\n    case 'ContractOutput':\n      parsedOutput = {\n        type: OutputType.Contract,\n        inputIndex: Number(output.inputIndex),\n        balanceRoot: output.balanceRoot,\n        stateRoot: output.stateRoot,\n      };\n      break;\n\n    case 'ChangeOutput':\n      parsedOutput = {\n        type: OutputType.Change,\n        assetId: output.assetId,\n        to: output.to,\n        amount: bn(output.amount),\n      };\n      break;\n\n    case 'ContractCreated':\n      parsedOutput = {\n        type: OutputType.ContractCreated,\n        stateRoot: output.stateRoot,\n        contractId: output.contract,\n      };\n      break;\n\n    case 'VariableOutput':\n      parsedOutput = {\n        type: OutputType.Variable,\n        amount: bn(output.amount),\n        assetId: output.assetId,\n        to: output.to,\n      };\n      break;\n\n    default:\n      assertUnreachable(output);\n  }\n\n  return parsedOutput;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nconst DEFAULT_BLOCK_EXPLORER_URL = 'https://app.fuel.network';\n\n/** @hidden */\nconst getPathFromInput = (\n  key: BuildBlockExplorerUrlHelperParam,\n  value: string | number | undefined\n) => {\n  const pathMap = {\n    address: `address`,\n    txId: `transaction`,\n    blockNumber: `block`,\n  };\n  const path = pathMap[key] || key;\n  return `${path}/${value}`;\n};\n\ntype BuildBlockExplorerUrlHelperParam = 'address' | 'txId' | 'blockNumber';\n\n/**\n * @hidden\n *\n * Builds a block explorer url based on and the given path, block explorer URL and provider URL\n */\nexport const buildBlockExplorerUrl = (\n  options: {\n    blockExplorerUrl?: string;\n    path?: string;\n    providerUrl?: string;\n    address?: string;\n    txId?: string;\n    blockNumber?: number;\n  } = {}\n) => {\n  const { blockExplorerUrl, path, providerUrl, address, txId, blockNumber } = options;\n  const explorerUrl = blockExplorerUrl || DEFAULT_BLOCK_EXPLORER_URL;\n\n  // make sure that only ONE or none of the following is defined: address, txId, blockNumber\n  const customInputParams = [\n    {\n      key: 'address',\n      value: address,\n    },\n    {\n      key: 'txId',\n      value: txId,\n    },\n    {\n      key: 'blockNumber',\n      value: blockNumber,\n    },\n  ];\n\n  const definedValues = customInputParams\n    .filter((param) => !!param.value)\n    .map(({ key, value }) => ({\n      key,\n      value,\n    }));\n\n  const hasAnyDefinedValues = definedValues.length > 0;\n\n  if (definedValues.length > 1) {\n    throw new FuelError(\n      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `Only one of the following can be passed in to buildBlockExplorerUrl: ${customInputParams\n        .map((param) => param.key)\n        .join(', ')}.`\n    );\n  }\n\n  if (path && definedValues.length > 0) {\n    const inputKeys = customInputParams.map(({ key }) => key).join(', ');\n    throw new FuelError(\n      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `You cannot pass in a path to 'buildBlockExplorerUrl' along with any of the following: ${inputKeys}.`\n    );\n  }\n\n  const pathGeneratedFromInputParams = hasAnyDefinedValues\n    ? getPathFromInput(\n        definedValues[0].key as BuildBlockExplorerUrlHelperParam,\n        definedValues[0].value\n      )\n    : '';\n\n  // Remove leading and trailing slashes from the path and block explorer url respectively, if present\n  const trimSlashes = /^\\/|\\/$/gm;\n  const cleanPath = path ? path.replace(trimSlashes, '') : pathGeneratedFromInputParams;\n  const cleanBlockExplorerUrl = explorerUrl.replace(trimSlashes, '');\n  const cleanProviderUrl = providerUrl?.replace(trimSlashes, '');\n  const encodedProviderUrl = cleanProviderUrl ? encodeURIComponent(cleanProviderUrl) : undefined;\n\n  // if the block explorer url doesn't have a protocol i.e. http:// or https://, add https://\n  const protocol = cleanBlockExplorerUrl.match(/^https?:\\/\\//) ? '' : 'https://';\n  const providerUrlProtocol = cleanProviderUrl?.match(/^https?:\\/\\//) ? '' : 'https://';\n\n  const url = `${protocol}${cleanBlockExplorerUrl}/${cleanPath}${\n    encodedProviderUrl ? `?providerUrl=${providerUrlProtocol}${encodedProviderUrl}` : ''\n  }`;\n\n  return url;\n};\n","import { bn } from '@fuel-ts/math';\nimport type { BN, BNInput } from '@fuel-ts/math';\nimport { ReceiptType, type Input } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type {\n  GqlDependentCost,\n  GqlHeavyOperation,\n  GqlLightOperation,\n} from '../__generated__/operations';\nimport type { GasCosts } from '../provider';\nimport type { TransactionRequestInput } from '../transaction-request';\nimport type {\n  TransactionResultReceipt,\n  TransactionResultScriptResultReceipt,\n} from '../transaction-response';\n\n/** @hidden */\nexport const getGasUsedFromReceipts = (receipts: Array<TransactionResultReceipt>): BN => {\n  const scriptResult = receipts.filter(\n    (receipt) => receipt.type === ReceiptType.ScriptResult\n  ) as TransactionResultScriptResultReceipt[];\n\n  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), bn(0));\n\n  return gasUsed;\n};\n\nexport function resolveGasDependentCosts(byteSize: BNInput, gasDependentCost: GqlDependentCost) {\n  const base = bn(gasDependentCost.base);\n  let dependentValue = bn(0);\n  if ('unitsPerGas' in gasDependentCost) {\n    dependentValue = bn(byteSize).div(bn((<GqlLightOperation>gasDependentCost).unitsPerGas));\n  } else {\n    dependentValue = bn(byteSize).mul(bn((<GqlHeavyOperation>gasDependentCost).gasPerUnit));\n  }\n  return base.add(dependentValue);\n}\n\nexport function gasUsedByInputs(\n  inputs: Array<TransactionRequestInput | Input>,\n  txBytesSize: number,\n  gasCosts: GasCosts\n) {\n  const witnessCache: Array<number> = [];\n\n  const chargeableInputs = inputs.filter((input) => {\n    const isCoinOrMessage = 'owner' in input || 'sender' in input;\n    if (isCoinOrMessage) {\n      if ('predicate' in input && input.predicate && input.predicate !== '0x') {\n        return true;\n      }\n\n      if (!witnessCache.includes(input.witnessIndex)) {\n        // should charge only once for each witness\n        witnessCache.push(input.witnessIndex);\n        return true;\n      }\n    }\n    return false;\n  });\n\n  const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n\n  const totalGas = chargeableInputs.reduce((total, input) => {\n    if ('predicate' in input && input.predicate && input.predicate !== '0x') {\n      return total.add(\n        vmInitializationCost\n          .add(resolveGasDependentCosts(arrayify(input.predicate).length, gasCosts.contractRoot))\n          .add(bn(input.predicateGasUsed))\n      );\n    }\n\n    return total.add(gasCosts.ecr1);\n  }, bn(0));\n  // Never allow gas to exceed MAX_U64\n  return totalGas;\n}\n\nexport interface IGetMinGasParams {\n  inputs: Array<TransactionRequestInput | Input>;\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  metadataGas: BN;\n  gasPerByte: BN;\n}\n\nexport function getMinGas(params: IGetMinGasParams) {\n  const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;\n\n  const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const bytesGas = bn(txBytesSize).mul(gasPerByte);\n  const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);\n\n  const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();\n\n  return minGas;\n}\n\nexport interface IGetMaxGasParams {\n  witnessesLength: number;\n  witnessLimit?: BN;\n  gasPerByte: BN;\n  minGas: BN;\n  gasLimit?: BN;\n  blobSize?: BN;\n  maxGasPerTx: BN;\n}\n\nexport function getMaxGas(params: IGetMaxGasParams) {\n  const {\n    gasPerByte,\n    witnessesLength,\n    witnessLimit,\n    minGas,\n    gasLimit = bn(0),\n    maxGasPerTx,\n  } = params;\n\n  let remainingAllowedWitnessGas = bn(0);\n\n  if (witnessLimit?.gt(0) && witnessLimit.gte(witnessesLength)) {\n    remainingAllowedWitnessGas = bn(witnessLimit).sub(witnessesLength).mul(gasPerByte);\n  }\n\n  const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);\n\n  return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;\n}\n\nexport function calculateMetadataGasForTxCreate({\n  gasCosts,\n  stateRootSize,\n  txBytesSize,\n  contractBytesSize,\n}: {\n  gasCosts: GasCosts;\n  contractBytesSize: BN;\n  stateRootSize: number;\n  txBytesSize: number;\n}) {\n  const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);\n  const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);\n  const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  // See https://github.com/FuelLabs/fuel-specs/blob/master/src/identifiers/contract-id.md\n  const contractIdInputSize = bn(4 + 32 + 32 + 32);\n  const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);\n  const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);\n  return metadataGas.maxU64();\n}\n\nexport function calculateMetadataGasForTxScript({\n  gasCosts,\n  txBytesSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n}) {\n  return resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n}\n\nexport function calculateMetadataGasForTxBlob({\n  gasCosts,\n  txBytesSize,\n  witnessBytesSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  witnessBytesSize: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);\n  return txId.add(blobLen);\n}\n\nexport function calculateMetadataGasForTxUpgrade({\n  gasCosts,\n  txBytesSize,\n  consensusSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  consensusSize?: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n\n  if (consensusSize) {\n    const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);\n    txId.add(consensusLen);\n  }\n\n  return txId;\n}\n\nexport function calculateMetadataGasForTxUpload({\n  gasCosts,\n  txBytesSize,\n  subsectionSize,\n  subsectionsSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  subsectionSize: number;\n  subsectionsSize: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n\n  const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);\n  txId.add(subsectionLen);\n\n  const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);\n  txId.add(subsectionsLen);\n\n  return txId;\n}\n\nexport function calculateMinGasForTxUpload({\n  gasCosts,\n  baseMinGas,\n  subsectionSize,\n}: {\n  gasCosts: GasCosts;\n  baseMinGas: number;\n  subsectionSize: number;\n}) {\n  // Since the `Upload` transaction occupies much of the storage, we want to\n  // discourage people from using it too much. For that, we charge additional gas\n  // for the storage.\n  // https://github.com/FuelLabs/fuel-vm/blob/6e137db6387bd291b9505d17e15e0f2edda7957e/fuel-tx/src/transaction/types/upload.rs#L135-L150\n  const additionalStoragePerByte = bn(gasCosts.newStoragePerByte).mul(subsectionSize);\n  return bn(baseMinGas).add(additionalStoragePerByte);\n}\n\nexport interface CalculateGasFeeParams {\n  tip?: BN;\n  gas: BN;\n  gasPrice: BN;\n  priceFactor: BN;\n}\n\nexport const calculateGasFee = (params: CalculateGasFeeParams) => {\n  const { gas, gasPrice, priceFactor, tip } = params;\n  return gas.mul(gasPrice).div(priceFactor).add(bn(tip));\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-param-reassign */\nimport { hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\n// When parsing a Transaction to JSON we need\n// to convert special types into each respective\n// JSON friendly value. This enables a tx to be\n// stringified and parsed back into a Transaction\n/** @hidden */\nfunction normalize(object: any) {\n  Object.keys(object).forEach((key) => {\n    switch (object[key]?.constructor.name) {\n      case 'Uint8Array':\n        object[key] = hexlify(object[key]);\n        break;\n      case 'Array':\n        object[key] = normalize(object[key]);\n        break;\n      case 'BN':\n        object[key] = object[key].toHex();\n        break;\n      case 'Address':\n        object[key] = object[key].toB256();\n        break;\n      case 'Object':\n        object[key] = normalize(object[key]);\n        break;\n      default:\n        break;\n    }\n  });\n  return object;\n}\n\n/**\n * Stringify Transaction to a JSON object\n * compatible with the Transaction class constructor.\n */\n/** @hidden */\nexport function normalizeJSON(root: any) {\n  // Do a single deep clone before normalizing\n  // to avoid mutating the original object\n  // and doing extra clones on each iteration\n  return normalize(clone(root));\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type { ReceiptRevert } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport {\n  FAILED_REQUIRE_SIGNAL,\n  FAILED_ASSERT_EQ_SIGNAL,\n  FAILED_ASSERT_NE_SIGNAL,\n  FAILED_ASSERT_SIGNAL,\n  FAILED_TRANSFER_TO_ADDRESS_SIGNAL,\n  PANIC_REASONS,\n  PANIC_DOC_URL,\n} from '@fuel-ts/transactions/configs';\n\nimport type { DecodedLogs, TransactionResultReceipt } from '../transaction-response';\n\n/**\n * Assembles an error message for a panic status.\n * @param status - The transaction failure status.\n * @returns The error message.\n */\nexport const assemblePanicError = (\n  statusReason: string,\n  metadata: Record<string, unknown>\n): FuelError => {\n  let errorMessage = `The transaction reverted with reason: \"${statusReason}\".`;\n\n  if (PANIC_REASONS.includes(statusReason)) {\n    errorMessage = `${errorMessage}\\n\\nYou can read more about this error at:\\n\\n${PANIC_DOC_URL}#variant.${statusReason}`;\n  }\n\n  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason: statusReason,\n  });\n};\n\n/** @hidden */\nconst stringify = (obj: unknown) => JSON.stringify(obj, null, 2);\n\n/**\n * Assembles an error message for a revert status.\n * @param receipts - The transaction result processed receipts.\n * @param logs - The transaction decoded logs.\n * @returns The error message.\n */\nexport const assembleRevertError = (\n  receipts: Array<TransactionResultReceipt>,\n  logs: Array<unknown>,\n  metadata: Record<string, unknown>\n): FuelError => {\n  let errorMessage = 'The transaction reverted with an unknown reason.';\n\n  const revertReceipt = receipts.find(({ type }) => type === ReceiptType.Revert) as ReceiptRevert;\n  let reason = '';\n\n  if (revertReceipt) {\n    const reasonHex = bn(revertReceipt.val).toHex();\n    const lastLog = logs[logs.length - 1];\n    const lastButOneLog = logs[logs.length - 2];\n\n    switch (reasonHex) {\n      case FAILED_REQUIRE_SIGNAL: {\n        reason = 'require';\n        errorMessage = `The transaction reverted because a \"require\" statement has thrown ${\n          logs.length ? stringify(lastLog) : 'an error.'\n        }.`;\n        break;\n      }\n\n      case FAILED_ASSERT_EQ_SIGNAL: {\n        const suffix =\n          logs.length >= 2\n            ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.`\n            : '.';\n\n        reason = 'assert_eq';\n        errorMessage = `The transaction reverted because of an \"assert_eq\" statement${suffix}`;\n        break;\n      }\n\n      case FAILED_ASSERT_NE_SIGNAL: {\n        const suffix =\n          logs.length >= 2\n            ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.`\n            : '.';\n\n        reason = 'assert_ne';\n        errorMessage = `The transaction reverted because of an \"assert_ne\" statement${suffix}`;\n        break;\n      }\n\n      case FAILED_ASSERT_SIGNAL:\n        reason = 'assert';\n        errorMessage = `The transaction reverted because an \"assert\" statement failed to evaluate to true.`;\n        break;\n\n      case FAILED_TRANSFER_TO_ADDRESS_SIGNAL:\n        reason = 'MissingOutputVariable';\n        errorMessage = `The transaction reverted because it's missing an \"OutputVariable\".`;\n        break;\n\n      default:\n        throw new FuelError(\n          ErrorCode.UNKNOWN,\n          `The transaction reverted with an unknown reason: ${revertReceipt.val}`,\n          {\n            ...metadata,\n            reason: 'unknown',\n          }\n        );\n    }\n  }\n\n  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason,\n  });\n};\n\ninterface IExtractTxError<T = unknown> extends DecodedLogs<T> {\n  receipts: Array<TransactionResultReceipt>;\n  statusReason: string;\n  logs: T[];\n  groupedLogs: Record<string, T[]>;\n}\n\n/**\n * Extracts the transaction error and returns a FuelError object.\n * @param IExtractTxError - The parameters for extracting the error.\n * @returns The FuelError object.\n */\nexport const extractTxError = (params: IExtractTxError): FuelError => {\n  const { receipts, statusReason, logs, groupedLogs } = params;\n\n  const isPanic = receipts.some(({ type }) => type === ReceiptType.Panic);\n  const isRevert = receipts.some(({ type }) => type === ReceiptType.Revert);\n  const metadata = {\n    logs,\n    groupedLogs,\n    receipts,\n    panic: isPanic,\n    revert: isRevert,\n    reason: '',\n  };\n\n  if (isPanic) {\n    return assemblePanicError(statusReason, metadata);\n  }\n  return assembleRevertError(receipts, logs, metadata);\n};\n","import type { BN } from '@fuel-ts/math';\n\nimport type { CoinQuantity } from '../coin-quantity';\n\nexport const mergeQuantities = (...coinQuantities: CoinQuantity[][]): CoinQuantity[] => {\n  const resultMap: { [key: string]: BN } = {};\n\n  function addToMap({ amount, assetId }: CoinQuantity) {\n    if (resultMap[assetId]) {\n      resultMap[assetId] = resultMap[assetId].add(amount);\n    } else {\n      resultMap[assetId] = amount;\n    }\n  }\n\n  coinQuantities.forEach((arr) => arr.forEach(addToMap));\n\n  // Convert the resultMap back to an array\n  return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));\n};\n","/* eslint-disable max-classes-per-file */\nimport type { Address } from '@fuel-ts/address';\n\n/**\n * @hidden\n */\nexport class ChangeOutputCollisionError extends Error {\n  override name = 'ChangeOutputCollisionError';\n  override message =\n    'A ChangeOutput with the same \"assetId\" already exists for a different \"to\" address';\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessAtIndexError extends Error {\n  override name = 'NoWitnessAtIndexError';\n  constructor(public readonly index: number) {\n    super();\n    this.message = `Witness at index \"${index}\" was not found`;\n  }\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessByOwnerError extends Error {\n  override name = 'NoWitnessByOwnerError';\n  constructor(public readonly owner: Address) {\n    super();\n    this.message = `A witness for the given owner \"${owner}\" was not found`;\n  }\n}\n","import type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { InputType, OutputType } from '@fuel-ts/transactions';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport type { ResourcesIdsToIgnore } from '../provider';\n\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport type { TransactionRequest } from './types';\n\nexport const isRequestInputCoin = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput => input.type === InputType.Coin;\n\nexport const isRequestInputMessage = (\n  input: TransactionRequestInput\n): input is MessageTransactionRequestInput => input.type === InputType.Message;\n\nexport const isRequestInputMessageWithoutData = (\n  input: TransactionRequestInput\n): input is MessageTransactionRequestInput =>\n  input.type === InputType.Message && bn(input.data).isZero();\n\nexport const isRequestInputCoinOrMessage = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput | MessageTransactionRequestInput =>\n  isRequestInputCoin(input) || isRequestInputMessage(input);\n\nexport const isRequestInputResource = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput | MessageTransactionRequestInput =>\n  isRequestInputCoin(input) || isRequestInputMessageWithoutData(input);\n\nexport const getRequestInputResourceOwner = (\n  input: CoinTransactionRequestInput | MessageTransactionRequestInput\n) => (isRequestInputCoin(input) ? input.owner : input.recipient);\n\nexport const isRequestInputResourceFromOwner = (\n  input: CoinTransactionRequestInput | MessageTransactionRequestInput,\n  owner: Address\n) => getRequestInputResourceOwner(input) === owner.toB256();\n\n/**\n * @hidden\n *\n * Checks if the given `TransactionRequestInput` is a predicate.\n *\n * @param input - The `TransactionRequestInput` to check.\n * @returns `true` if the input is a predicate, otherwise `false`.\n */\nexport const isPredicate = (\n  input: TransactionRequestInput\n): input is Required<CoinTransactionRequestInput | MessageTransactionRequestInput> =>\n  isRequestInputCoinOrMessage(input) && !!input.predicate && hexlify(input.predicate) !== '0x';\n\nexport const getAssetAmountInRequestInputs = (\n  inputs: TransactionRequestInput[],\n  assetId: string,\n  baseAsset: string\n) =>\n  inputs.filter(isRequestInputResource).reduce((acc, input) => {\n    if (isRequestInputCoin(input) && input.assetId === assetId) {\n      return acc.add(input.amount);\n    }\n\n    if (isRequestInputMessage(input) && assetId === baseAsset) {\n      return acc.add(input.amount);\n    }\n\n    return acc;\n  }, bn(0));\n\nexport const cacheRequestInputsResources = (inputs: TransactionRequestInput[]) =>\n  inputs.filter(isRequestInputResource).reduce(\n    (cache, input) => {\n      if (isRequestInputCoin(input)) {\n        cache.utxos.push(input.id);\n      } else {\n        cache.messages.push(input.nonce);\n      }\n      return cache;\n    },\n    {\n      utxos: [],\n      messages: [],\n    } as Required<ResourcesIdsToIgnore>\n  );\n\nexport const cacheRequestInputsResourcesFromOwner = (\n  inputs: TransactionRequestInput[],\n  owner: Address\n): ResourcesIdsToIgnore =>\n  inputs.reduce(\n    (acc, input) => {\n      if (isRequestInputCoin(input) && input.owner === owner.toB256()) {\n        acc.utxos.push(input.id);\n      } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {\n        acc.messages.push(input.nonce);\n      }\n      return acc;\n    },\n    {\n      utxos: [],\n      messages: [],\n    } as Required<ResourcesIdsToIgnore>\n  );\n\n/**\n * @hidden\n *\n * Get the number of burnable assets in the transaction request.\n *\n * @param baseAssetId - The base asset ID.\n * @param transactionRequest - The transaction request to get the burnable asset count from.\n * @returns The number of burnable assets in the transaction request.\n */\nexport const getBurnableAssetCount = (\n  baseAssetId: string,\n  transactionRequest: TransactionRequest\n) => {\n  const { inputs, outputs } = transactionRequest;\n  const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));\n  // If there is a message input without data, we need to add the base asset to the set\n  if (inputs.some((i) => isRequestInputMessage(i) && bn(i.amount).gt(0))) {\n    coinInputs.add(baseAssetId);\n  }\n  const changeOutputs = new Set(\n    outputs.filter((output) => output.type === OutputType.Change).map((output) => output.assetId)\n  );\n  const difference = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));\n  return difference.size;\n};\n\n/**\n * @hidden\n *\n * Validates the transaction request for asset burn.\n *\n * @param transactionRequest - The transaction request to validate.\n * @param enableAssetBurn - Whether asset burn is enabled (default: false).\n *\n * @throws `FuelError` when an asset burn is detected and not enabled.\n */\nexport const validateTransactionForAssetBurn = (\n  baseAssetId: string,\n  transactionRequest: TransactionRequest,\n  enableAssetBurn: boolean = false\n) => {\n  // Asset burn is enabled\n  if (enableAssetBurn === true) {\n    return;\n  }\n\n  // No burnable assets detected\n  if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {\n    return;\n  }\n\n  const message = [\n    'Asset burn detected.',\n    'Add the relevant change outputs to the transaction to avoid burning assets.',\n    'Or enable asset burn, upon sending the transaction.',\n  ].join('\\n');\n  throw new FuelError(ErrorCode.ASSET_BURN_DETECTED, message);\n};\n","import type { Witness } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type TransactionRequestWitness = BytesLike;\n\nexport const witnessify = (value: TransactionRequestWitness): Witness => {\n  const data = arrayify(value);\n\n  return {\n    data: hexlify(data),\n    dataLength: data.length,\n  };\n};\n","import type { BN } from '@fuel-ts/math';\nimport type { TransactionBlob } from '@fuel-ts/transactions';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxBlob } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest, TransactionType } from './transaction-request';\n\nexport interface BlobTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Blob ID */\n  blobId: string;\n  /** Witness index of the bytecode to create */\n  witnessIndex?: number;\n}\n\nexport class BlobTransactionRequest extends BaseTransactionRequest {\n  static from(obj: BlobTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Blob as const;\n  /** Blob ID */\n  blobId: string;\n  /** Witness index of the bytecode to create */\n  witnessIndex: number;\n\n  /**\n   * Creates an instance `BlobTransactionRequest`.\n   *\n   * @param blobTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, blobId, ...rest }: BlobTransactionRequestLike) {\n    super(rest);\n    this.blobId = blobId;\n    this.witnessIndex = witnessIndex ?? 0;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionBlob`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionBlob {\n    const baseTransaction = this.getBaseTransaction();\n    const { witnessIndex, blobId } = this;\n    return {\n      type: TransactionType.Blob,\n      ...baseTransaction,\n      blobId,\n      witnessIndex,\n    };\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Calculates the metadata gas cost for a blob transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   * @returns metadata gas cost for the blob transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxBlob({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      witnessBytesSize: this.witnesses[this.witnessIndex].length,\n    });\n  }\n}\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { uint64ToBytesBE, sha256 } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionType, InputType, OutputType, TransactionCoder } from '@fuel-ts/transactions';\nimport { concat } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { TransactionRequest } from './types';\n\n/**\n * Hash transaction request with sha256. [Read more](https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/identifiers.md#transaction-id)\n *\n * @param transactionRequest - Transaction request to be hashed\n * @returns sha256 hash of the transaction\n */\nexport function hashTransaction(transactionRequest: TransactionRequest, chainId: number) {\n  const transaction = transactionRequest.toTransaction();\n\n  if (transaction.type === TransactionType.Script) {\n    transaction.receiptsRoot = ZeroBytes32;\n  }\n\n  // Zero out input fields\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = clone(input);\n\n    switch (inputClone.type) {\n      // Zero out on signing: txPointer, predicateGasUsed\n      case InputType.Coin: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: predicateGasUsed\n      case InputType.Message: {\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txPointer\n      case InputType.Contract: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.txID = ZeroBytes32;\n        inputClone.outputIndex = 0;\n        inputClone.balanceRoot = ZeroBytes32;\n        inputClone.stateRoot = ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  // Zero out output fields\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = clone(output);\n\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case OutputType.Contract: {\n        outputClone.balanceRoot = ZeroBytes32;\n        outputClone.stateRoot = ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case OutputType.Change: {\n        outputClone.amount = bn(0);\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case OutputType.Variable: {\n        outputClone.to = ZeroBytes32;\n        outputClone.amount = bn(0);\n        outputClone.assetId = ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n\n  const chainIdBytes = uint64ToBytesBE(chainId);\n  const concatenatedData = concat([chainIdBytes, new TransactionCoder().encode(transaction)]);\n  return sha256(concatenatedData);\n}\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn, type BN } from '@fuel-ts/math';\nimport type { TransactionCreate } from '@fuel-ts/transactions';\nimport { TransactionType, OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxCreate } from '../utils/gas';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { ContractCreatedTransactionRequestOutput } from './output';\nimport type { TransactionRequestStorageSlot } from './storage-slot';\nimport { storageSlotify } from './storage-slot';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface CreateTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex?: number;\n  /** Salt */\n  salt?: BytesLike;\n  /** List of storage slots to initialize */\n  storageSlots?: TransactionRequestStorageSlot[];\n}\n\n/**\n * `CreateTransactionRequest` provides functionalities for creating a transaction request that creates a contract.\n */\nexport class CreateTransactionRequest extends BaseTransactionRequest {\n  static from(obj: CreateTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Create as const;\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex: number;\n  /** Salt */\n  salt: string;\n  /** List of storage slots to initialize */\n  storageSlots: TransactionRequestStorageSlot[];\n\n  /**\n   * Creates an instance `CreateTransactionRequest`.\n   *\n   * @param createTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ bytecodeWitnessIndex, salt, storageSlots, ...rest }: CreateTransactionRequestLike) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.salt = hexlify(salt ?? ZeroBytes32);\n    this.storageSlots = [...(storageSlots ?? [])];\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionCreate`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionCreate {\n    const baseTransaction = this.getBaseTransaction();\n    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;\n    const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];\n    return {\n      type: TransactionType.Create,\n      ...baseTransaction,\n      bytecodeWitnessIndex,\n      storageSlotsCount: bn(storageSlots.length),\n      salt: this.salt ? hexlify(this.salt) : ZeroBytes32,\n      storageSlots,\n    };\n  }\n\n  /**\n   * Get contract created outputs for the transaction.\n   *\n   * @returns An array of contract created transaction request outputs.\n   */\n  getContractCreatedOutputs(): ContractCreatedTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractCreatedTransactionRequestOutput =>\n        output.type === OutputType.ContractCreated\n    );\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Adds a contract created output to the transaction request.\n   *\n   * @param contractId - The contract ID.\n   * @param stateRoot - The state root.\n   */\n  addContractCreatedOutput(\n    /** Contract ID */\n    contractId: BytesLike,\n    /** State Root */\n    stateRoot: BytesLike\n  ) {\n    this.pushOutput({\n      type: OutputType.ContractCreated,\n      contractId,\n      stateRoot,\n    });\n  }\n\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxCreate({\n      contractBytesSize: bn(arrayify(this.witnesses[this.bytecodeWitnessIndex] || '0x').length),\n      gasCosts,\n      stateRootSize: this.storageSlots.length,\n      txBytesSize: this.byteSize(),\n    });\n  }\n}\n","import type { StorageSlot } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type TransactionRequestStorageSlot =\n  | {\n      /** Key */\n      key: BytesLike;\n      /** Value */\n      value: BytesLike;\n    }\n  | [key: BytesLike, value: BytesLike];\n\n// Make sure all values have 32 bytes\nconst getStorageValue = (value: BytesLike): Uint8Array => {\n  const v = new Uint8Array(32);\n  v.set(arrayify(value));\n  return v;\n};\n\nexport const storageSlotify = (storageSlot: TransactionRequestStorageSlot): StorageSlot => {\n  let key;\n  let value;\n\n  if (Array.isArray(storageSlot)) {\n    key = storageSlot[0];\n    value = storageSlot[1];\n  } else {\n    key = storageSlot.key;\n    value = storageSlot.value;\n  }\n\n  return {\n    key: hexlify(key),\n    value: hexlify(getStorageValue(value)),\n  };\n};\n","import type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { addressify } from '@fuel-ts/address';\nimport type { ContractIdLike } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn } from '@fuel-ts/math';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport type { TransactionScript } from '@fuel-ts/transactions';\nimport { InputType, OutputType, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { Account } from '../../account';\nimport type { ChainInfo, GasCosts, TransactionCostParams } from '../provider';\nimport { calculateMetadataGasForTxScript, getMaxGas } from '../utils/gas';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { ContractTransactionRequestInput } from './input';\nimport type { ContractTransactionRequestOutput, VariableTransactionRequestOutput } from './output';\nimport { returnZeroScript } from './scripts';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { AbstractScriptRequest, JsonAbisFromAllCalls } from './types';\n\n/**\n * @hidden\n */\nexport interface ScriptTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Gas limit for transaction */\n  gasLimit?: BigNumberish;\n  /** Script to execute */\n  script?: BytesLike;\n  /** Script input data (parameters) */\n  scriptData?: BytesLike;\n\n  abis?: JsonAbisFromAllCalls;\n}\n\n/**\n * `ScriptTransactionRequest` provides functionalities for creating a transaction request that uses a script.\n */\nexport class ScriptTransactionRequest extends BaseTransactionRequest {\n  static from(obj: ScriptTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Script as const;\n  /** Gas limit for transaction */\n  gasLimit: BN;\n  /** Script to execute */\n  script: Uint8Array;\n  /** Script input data (parameters) */\n  scriptData: Uint8Array;\n\n  abis?: JsonAbisFromAllCalls;\n\n  /**\n   * Constructor for `ScriptTransactionRequest`.\n   *\n   * @param scriptTransactionRequestLike - The initial values for the instance.\n   */\n  constructor({ script, scriptData, gasLimit, ...rest }: ScriptTransactionRequestLike = {}) {\n    super(rest);\n    this.gasLimit = bn(gasLimit);\n    this.script = arrayify(script ?? returnZeroScript.bytes);\n    this.scriptData = arrayify(scriptData ?? returnZeroScript.encodeScriptData());\n    this.abis = rest.abis;\n  }\n\n  /**\n   * Helper function to estimate and fund the transaction request with a specified account.\n   *\n   * @param account - The account to fund the transaction.\n   * @param params - The parameters for the transaction cost.\n   * @returns The current instance of the `ScriptTransactionRequest` funded.\n   *\n   * @deprecated Use `provider.assembleTx` instead.\n   * Check the migration guide https://docs.fuel.network/guide/assembling-transactions/migration-guide.html for more information.\n   */\n  async estimateAndFund(\n    account: Account,\n    { signatureCallback, quantities = [] }: TransactionCostParams = {}\n  ): Promise<ScriptTransactionRequest> {\n    const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });\n\n    this.maxFee = txCost.maxFee;\n    this.gasLimit = txCost.gasUsed;\n\n    await account.fund(this, txCost);\n\n    return this;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionScript`.\n   *\n   * @returns The transaction script object.\n   */\n  toTransaction(): TransactionScript {\n    const script = arrayify(this.script ?? '0x');\n    const scriptData = arrayify(this.scriptData ?? '0x');\n    return {\n      type: TransactionType.Script,\n      scriptGasLimit: this.gasLimit,\n      ...super.getBaseTransaction(),\n      scriptLength: bn(script.length),\n      scriptDataLength: bn(scriptData.length),\n      receiptsRoot: ZeroBytes32,\n      script: hexlify(script),\n      scriptData: hexlify(scriptData),\n    };\n  }\n\n  /**\n   * Get contract inputs for the transaction.\n   *\n   * @returns An array of contract transaction request inputs.\n   */\n  getContractInputs(): ContractTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is ContractTransactionRequestInput => input.type === InputType.Contract\n    );\n  }\n\n  /**\n   * Get contract outputs for the transaction.\n   *\n   * @returns An array of contract transaction request outputs.\n   */\n  getContractOutputs(): ContractTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractTransactionRequestOutput => output.type === OutputType.Contract\n    );\n  }\n\n  /**\n   * Get variable outputs for the transaction.\n   *\n   * @returns An array of variable transaction request outputs.\n   */\n  getVariableOutputs(): VariableTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is VariableTransactionRequestOutput => output.type === OutputType.Variable\n    );\n  }\n\n  /**\n   * Set the script and its data.\n   *\n   * @param script - The abstract script request.\n   * @param data - The script data.\n   */\n  setScript<T>(script: AbstractScriptRequest<T>, data: T) {\n    this.scriptData = script.encodeScriptData(data);\n    this.script = script.bytes;\n  }\n\n  /**\n   * Adds variable outputs to the transaction request.\n   *\n   * @param numberOfVariables - The number of variables to add.\n   * @returns The new length of the outputs array.\n   */\n  addVariableOutputs(numberOfVariables: number = 1) {\n    let outputsNumber = numberOfVariables;\n\n    while (outputsNumber) {\n      this.pushOutput({\n        type: OutputType.Variable,\n      });\n      outputsNumber -= 1;\n    }\n\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * Adds a variable output to the transaction request.\n   *\n   * @param to - The recipient address as a BytesLike object. Defaults to ZeroBytes32 if not provided.\n   * @param amount - The amount to be transferred as a BigNumberish object. Defaults to 0 if not provided.\n   * @param assetId - The asset ID as a BytesLike object. Defaults to ZeroBytes32 if not provided.\n   */\n  addVariableOutput(to?: BytesLike, amount?: BigNumberish, assetId?: BytesLike) {\n    this.pushOutput({\n      type: OutputType.Variable,\n      to,\n      amount,\n      assetId,\n    });\n  }\n\n  /**\n   * Calculates the maximum gas for the transaction.\n   *\n   * @param chainInfo - The chain information.\n   * @param minGas - The minimum gas.\n   * @returns the maximum gas.\n   */\n  override calculateMaxGas(chainInfo: ChainInfo, minGas: BN): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx },\n    } = consensusParameters;\n\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      gasLimit: this.gasLimit,\n      maxGasPerTx,\n    });\n  }\n\n  /**\n   * Adds a contract input and output to the transaction request.\n   *\n   * @param contract - The contract ID.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  addContractInputAndOutput(contract: ContractIdLike): ScriptTransactionRequest {\n    const contractAddress = addressify(contract);\n\n    // Add only one input contract per contractId\n    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {\n      return this;\n    }\n\n    const inputIndex = super.pushInput({\n      type: InputType.Contract,\n      contractId: contractAddress.toB256(),\n      txPointer: '0x00000000000000000000000000000000',\n    });\n\n    this.pushOutput({\n      type: OutputType.Contract,\n      inputIndex,\n    });\n\n    return this;\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Sets the data for the transaction request.\n   *\n   * @param abi - Script JSON ABI.\n   * @param args - The input arguments.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  setData(abi: JsonAbi, args: InputValue[]): ScriptTransactionRequest {\n    const abiInterface = new Interface(abi);\n    this.scriptData = abiInterface.functions.main.encodeArguments(args);\n    return this;\n  }\n\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n    });\n  }\n}\n","import { arrayify } from '@fuel-ts/utils';\n\nimport type { AbstractScriptRequest } from './types';\n\n// We can't import this from `@fuel-ts/script` because it causes\n// cyclic dependency errors so we duplicate it here.\n/** @hidden */\nexport const returnZeroScript: AbstractScriptRequest<void> = {\n  /*\n      Opcode::RET(REG_ZERO)\n      Opcode::NOOP\n    */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x24000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n\n/** @hidden */\nexport const withdrawScript: AbstractScriptRequest<void> = {\n  /*\n          The following code loads some basic values into registers and calls SMO to create an output message\n          5040C010 \t- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]\n          5D44C006\t- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]\n          4C400011\t- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]\n          24000000\t- RET                [return 0]\n          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]\n          00000000 00000000 [amount value]\n      */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x5040C0105D44C0064C40001124000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n","import { FuelError } from '@fuel-ts/errors';\nimport { hash } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport {\n  TransactionType,\n  type TransactionUpgrade,\n  type UpgradePurpose,\n  UpgradePurposeTypeEnum,\n} from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxUpgrade } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport { BaseTransactionRequest, type BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport type UpgradePurposeRequest =\n  | {\n      type: UpgradePurposeTypeEnum.ConsensusParameters;\n      checksum: string;\n    }\n  | {\n      type: UpgradePurposeTypeEnum.StateTransition;\n      data: BytesLike;\n    };\n\n/**\n * @hidden\n */\nexport interface UpgradeTransactionRequestLike extends BaseTransactionRequestLike {\n  /** The upgrade purpose */\n  upgradePurpose?: UpgradePurposeRequest;\n\n  /** Witness index */\n  bytecodeWitnessIndex?: number;\n}\n\nexport class UpgradeTransactionRequest extends BaseTransactionRequest {\n  static from(obj: UpgradeTransactionRequestLike) {\n    if (obj instanceof UpgradeTransactionRequest) {\n      return obj;\n    }\n    return new this(clone(obj));\n  }\n\n  /** The type of transaction */\n  type = TransactionType.Upgrade as const;\n  /** The upgrade purpose */\n  upgradePurpose: UpgradePurposeRequest;\n  /** Witness index of consensus */\n  bytecodeWitnessIndex: number;\n\n  /**\n   * Creates an instance `UpgradeTransactionRequest`.\n   *\n   * @param upgradeTransactionRequestLike - The initial values for the instance\n   */\n  constructor({\n    upgradePurpose,\n    bytecodeWitnessIndex,\n    ...rest\n  }: UpgradeTransactionRequestLike = {}) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.upgradePurpose = upgradePurpose ?? {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: '0x',\n    };\n  }\n\n  /**\n   * Adds a consensus parameters upgrade purpose.\n   *\n   * @param consensus - The consensus bytecode.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addConsensusParametersUpgradePurpose(consensus: BytesLike) {\n    this.bytecodeWitnessIndex = this.addWitness(consensus);\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: hash(consensus),\n    };\n    return this;\n  }\n\n  /**\n   * Adds a state transition upgrade purpose.\n   *\n   * @param bytecodeRoot - The Merkle root of the state transition.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addStateTransitionUpgradePurpose(bytecodeRoot: BytesLike) {\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.StateTransition,\n      data: hexlify(bytecodeRoot),\n    };\n    return this;\n  }\n\n  /**\n   * Adds an upgrade purpose.\n   *\n   * @param type - The upgrade purpose type.\n   * @param data - The bytecode or merkle root of upgrade purpose\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addUpgradePurpose(type: UpgradePurposeTypeEnum, data: BytesLike) {\n    if (type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      this.addConsensusParametersUpgradePurpose(data);\n    }\n\n    if (type === UpgradePurposeTypeEnum.StateTransition) {\n      this.addStateTransitionUpgradePurpose(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionUpgrade`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionUpgrade {\n    let upgradePurpose: UpgradePurpose;\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.ConsensusParameters,\n        data: {\n          witnessIndex: this.bytecodeWitnessIndex,\n          checksum: this.upgradePurpose.checksum,\n        },\n      };\n    } else if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.StateTransition,\n        data: {\n          bytecodeRoot: hexlify(this.upgradePurpose.data),\n        },\n      };\n    } else {\n      throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Invalid upgrade purpose');\n    }\n\n    return {\n      type: TransactionType.Upgrade,\n      ...super.getBaseTransaction(),\n      upgradePurpose,\n    };\n  }\n\n  /**\n   * Gets the Transaction ID by hashing the transaction\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Calculates the metadata gas cost for an upgrade transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upgrade transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    const txBytesSize = this.byteSize();\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      const witnessIndex = this.bytecodeWitnessIndex;\n      const consensusSize = this.witnesses[witnessIndex].length;\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n        consensusSize,\n      });\n    }\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n      });\n    }\n\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Invalid upgrade purpose');\n  }\n}\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport type { BN } from '@fuel-ts/math';\nimport { type TransactionUpload, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { ChainInfo, GasCosts } from '../provider';\nimport { calculateMetadataGasForTxUpload, calculateMinGasForTxUpload } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport { type BaseTransactionRequestLike, BaseTransactionRequest } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface UploadSubsectionRequest {\n  /** The root of the Merkle tree is created over the bytecode. */\n  root: BytesLike;\n\n  /** The index of the subsection of the bytecode. */\n  subsectionIndex: number;\n\n  /** The total number of subsections on which bytecode was divided. */\n  subsectionsNumber: number;\n\n  /** The proof set helps to verify the connection of the subsection to the `root`. */\n  proofSet: BytesLike[];\n\n  /** The subsection bytecode. */\n  subsection: BytesLike;\n}\n\n/**\n * @hidden\n */\nexport interface UploadTransactionRequestLike extends BaseTransactionRequestLike {\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex?: number;\n\n  /** The subsection data. */\n  subsection?: Omit<UploadSubsectionRequest, 'subsection'>;\n}\n\nexport class UploadTransactionRequest extends BaseTransactionRequest {\n  static from(obj: UploadTransactionRequestLike): UploadTransactionRequest {\n    if (obj instanceof UploadTransactionRequest) {\n      return obj;\n    }\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Upload as const;\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex: number;\n  /** The subsection data. */\n  subsection: Omit<UploadSubsectionRequest, 'subsection'>;\n\n  /**\n   * Creates an instance `UploadTransactionRequest`.\n   *\n   * @param uploadTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, subsection, ...rest }: UploadTransactionRequestLike = {}) {\n    super(rest);\n    this.witnessIndex = witnessIndex ?? 0;\n    this.subsection = subsection ?? {\n      proofSet: [],\n      root: ZeroBytes32,\n      subsectionIndex: 0,\n      subsectionsNumber: 0,\n    };\n  }\n\n  /**\n   * Adds the subsection.\n   *\n   * @param subsection - The subsection data.\n   */\n  addSubsection(subsection: UploadSubsectionRequest) {\n    const { subsection: subsectionBytecode, ...rest } = subsection;\n    this.subsection = rest;\n    this.witnessIndex = this.addWitness(subsectionBytecode);\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionUpload`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionUpload {\n    const baseTransaction = this.getBaseTransaction();\n    const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;\n    return {\n      type: TransactionType.Upload,\n      ...baseTransaction,\n      subsectionIndex,\n      subsectionsNumber,\n      root: hexlify(root),\n      proofSet: proofSet.map(hexlify),\n      witnessIndex: this.witnessIndex,\n      proofSetCount: proofSet.length,\n    };\n  }\n\n  /**\n   * Calculates the metadata gas cost for an upload transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upload transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxUpload({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      subsectionSize: arrayify(this.witnesses[this.witnessIndex]).length,\n      subsectionsSize: this.subsection.subsectionsNumber,\n    });\n  }\n\n  /**\n   * Calculates the minimum gas for an upload transaction.\n   *\n   * @param chainInfo - The chain information.\n   *\n   * @returns the minimum gas for the upload transaction\n   */\n  override calculateMinGas(chainInfo: ChainInfo): BN {\n    const minGas = super.calculateMinGas(chainInfo);\n    const { gasCosts } = chainInfo.consensusParameters;\n    const bytecode = this.witnesses[this.witnessIndex] ?? ZeroBytes32;\n    return calculateMinGasForTxUpload({\n      gasCosts,\n      baseMinGas: minGas.toNumber(),\n      subsectionSize: arrayify(bytecode).length,\n    });\n  }\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport type { TransactionType } from '@fuel-ts/transactions';\n\nimport type {\n  BlobTransactionRequest,\n  BlobTransactionRequestLike,\n} from './blob-transaction-request';\nimport type {\n  CreateTransactionRequest,\n  CreateTransactionRequestLike,\n} from './create-transaction-request';\nimport type {\n  ScriptTransactionRequest,\n  ScriptTransactionRequestLike,\n} from './script-transaction-request';\nimport type {\n  UpgradeTransactionRequest,\n  UpgradeTransactionRequestLike,\n} from './upgrade-transaction-request';\nimport type {\n  UploadTransactionRequest,\n  UploadTransactionRequestLike,\n} from './upload-transaction-request';\n\nexport type TransactionRequest =\n  | ScriptTransactionRequest\n  | CreateTransactionRequest\n  | BlobTransactionRequest\n  | UpgradeTransactionRequest\n  | UploadTransactionRequest;\nexport type TransactionRequestLike =\n  | ({ type: TransactionType.Script } & ScriptTransactionRequestLike)\n  | ({ type: TransactionType.Create } & CreateTransactionRequestLike)\n  | ({ type: TransactionType.Blob } & BlobTransactionRequestLike)\n  | ({ type: TransactionType.Upgrade } & UpgradeTransactionRequestLike)\n  | ({ type: TransactionType.Upload } & UploadTransactionRequestLike);\n\nexport type JsonAbisFromAllCalls = {\n  main: JsonAbi;\n  otherContractsAbis: Record<string, JsonAbi>;\n};\n\n/**\n * @hidden\n */\nexport abstract class AbstractScriptRequest<T> {\n  abstract bytes: Uint8Array;\n  abstract encodeScriptData: (data: T) => Uint8Array;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { TransactionType } from '@fuel-ts/transactions';\n\nimport { BlobTransactionRequest } from './blob-transaction-request';\nimport { CreateTransactionRequest } from './create-transaction-request';\nimport { ScriptTransactionRequest } from './script-transaction-request';\nimport type { TransactionRequestLike, TransactionRequest } from './types';\nimport { UpgradeTransactionRequest } from './upgrade-transaction-request';\nimport { UploadTransactionRequest } from './upload-transaction-request';\n\n/** @hidden */\nexport const transactionRequestify = (obj: TransactionRequestLike): TransactionRequest => {\n  if (\n    obj instanceof ScriptTransactionRequest ||\n    obj instanceof CreateTransactionRequest ||\n    obj instanceof BlobTransactionRequest ||\n    obj instanceof UpgradeTransactionRequest ||\n    obj instanceof UploadTransactionRequest\n  ) {\n    return obj;\n  }\n\n  const { type } = obj;\n\n  switch (obj.type) {\n    case TransactionType.Script: {\n      return ScriptTransactionRequest.from(obj);\n    }\n    case TransactionType.Create: {\n      return CreateTransactionRequest.from(obj);\n    }\n    case TransactionType.Blob: {\n      return BlobTransactionRequest.from(obj);\n    }\n    case TransactionType.Upgrade: {\n      return UpgradeTransactionRequest.from(obj);\n    }\n    case TransactionType.Upload: {\n      return UploadTransactionRequest.from(obj);\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${type}.`\n      );\n    }\n  }\n};\n\n/** @hidden */\nexport const isTransactionTypeScript = (\n  request: TransactionRequestLike\n): request is ScriptTransactionRequest => request.type === TransactionType.Script;\n\n/** @hidden */\nexport const isTransactionTypeCreate = (\n  request: TransactionRequestLike\n): request is CreateTransactionRequest => request.type === TransactionType.Create;\n\n/** @hidden */\nexport const isTransactionTypeBlob = (\n  request: TransactionRequestLike\n): request is BlobTransactionRequest => request.type === TransactionType.Blob;\n\n/** @hidden */\nexport const isTransactionTypeUpgrade = (\n  request: TransactionRequestLike\n): request is UpgradeTransactionRequest => request.type === TransactionType.Upgrade;\n\n/** @hidden */\nexport const isTransactionTypeUpload = (\n  request: TransactionRequestLike\n): request is UploadTransactionRequest => request.type === TransactionType.Upload;\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n  ReceiptScriptResult,\n  ReceiptMessageOut,\n  Transaction,\n  ReceiptMint,\n  ReceiptBurn,\n  TransactionType,\n  SubmittableTransactions,\n} from '@fuel-ts/transactions';\nimport { TransactionCoder, TxPointerCoder } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type Provider from '../provider';\nimport type { TransactionRequest, JsonAbisFromAllCalls } from '../transaction-request';\nimport {\n  assemblePreConfirmationTransactionSummary,\n  assembleTransactionSummary,\n} from '../transaction-summary/assemble-transaction-summary';\nimport { getTotalFeeFromStatus } from '../transaction-summary/status';\nimport type {\n  TransactionSummary,\n  GqlTransaction,\n  AbiMap,\n  PreConfirmationTransactionSummary,\n} from '../transaction-summary/types';\nimport { extractTxError } from '../utils';\nimport type { ProviderCacheJson } from '../utils/serialization';\nimport { deserializeProcessedTxOutput, deserializeReceipt } from '../utils/serialization';\n\nimport { type DecodedLogs, getAllDecodedLogs } from './getAllDecodedLogs';\n\n/** @hidden */\nexport type TransactionResultCallReceipt = ReceiptCall;\n/** @hidden */\nexport type TransactionResultReturnReceipt = ReceiptReturn;\n/** @hidden */\nexport type TransactionResultReturnDataReceipt = ReceiptReturnData & { data: string };\n/** @hidden */\nexport type TransactionResultPanicReceipt = ReceiptPanic;\n/** @hidden */\nexport type TransactionResultRevertReceipt = ReceiptRevert;\n/** @hidden */\nexport type TransactionResultLogReceipt = ReceiptLog;\n/** @hidden */\nexport type TransactionResultLogDataReceipt = ReceiptLogData & { data: string };\n/** @hidden */\nexport type TransactionResultTransferReceipt = ReceiptTransfer;\n/** @hidden */\nexport type TransactionResultTransferOutReceipt = ReceiptTransferOut;\n/** @hidden */\nexport type TransactionResultScriptResultReceipt = ReceiptScriptResult;\n/** @hidden */\nexport type TransactionResultMessageOutReceipt = ReceiptMessageOut;\nexport type TransactionResultMintReceipt = ReceiptMint;\nexport type TransactionResultBurnReceipt = ReceiptBurn;\n\n/** @hidden */\nexport type TransactionResultReceipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | (ReceiptReturnData & { data: string })\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | (ReceiptLogData & { data: string })\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | TransactionResultMintReceipt\n  | TransactionResultBurnReceipt;\n\n/** @hidden */\nexport type TransactionResult<TTransactionType = void> = TransactionSummary<TTransactionType> & {\n  logs?: DecodedLogs['logs'];\n  groupedLogs?: DecodedLogs['groupedLogs'];\n};\n\nexport type PreConfirmationTransactionResult = PreConfirmationTransactionSummary & {\n  logs?: DecodedLogs['logs'];\n  groupedLogs?: DecodedLogs['groupedLogs'];\n};\n\ntype SubmitAndAwaitStatusSubscriptionIterable = Awaited<\n  ReturnType<Provider['operations']['submitAndAwaitStatus']>\n>;\n\ntype StatusChangeSubscription =\n  Awaited<ReturnType<Provider['operations']['statusChange']>> extends AsyncIterable<infer R>\n    ? R\n    : never;\n\ntype StatusType = 'confirmation' | 'preConfirmation';\n\nexport type TransactionResponseJson = {\n  id: string;\n  providerUrl: string;\n  abis?: JsonAbisFromAllCalls;\n  status?: StatusChangeSubscription['statusChange'];\n  preConfirmationStatus?: StatusChangeSubscription['statusChange'];\n  providerCache: ProviderCacheJson;\n  gqlTransaction?: GqlTransaction;\n  requestJson?: string;\n};\n\n/**\n * Represents a response for a transaction.\n */\nexport class TransactionResponse {\n  /** Transaction ID */\n  id: string;\n  /** Current provider */\n  provider: Provider;\n  /** Gas used on the transaction */\n  gasUsed: BN = bn(0);\n  /** The graphql Transaction with receipts object. */\n  gqlTransaction?: GqlTransaction;\n  request?: TransactionRequest;\n  status?: StatusChangeSubscription['statusChange'];\n  abis?: JsonAbisFromAllCalls;\n  preConfirmationStatus?: StatusChangeSubscription['statusChange'];\n\n  private waitingForStreamData = false;\n  private statusResolvers: Map<StatusType, (() => void)[]> = new Map();\n\n  /**\n   * Constructor for `TransactionResponse`.\n   *\n   * @param tx - The transaction ID or TransactionRequest.\n   * @param provider - The provider.\n   */\n  constructor(\n    tx: string | TransactionRequest,\n    provider: Provider,\n    chainId: number,\n    abis?: JsonAbisFromAllCalls,\n    private submitTxSubscription?: SubmitAndAwaitStatusSubscriptionIterable\n  ) {\n    // Transaction Request was not provided\n    if (typeof tx === 'string') {\n      this.id = tx;\n    } else {\n      // Transaction Request was provided\n      this.id = tx.getTransactionId(chainId);\n      this.request = tx;\n    }\n\n    this.provider = provider;\n    this.abis = abis;\n    this.waitForResult = this.waitForResult.bind(this);\n    this.waitForPreConfirmation = this.waitForPreConfirmation.bind(this);\n  }\n\n  /**\n   * Async constructor for `TransactionResponse`. This method can be used to create\n   * an instance of `TransactionResponse` and wait for the transaction to be fetched\n   * from the chain, ensuring that the `gqlTransaction` property is set.\n   *\n   * @param id - The transaction ID.\n   * @param provider - The provider.\n   */\n  static async create(\n    id: string,\n    provider: Provider,\n    abis?: JsonAbisFromAllCalls\n  ): Promise<TransactionResponse> {\n    const chainId = await provider.getChainId();\n    const response = new TransactionResponse(id, provider, chainId, abis);\n    await response.fetch();\n    return response;\n  }\n\n  private applyMalleableSubscriptionFields<TTransactionType = void>(\n    transaction: Transaction<TTransactionType>\n  ) {\n    const status = this.status;\n    if (!status) {\n      return;\n    }\n\n    const tx = transaction as SubmittableTransactions;\n\n    if (status.type === 'SuccessStatus' || status.type === 'FailureStatus') {\n      tx.inputs = tx.inputs.map((input, idx) => {\n        if ('txPointer' in input) {\n          const correspondingInput = status.transaction.inputs?.[idx] as { txPointer: string };\n          return {\n            ...input,\n            txPointer: TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer),\n          };\n        }\n        return input;\n      });\n\n      tx.outputs = status.transaction.outputs.map(deserializeProcessedTxOutput);\n\n      if (status.transaction.receiptsRoot) {\n        (tx as Transaction<TransactionType.Script>).receiptsRoot = status.transaction.receiptsRoot;\n      }\n    }\n  }\n\n  private async getTransaction<TTransactionType = void>(): Promise<{\n    tx: Transaction<TTransactionType>;\n    bytes: Uint8Array;\n  }> {\n    if (this.request) {\n      const tx = this.request.toTransaction() as Transaction<TTransactionType>;\n      this.applyMalleableSubscriptionFields(tx);\n      return {\n        tx,\n        bytes: this.request.toTransactionBytes(),\n      };\n    }\n\n    const gqlTransaction = this.gqlTransaction ?? (await this.fetch());\n\n    const { rawPayload } = gqlTransaction;\n    const bytes = arrayify(rawPayload);\n    const [tx] = new TransactionCoder().decode(bytes, 0);\n\n    return {\n      tx: tx as Transaction<TTransactionType>,\n      bytes,\n    };\n  }\n\n  /**\n   *\n   * NOTE: This method is only called within `getTransactionSummary`, which is invoked after `getTransaction`.\n   * Since `getTransaction` only resolves once the transaction has been processed,\n   * the status at this point is guaranteed to be either `SuccessStatus` or `FailureStatus`.\n   */\n  private getReceipts(): TransactionResultReceipt[] {\n    const status = this.getTransactionStatus();\n\n    switch (status?.type) {\n      case 'SuccessStatus':\n      case 'FailureStatus':\n        return status.receipts.map(deserializeReceipt);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Fetch the transaction with receipts from the provider.\n   *\n   * @returns Transaction with receipts query result.\n   */\n  async fetch(): Promise<GqlTransaction> {\n    const response = await this.provider.operations.getTransactionWithReceipts({\n      transactionId: this.id,\n    });\n\n    /**\n     * NOTE: Validate if there is a case where the transaction cannot be found after being submitted.\n     *\n     * This will subscribe to status change and it will to resolve as the first stream update is received\n     */\n    if (!response.transaction) {\n      const subscription = await this.provider.operations.statusChange({\n        transactionId: this.id,\n      });\n\n      for await (const { statusChange } of subscription) {\n        if (statusChange) {\n          this.status = statusChange;\n          break;\n        }\n      }\n\n      // NOTE: This code seems to be added to fetch the transaction again after the status change\n      return this.fetch();\n    }\n\n    this.gqlTransaction = response.transaction;\n\n    return response.transaction;\n  }\n\n  /**\n   * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will\n   * fetch it from the provider\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns\n   */\n  async getTransactionSummary<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionSummary<TTransactionType>> {\n    const { tx: transaction, bytes: transactionBytes } =\n      await this.getTransaction<TTransactionType>();\n\n    const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } =\n      await this.provider.getGasConfig();\n\n    // If we have the total fee, we do not need to refetch the gas price\n    const transactionStatus = this.getTransactionStatus();\n    const totalFee = getTotalFeeFromStatus(transactionStatus);\n    const gasPrice = totalFee ? bn(0) : await this.provider.getLatestGasPrice();\n\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    const transactionSummary = assembleTransactionSummary<TTransactionType>({\n      id: this.id,\n      receipts: this.getReceipts(),\n      transaction,\n      transactionBytes,\n      gqlTransactionStatus: transactionStatus,\n      gasPerByte,\n      gasPriceFactor,\n      abiMap: contractsAbiMap,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId,\n    });\n\n    return transactionSummary;\n  }\n\n  async getPreConfirmationTransactionSummary(\n    contractsAbiMap?: AbiMap\n  ): Promise<PreConfirmationTransactionSummary> {\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n\n    const transactionSummary = assemblePreConfirmationTransactionSummary({\n      id: this.id,\n      gqlTransactionStatus: this.preConfirmationStatus || this.status,\n      baseAssetId,\n      maxInputs,\n      abiMap: contractsAbiMap,\n      transactionRequest: this.request,\n    });\n\n    return transactionSummary;\n  }\n\n  private resolveStatus(type: StatusType) {\n    const resolvers = this.statusResolvers.get(type) || [];\n    // We can resolve all the promises at once for the same status type\n    resolvers.forEach((resolve) => resolve());\n    this.statusResolvers.delete(type);\n  }\n\n  private async waitForStatus(type: StatusType): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const resolvers = this.statusResolvers.get(type) || [];\n      resolvers.push(() => {\n        resolve();\n      });\n      this.statusResolvers.set(type, resolvers);\n\n      this.waitForStatusChange().catch(reject);\n    });\n  }\n\n  /**\n   * Waits for the status change of the transaction.\n   * If the transaction is already in a final state, it will return immediately.\n   * If the transaction is not in a final state, it will wait for the status change.\n   * If we are already subscribed to the status change, it will return immediately.\n   */\n  private async waitForStatusChange() {\n    const type = this.status?.type;\n\n    // If the transaction is already in a final state, we can return immediately\n    if (type && (type === 'FailureStatus' || type === 'SuccessStatus')) {\n      // We need to resolve the statuses to avoid waiting for the stream data\n      this.resolveStatus('preConfirmation');\n      this.resolveStatus('confirmation');\n      return;\n    }\n\n    if (this.waitingForStreamData) {\n      return;\n    }\n\n    this.waitingForStreamData = true;\n\n    const subscription =\n      this.submitTxSubscription ??\n      (await this.provider.operations.statusChange({\n        transactionId: this.id,\n        includePreConfirmation: true,\n      }));\n\n    for await (const sub of subscription) {\n      // Handle both types of subscriptions\n      const statusChange = 'statusChange' in sub ? sub.statusChange : sub.submitAndAwaitStatus;\n      this.status = statusChange;\n\n      // Transaction Squeezed Out\n      if (statusChange.type === 'SqueezedOutStatus') {\n        throw new FuelError(\n          ErrorCode.TRANSACTION_SQUEEZED_OUT,\n          `Transaction Squeezed Out with reason: ${statusChange.reason}`\n        );\n      }\n\n      if (\n        statusChange.type === 'PreconfirmationSuccessStatus' ||\n        statusChange.type === 'PreconfirmationFailureStatus'\n      ) {\n        this.preConfirmationStatus = statusChange;\n        this.resolveStatus('preConfirmation');\n      }\n\n      if (statusChange.type === 'SuccessStatus' || statusChange.type === 'FailureStatus') {\n        this.resolveStatus('confirmation');\n        /**\n         * NOTE: We need to also resolve the preConfirmation status to avoid waiting for the stream data that\n         * already happened. If the call to `waitForPreConfirmation` happens after the transaction is already processed,\n         * the status will never be one of the preConfirmation statuses.\n         */\n        this.resolveStatus('preConfirmation');\n        this.waitingForStreamData = false;\n        break;\n      }\n    }\n  }\n\n  private async waitForConfirmationStatuses() {\n    try {\n      await this.waitForStatus('confirmation');\n    } catch (error) {\n      this.unsetResourceCache();\n      throw error;\n    }\n  }\n\n  private async waitForPreConfirmationStatuses() {\n    try {\n      await this.waitForStatus('preConfirmation');\n    } catch (error) {\n      this.unsetResourceCache();\n      throw error;\n    }\n  }\n\n  /**\n   * Assembles the result of a transaction by retrieving the transaction summary,\n   * decoding logs (if available), and handling transaction failure.\n   *\n   * This method can be used to obtain the result of a transaction that has just\n   * been submitted or one that has already been processed.\n   *\n   * @template TTransactionType - The type of the transaction.\n   * @param contractsAbiMap - The map of contract ABIs.\n   * @returns - The assembled transaction result.\n   * @throws If the transaction status is a failure.\n   */\n  async assembleResult<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    const transactionSummary = await this.getTransactionSummary<TTransactionType>(contractsAbiMap);\n\n    const transactionResult: TransactionResult<TTransactionType> = {\n      ...transactionSummary,\n    };\n\n    let { logs, groupedLogs }: DecodedLogs = { logs: [], groupedLogs: {} };\n\n    if (this.abis) {\n      ({ logs, groupedLogs } = getAllDecodedLogs({\n        receipts: transactionSummary.receipts,\n        mainAbi: this.abis.main,\n        externalAbis: this.abis.otherContractsAbis,\n      }));\n\n      transactionResult.logs = logs;\n      transactionResult.groupedLogs = groupedLogs;\n    }\n\n    const { receipts } = transactionResult;\n\n    const status = this.getTransactionStatus();\n\n    if (status?.type === 'FailureStatus') {\n      const { reason } = status;\n      throw extractTxError({\n        receipts,\n        statusReason: reason,\n        logs,\n        groupedLogs,\n      });\n    }\n\n    return transactionResult;\n  }\n\n  async assemblePreConfirmationResult(contractsAbiMap?: AbiMap) {\n    const transactionSummary = await this.getPreConfirmationTransactionSummary(contractsAbiMap);\n\n    const transactionResult: PreConfirmationTransactionResult = {\n      ...transactionSummary,\n      logs: [] as DecodedLogs['logs'],\n      groupedLogs: {} as DecodedLogs['groupedLogs'],\n    };\n\n    let { logs, groupedLogs }: DecodedLogs = { logs: [], groupedLogs: {} };\n\n    if (this.abis && transactionSummary.receipts) {\n      ({ logs, groupedLogs } = getAllDecodedLogs({\n        receipts: transactionSummary.receipts,\n        mainAbi: this.abis.main,\n        externalAbis: this.abis.otherContractsAbis,\n      }));\n      transactionResult.logs = logs;\n      transactionResult.groupedLogs = groupedLogs;\n    }\n\n    return transactionResult;\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction result\n   */\n  async waitForResult<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    await this.waitForConfirmationStatuses();\n    this.unsetResourceCache();\n    return this.assembleResult<TTransactionType>(contractsAbiMap);\n  }\n\n  /**\n   * Waits for the transaction's pre-confirmation and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns The pre-confirmed transaction result\n   */\n  async waitForPreConfirmation(\n    contractsAbiMap?: AbiMap\n  ): Promise<PreConfirmationTransactionResult> {\n    await this.waitForPreConfirmationStatuses();\n    this.unsetResourceCache();\n    return this.assemblePreConfirmationResult(contractsAbiMap);\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   */\n  async wait<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    return this.waitForResult<TTransactionType>(contractsAbiMap);\n  }\n\n  private unsetResourceCache() {\n    this.provider.cache?.unset(this.id);\n  }\n\n  private getTransactionStatus() {\n    return this.status ?? this.gqlTransaction?.status;\n  }\n}\n","import { bn, type BN } from '@fuel-ts/math';\nimport { PolicyType, TransactionCoder, type Transaction } from '@fuel-ts/transactions';\nimport { DateTime, hexlify } from '@fuel-ts/utils';\n\nimport type { GasCosts } from '../provider';\nimport type { TransactionRequest } from '../transaction-request';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { getGasUsedFromReceipts } from '../utils';\n\nimport { calculateTXFeeForSummary } from './calculate-tx-fee-for-summary';\nimport {\n  getOperations,\n  getTransactionTypeName,\n  isTypeMint,\n  isTypeCreate,\n  isTypeScript,\n  isTypeUpgrade,\n  isTypeUpload,\n  isTypeBlob,\n} from './operations';\nimport { extractBurnedAssetsFromReceipts, extractMintedAssetsFromReceipts } from './receipt';\nimport { processGraphqlStatus } from './status';\nimport type {\n  AbiMap,\n  BurnedAsset,\n  GraphqlTransactionStatus,\n  MintedAsset,\n  Operation,\n  PreConfirmationTransactionSummary,\n  TransactionSummary,\n  TransactionTypeName,\n} from './types';\n\nexport interface AssembleTransactionSummaryParams {\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  transaction: Transaction;\n  id: string;\n  transactionBytes: Uint8Array;\n  gqlTransactionStatus?: GraphqlTransactionStatus;\n  receipts: TransactionResultReceipt[];\n  abiMap?: AbiMap;\n  maxInputs: BN;\n  gasCosts: GasCosts;\n  maxGasPerTx: BN;\n  gasPrice: BN;\n  baseAssetId: string;\n}\n\n/** @hidden */\nexport function assembleTransactionSummary<TTransactionType = void>(\n  params: AssembleTransactionSummaryParams\n) {\n  const {\n    id,\n    receipts,\n    gasPerByte,\n    gasPriceFactor,\n    transaction,\n    transactionBytes,\n    gqlTransactionStatus,\n    abiMap = {},\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  } = params;\n\n  const gasUsed = getGasUsedFromReceipts(receipts);\n\n  const rawPayload = hexlify(transactionBytes);\n\n  const operations = getOperations({\n    transactionType: transaction.type,\n    inputs: transaction.inputs || [],\n    outputs: transaction.outputs || [],\n    receipts,\n    rawPayload,\n    abiMap,\n    maxInputs,\n    baseAssetId,\n  });\n\n  const typeName = getTransactionTypeName(transaction.type);\n\n  const tip = bn(transaction.policies?.find((policy) => policy.type === PolicyType.Tip)?.data);\n\n  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time, totalFee } =\n    processGraphqlStatus(gqlTransactionStatus);\n\n  const fee =\n    totalFee ??\n    calculateTXFeeForSummary({\n      gasPrice,\n      rawPayload,\n      tip,\n      consensusParameters: {\n        gasCosts,\n        maxGasPerTx,\n        feeParams: {\n          gasPerByte,\n          gasPriceFactor,\n        },\n      },\n    });\n\n  const mintedAssets = extractMintedAssetsFromReceipts(receipts);\n  const burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n\n  let date: DateTime | undefined;\n\n  if (time) {\n    date = DateTime.fromTai64(time);\n  }\n\n  const transactionSummary: TransactionSummary<TTransactionType> = {\n    id,\n    tip,\n    fee,\n    gasUsed,\n    operations,\n    type: typeName,\n    blockId,\n    time,\n    status,\n    receipts,\n    mintedAssets,\n    burnedAssets,\n    isTypeMint: isTypeMint(transaction.type),\n    isTypeCreate: isTypeCreate(transaction.type),\n    isTypeScript: isTypeScript(transaction.type),\n    isTypeUpgrade: isTypeUpgrade(transaction.type),\n    isTypeUpload: isTypeUpload(transaction.type),\n    isTypeBlob: isTypeBlob(transaction.type),\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    date,\n    transaction: transaction as Transaction<TTransactionType>,\n  };\n\n  return transactionSummary;\n}\n\nexport interface AssemblePreConfirmationTransactionSummaryParams {\n  id: string;\n  gqlTransactionStatus?: GraphqlTransactionStatus;\n  abiMap?: AbiMap;\n  maxInputs: BN;\n  baseAssetId: string;\n  transactionRequest?: TransactionRequest;\n}\n\n/** @hidden */\nexport function assemblePreConfirmationTransactionSummary(\n  params: AssemblePreConfirmationTransactionSummaryParams\n) {\n  const { id, gqlTransactionStatus, transactionRequest, baseAssetId, maxInputs, abiMap } = params;\n\n  let type: TransactionTypeName | undefined;\n  let operations: Operation[] | undefined;\n  let gasUsed: BN | undefined;\n  let tip: BN | undefined;\n  let transaction: Transaction | undefined;\n  let mintedAssets: MintedAsset[] | undefined;\n  let burnedAssets: BurnedAsset[] | undefined;\n\n  const {\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    status,\n    receipts,\n    resolvedOutputs,\n    errorReason,\n    totalFee,\n    isStatusPreConfirmationFailure,\n    isStatusPreConfirmationSuccess,\n  } = processGraphqlStatus(gqlTransactionStatus);\n\n  if (receipts) {\n    gasUsed = getGasUsedFromReceipts(receipts);\n    mintedAssets = extractMintedAssetsFromReceipts(receipts);\n    burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n  }\n\n  if (transactionRequest) {\n    transaction = transactionRequest.toTransaction();\n    type = getTransactionTypeName(transaction.type);\n    tip = bn(transaction.policies?.find((policy) => policy.type === PolicyType.Tip)?.data);\n\n    if (receipts) {\n      const rawPayload = hexlify(new TransactionCoder().encode(transaction));\n\n      operations = getOperations({\n        transactionType: transaction.type,\n        inputs: transaction.inputs || [],\n        outputs: transaction.outputs || [],\n        receipts,\n        rawPayload,\n        abiMap,\n        maxInputs,\n        baseAssetId,\n      });\n    }\n  }\n\n  const transactionSummary: PreConfirmationTransactionSummary = {\n    id,\n    fee: totalFee,\n    type,\n    status,\n    receipts,\n    gasUsed,\n    tip,\n    isStatusPreConfirmationFailure,\n    isStatusPreConfirmationSuccess,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    ...(transaction && {\n      isTypeMint: isTypeMint(transaction.type),\n      isTypeCreate: isTypeCreate(transaction.type),\n      isTypeScript: isTypeScript(transaction.type),\n      isTypeUpgrade: isTypeUpgrade(transaction.type),\n      isTypeUpload: isTypeUpload(transaction.type),\n      isTypeBlob: isTypeBlob(transaction.type),\n    }),\n    mintedAssets,\n    burnedAssets,\n    resolvedOutputs,\n    errorReason,\n    transaction,\n    operations,\n  };\n\n  return transactionSummary;\n}\n","import type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { TransactionCreate, TransactionScript } from '@fuel-ts/transactions';\nimport { PolicyType, TransactionCoder, TransactionType } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { GqlFeeParameters } from '../__generated__/operations';\nimport type { ConsensusParameters } from '../provider';\nimport {\n  calculateGasFee,\n  calculateMetadataGasForTxCreate,\n  calculateMetadataGasForTxScript,\n  getMaxGas,\n  getMinGas,\n} from '../utils/gas';\n\ntype FeeParams =\n  | Pick<GqlFeeParameters, 'gasPerByte' | 'gasPriceFactor'>\n  | {\n      gasPerByte: BN | number;\n      gasPriceFactor: BN | number;\n    };\n\nexport type CalculateTXFeeForSummaryParams = {\n  gasPrice: BN;\n  rawPayload: string;\n  tip: BN;\n  consensusParameters: Pick<ConsensusParameters, 'gasCosts'> & {\n    feeParams: FeeParams;\n    maxGasPerTx: BN;\n  };\n};\n\nexport const calculateTXFeeForSummary = (params: CalculateTXFeeForSummaryParams): BN => {\n  const {\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: { gasCosts, feeParams, maxGasPerTx },\n  } = params;\n\n  const gasPerByte = bn(feeParams.gasPerByte);\n  const gasPriceFactor = bn(feeParams.gasPriceFactor);\n\n  const transactionBytes = arrayify(rawPayload);\n\n  const [transaction] = new TransactionCoder().decode(transactionBytes, 0);\n\n  const { type, witnesses, inputs, policies } = transaction as\n    | TransactionCreate\n    | TransactionScript;\n\n  let metadataGas = bn(0);\n  let gasLimit = bn(0);\n\n  if (type !== TransactionType.Create && type !== TransactionType.Script) {\n    return bn(0);\n  }\n\n  if (type === TransactionType.Create) {\n    const { bytecodeWitnessIndex, storageSlots } = transaction as TransactionCreate;\n\n    const contractBytesSize = bn(arrayify(witnesses[bytecodeWitnessIndex].data).length);\n\n    metadataGas = calculateMetadataGasForTxCreate({\n      contractBytesSize,\n      gasCosts,\n      stateRootSize: storageSlots.length || 0,\n      txBytesSize: transactionBytes.length,\n    });\n  } else {\n    const { scriptGasLimit } = transaction;\n\n    if (scriptGasLimit) {\n      gasLimit = scriptGasLimit;\n    }\n\n    metadataGas = calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: transactionBytes.length,\n    });\n  }\n\n  const minGas = getMinGas({\n    gasCosts,\n    gasPerByte: bn(gasPerByte),\n    inputs,\n    metadataGas,\n    txBytesSize: transactionBytes.length,\n  });\n\n  const witnessLimit = policies.find((policy) => policy.type === PolicyType.WitnessLimit)?.data as\n    | BN\n    | undefined;\n\n  const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);\n\n  const maxGas = getMaxGas({\n    gasPerByte,\n    minGas,\n    witnessesLength,\n    gasLimit,\n    witnessLimit,\n    maxGasPerTx,\n  });\n\n  const maxFee = calculateGasFee({\n    gasPrice,\n    gas: maxGas,\n    priceFactor: gasPriceFactor,\n    tip,\n  });\n\n  return maxFee;\n};\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport { ReceiptType, TransactionType } from '@fuel-ts/transactions';\nimport type { InputContract, Output, OutputChange, Input } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultReceipt,\n  TransactionResultCallReceipt,\n  TransactionResultMessageOutReceipt,\n  TransactionResultTransferOutReceipt,\n  TransactionResultTransferReceipt,\n} from '../transaction-response';\n\nimport type { FunctionCall } from './call';\nimport {\n  getInputFromAssetId,\n  getInputAccountAddress,\n  getInputContractFromIndex,\n  getInputsContract,\n  getInputsCoinAndMessage,\n  aggregateInputsAmountsByAssetAndOwner,\n} from './input';\nimport {\n  getOutputsChange,\n  getOutputsCoin,\n  getOutputsContract,\n  getOutputsContractCreated,\n} from './output';\nimport { AddressType, ChainName, OperationName, TransactionTypeName } from './types';\nimport type {\n  InputOutputParam,\n  InputParam,\n  OperationCoin,\n  RawPayloadParam,\n  ReceiptParam,\n  Operation,\n  GetOperationParams,\n  GetTransferOperationsParams,\n  AbiMap,\n} from './types';\n\n/**\n * Extracts a specific type of receipt from a list of receipts.\n *\n * @param receipts - The list of receipts to filter.\n * @param type - The type of receipt to filter for.\n * @returns The filtered list of receipts.\n */\nexport function getReceiptsByType<T = TransactionResultReceipt>(\n  receipts: TransactionResultReceipt[],\n  type: ReceiptType\n) {\n  return (receipts ?? []).filter((r) => r.type === type) as T[];\n}\n\n/**\n * Returns the transaction type's name based on the transaction type enum value.\n *\n * @param transactionType - The transaction type enum value.\n * @returns The transaction type's name.\n */\nexport function getTransactionTypeName(transactionType: TransactionType): TransactionTypeName {\n  switch (transactionType) {\n    case TransactionType.Mint:\n      return TransactionTypeName.Mint;\n    case TransactionType.Create:\n      return TransactionTypeName.Create;\n    case TransactionType.Script:\n      return TransactionTypeName.Script;\n    case TransactionType.Blob:\n      return TransactionTypeName.Blob;\n    case TransactionType.Upgrade:\n      return TransactionTypeName.Upgrade;\n    case TransactionType.Upload:\n      return TransactionTypeName.Upload;\n    default:\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${transactionType}.`\n      );\n  }\n}\n\n/** @hidden */\nexport function isType(transactionType: TransactionType, type: TransactionTypeName) {\n  const txType = getTransactionTypeName(transactionType);\n\n  return txType === type;\n}\n\n/** @hidden */\nexport function isTypeMint(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Mint);\n}\n\n/** @hidden */\nexport function isTypeCreate(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Create);\n}\n\n/** @hidden */\nexport function isTypeScript(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Script);\n}\n\n/** @hidden */\nexport function isTypeUpgrade(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Upgrade);\n}\n\n/** @hidden */\nexport function isTypeUpload(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Upload);\n}\n\n/** @hidden */\nexport function isTypeBlob(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Blob);\n}\n\n/** @hidden */\nexport function hasSameAssetId(a: OperationCoin) {\n  return (b: OperationCoin) => a.assetId === b.assetId;\n}\n\n/** @hidden */\nexport function getReceiptsCall(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultCallReceipt>(receipts, ReceiptType.Call);\n}\n\n/** @hidden */\nexport function getReceiptsMessageOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultMessageOutReceipt>(receipts, ReceiptType.MessageOut);\n}\n\n/** @hidden */\nfunction mergeAssets(op1: Operation, op2: Operation): OperationCoin[] {\n  const assets1 = op1.assetsSent || [];\n  const assets2 = op2.assetsSent || [];\n\n  const assetMap = new Map<string, OperationCoin>();\n\n  // Merge assets from op1\n  assets1.forEach((asset) => {\n    assetMap.set(asset.assetId, { ...asset });\n  });\n\n  // Merge assets from op2, adding to existing assets or creating new ones\n  assets2.forEach((asset) => {\n    const existingAsset = assetMap.get(asset.assetId);\n    if (existingAsset) {\n      existingAsset.amount = bn(existingAsset.amount).add(asset.amount);\n    } else {\n      assetMap.set(asset.assetId, { ...asset });\n    }\n  });\n\n  return Array.from(assetMap.values());\n}\n\n/** @hidden */\nfunction isSameOperation(a: Operation, b: Operation) {\n  return (\n    a.name === b.name &&\n    a.from?.address === b.from?.address &&\n    a.to?.address === b.to?.address &&\n    a.from?.type === b.from?.type &&\n    a.to?.type === b.to?.type\n  );\n}\n\n/** @hidden */\nfunction mergeAssetsSent(existing: Operation, toAdd: Operation): Operation['assetsSent'] {\n  if (!toAdd.assetsSent?.length) {\n    return existing.assetsSent;\n  }\n\n  return existing.assetsSent?.length ? mergeAssets(existing, toAdd) : toAdd.assetsSent;\n}\n\n/** @hidden */\nfunction mergeCalls(existing: Operation, toAdd: Operation): Operation['calls'] {\n  if (!toAdd.calls?.length) {\n    return existing.calls;\n  }\n\n  return [...(existing.calls || []), ...toAdd.calls];\n}\n\n/** @hidden */\nfunction mergeOperations(existing: Operation, toAdd: Operation): Operation {\n  return {\n    ...existing,\n    assetsSent: mergeAssetsSent(existing, toAdd),\n    calls: mergeCalls(existing, toAdd),\n    receipts: [\n      ...(existing.receipts || []),\n      ...(toAdd.receipts?.filter((r) => !existing.receipts?.some((er) => er === r)) || []),\n    ],\n  };\n}\n\n/** @hidden */\nexport function addOperation(operations: Operation[], toAdd: Operation): Operation[] {\n  const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));\n\n  if (existingIndex === -1) {\n    return [...operations, toAdd];\n  }\n\n  return operations.map((op, index) => (index === existingIndex ? mergeOperations(op, toAdd) : op));\n}\n\n/** @hidden */\nexport function getReceiptsTransferOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultTransferOutReceipt>(receipts, ReceiptType.TransferOut);\n}\n\n/**\n * Creates withdrawal operations from Fuel to Ethereum based on message out receipts\n *\n * @param inputs - Transaction inputs containing account information\n * @param receipts - Transaction receipts containing withdrawal details\n * @param baseAssetId - The ID of the asset being withdrawn\n * @returns Array of withdrawal operations with sender, recipient, and asset id.\n */\nexport function getWithdrawFromFuelOperations({\n  inputs,\n  receipts,\n  baseAssetId,\n}: InputParam & ReceiptParam & { baseAssetId: string }): Operation[] {\n  const messageOutReceipts = getReceiptsMessageOut(receipts);\n\n  const withdrawFromFuelOperations = messageOutReceipts.reduce(\n    (prevWithdrawFromFuelOps, receipt) => {\n      const input = getInputFromAssetId(inputs, baseAssetId, true);\n      if (input) {\n        const inputAddress = getInputAccountAddress(input);\n        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {\n          name: OperationName.withdrawFromFuel,\n          from: {\n            type: AddressType.account,\n            address: inputAddress,\n          },\n          to: {\n            type: AddressType.account,\n            address: receipt.recipient.toString(),\n            chain: ChainName.ethereum,\n          },\n          assetsSent: [\n            {\n              amount: receipt.amount,\n              assetId: baseAssetId,\n            },\n          ],\n          receipts: [receipt],\n        });\n\n        return newWithdrawFromFuelOps;\n      }\n\n      return prevWithdrawFromFuelOps;\n    },\n    [] as Operation[]\n  );\n\n  return withdrawFromFuelOperations;\n}\n\n/** @hidden */\nfunction getContractCalls(\n  contractInput: InputContract,\n  abiMap: AbiMap | undefined,\n  _receipt: TransactionResultCallReceipt,\n  _rawPayload: string,\n  _maxInputs: BN\n): FunctionCall[] {\n  const abi = abiMap?.[contractInput.contractID];\n  if (!abi) {\n    return [];\n  }\n\n  // Until we can successfully decode all operations, including multicall we\n  // will just return an empty. This should then be reintroduced in\n  // https://github.com/FuelLabs/fuels-ts/issues/3733\n  return [];\n  // return [ getFunctionCall({ abi, receipt, rawPayload, maxInputs }) ];\n}\n\n/** @hidden */\nfunction getAssetsSent(receipt: TransactionResultCallReceipt): OperationCoin[] | undefined {\n  return receipt.amount?.isZero()\n    ? undefined\n    : [\n        {\n          amount: receipt.amount,\n          assetId: receipt.assetId,\n        },\n      ];\n}\n\n/** @hidden */\nfunction processCallReceipt(\n  receipt: TransactionResultCallReceipt,\n  contractInput: InputContract,\n  inputs: Input[],\n  abiMap: AbiMap | undefined,\n  rawPayload: string,\n  maxInputs: BN,\n  baseAssetId: string\n): Operation[] {\n  const assetId = receipt.assetId === ZeroBytes32 ? baseAssetId : receipt.assetId;\n  const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);\n  if (!input) {\n    return [];\n  }\n\n  const inputAddress = getInputAccountAddress(input);\n  const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);\n\n  return [\n    {\n      name: OperationName.contractCall,\n      from: {\n        type: AddressType.account,\n        address: inputAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: receipt.to,\n      },\n      assetsSent: getAssetsSent(receipt),\n      calls,\n      receipts: [receipt],\n    },\n  ];\n}\n\n/** @hidden */\nexport function getContractCallOperations({\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId,\n}: InputOutputParam &\n  ReceiptParam &\n  Pick<GetOperationParams, 'abiMap' | 'maxInputs' | 'baseAssetId'> &\n  RawPayloadParam): Operation[] {\n  const contractCallReceipts = getReceiptsCall(receipts);\n  const contractOutputs = getOutputsContract(outputs);\n\n  return contractOutputs.flatMap((output) => {\n    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);\n    if (!contractInput) {\n      return [];\n    }\n\n    return contractCallReceipts\n      .filter((receipt) => receipt.to === contractInput.contractID)\n      .flatMap((receipt) =>\n        processCallReceipt(\n          receipt,\n          contractInput,\n          inputs,\n          abiMap,\n          rawPayload as string,\n          maxInputs,\n          baseAssetId\n        )\n      );\n  });\n}\n\n/**\n * Extracts a transfer operation from a transaction receipt, determining the addresses and types\n * of the sender and receiver, along with the transferred asset details.\n *\n * @param receipt - The transaction receipt containing transfer information\n * @param contractInputs - Array of contract inputs to determine address types\n * @param changeOutputs - Array of change outputs to resolve zero addresses\n * @returns A transfer operation object with sender, receiver and asset details\n */\nfunction extractTransferOperationFromReceipt(\n  receipt: TransactionResultTransferReceipt | TransactionResultTransferOutReceipt,\n  contractInputs: InputContract[],\n  changeOutputs: OutputChange[]\n) {\n  const { to: toAddress, assetId, amount } = receipt;\n  let { id: fromAddress } = receipt;\n\n  const toType = contractInputs.some((input) => input.contractID === toAddress)\n    ? AddressType.contract\n    : AddressType.account;\n\n  if (ZeroBytes32 === fromAddress) {\n    const change = changeOutputs.find((output) => output.assetId === assetId);\n\n    fromAddress = change?.to || fromAddress;\n  }\n\n  const fromType = contractInputs.some((input) => input.contractID === fromAddress)\n    ? AddressType.contract\n    : AddressType.account;\n\n  return {\n    name: OperationName.transfer,\n    from: {\n      type: fromType,\n      address: fromAddress,\n    },\n    to: {\n      type: toType,\n      address: toAddress,\n    },\n    assetsSent: [\n      {\n        assetId: assetId.toString(),\n        amount,\n      },\n    ],\n    receipts: [receipt],\n  };\n}\n\n/** @hidden */\nexport function getTransferOperations({\n  inputs,\n  outputs,\n  receipts,\n  baseAssetId,\n}: GetTransferOperationsParams): Operation[] {\n  let operations: Operation[] = [];\n\n  const coinOutputs = getOutputsCoin(outputs);\n  const contractInputs = getInputsContract(inputs);\n  const changeOutputs = getOutputsChange(outputs);\n\n  const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);\n\n  /**\n   * Extracting transfer operations between wallets, as they do not produce receipts\n   */\n  coinOutputs.forEach(({ amount, assetId, to }) => {\n    const txPayers = aggregated.get(assetId) || new Map<string, BN>();\n    let selectedPayer: string | undefined;\n    let fallbackPayer: string | undefined;\n\n    for (const [address, payedAmount] of txPayers) {\n      if (!fallbackPayer) {\n        fallbackPayer = address; // Set the first payer as a fallback\n      }\n\n      if (payedAmount.gte(amount)) {\n        selectedPayer = address;\n        break; // Stop looping once a suitable payer is found\n      }\n    }\n\n    // If no suitable payer is found, use the fallback payer\n    selectedPayer = selectedPayer || fallbackPayer;\n\n    if (selectedPayer) {\n      operations = addOperation(operations, {\n        name: OperationName.transfer,\n        from: {\n          type: AddressType.account,\n          address: selectedPayer,\n        },\n        to: {\n          type: AddressType.account,\n          address: to,\n        },\n        assetsSent: [{ assetId, amount }],\n      });\n    }\n  });\n\n  /**\n   * `Transfer` receipts are produced from transfers:\n   * - Wallet to Contract\n   * - Contract to Contract\n   */\n  const transferReceipts = getReceiptsByType<TransactionResultTransferReceipt>(\n    receipts,\n    ReceiptType.Transfer\n  );\n\n  /**\n   * `TransferOut` receipts are produced from transfer:\n   * - Contract to Wallet\n   */\n  const transferOutReceipts = getReceiptsByType<TransactionResultTransferOutReceipt>(\n    receipts,\n    ReceiptType.TransferOut\n  );\n\n  [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {\n    const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);\n\n    operations = addOperation(operations, operation);\n  });\n\n  return operations;\n}\n\n/** @hidden */\nexport function getPayProducerOperations(outputs: Output[]): Operation[] {\n  const coinOutputs = getOutputsCoin(outputs);\n  const payProducerOperations = coinOutputs.reduce((prev, output) => {\n    const operations = addOperation(prev, {\n      name: OperationName.payBlockProducer,\n      from: {\n        type: AddressType.account,\n        address: 'Network',\n      },\n      to: {\n        type: AddressType.account,\n        address: output.to.toString(),\n      },\n      assetsSent: [\n        {\n          assetId: output.assetId.toString(),\n          amount: output.amount,\n        },\n      ],\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return payProducerOperations;\n}\n\n/** @hidden */\nexport function getContractCreatedOperations({ inputs, outputs }: InputOutputParam): Operation[] {\n  const contractCreatedOutputs = getOutputsContractCreated(outputs);\n  const input = getInputsCoinAndMessage(inputs)[0];\n  const fromAddress = getInputAccountAddress(input);\n  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {\n    const operations = addOperation(prev, {\n      name: OperationName.contractCreated,\n      from: {\n        type: AddressType.account,\n        address: fromAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: contractCreatedOutput?.contractId || '',\n      },\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return contractCreatedOperations;\n}\n\n/** @hidden */\nexport function getOperations({\n  transactionType,\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId,\n}: GetOperationParams): Operation[] {\n  if (isTypeCreate(transactionType)) {\n    return [...getContractCreatedOperations({ inputs, outputs })];\n  }\n\n  if (isTypeScript(transactionType)) {\n    return [\n      ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),\n      ...getContractCallOperations({\n        inputs,\n        outputs,\n        receipts,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId,\n      }),\n      ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId }),\n    ];\n  }\n  // at this point we are sure it's a mint transaction\n  return [...getPayProducerOperations(outputs)];\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { BN } from '@fuel-ts/math';\nimport type { Input, InputCoin, InputContract, InputMessage } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getInputsByTypes<T = Input>(inputs: Input[], types: Array<InputType>) {\n  return inputs.filter((i) => types.includes(i.type)) as T[];\n}\n\n/** @hidden */\nexport function getInputsByType<T = Input>(inputs: Input[], type: InputType) {\n  return inputs.filter((i) => i.type === type) as T[];\n}\n\n/** @hidden */\nexport function getInputsCoin(inputs: Input[]): InputCoin[] {\n  return getInputsByType<InputCoin>(inputs, InputType.Coin);\n}\n\n/** @hidden */\nexport function getInputsMessage(inputs: Input[]) {\n  return getInputsByType<InputMessage>(inputs, InputType.Message);\n}\n\n/** @hidden */\nexport function getInputsCoinAndMessage(inputs: Input[]) {\n  return getInputsByTypes<InputCoin | InputMessage>(inputs, [InputType.Coin, InputType.Message]);\n}\n\n/** @hidden */\nexport function isInputCoin(input: Input): input is InputCoin {\n  return input.type === InputType.Coin;\n}\n\n/** @hidden */\nexport function getInputsContract(inputs: Input[]) {\n  return getInputsByType<InputContract>(inputs, InputType.Contract);\n}\n\n/** @hidden */\nfunction findCoinInput(inputs: Input[], assetId: string): InputCoin | undefined {\n  const coinInputs = getInputsCoin(inputs);\n  return coinInputs.find((i) => i.assetId === assetId);\n}\n\n/** @hidden */\nexport function aggregateInputsAmountsByAssetAndOwner(\n  inputs: Input[],\n  baseAssetId: string\n): Map<string, Map<string, BN>> {\n  const aggregated = new Map<string, Map<string, BN>>();\n\n  getInputsCoinAndMessage(inputs).forEach((input) => {\n    const assetId = isInputCoin(input) ? input.assetId : baseAssetId;\n    const owner = isInputCoin(input) ? input.owner : input.recipient;\n\n    // Ensure that the map for the assetId exists\n    let ownersMap = aggregated.get(assetId);\n    if (!ownersMap) {\n      ownersMap = new Map<string, BN>();\n      aggregated.set(assetId, ownersMap);\n    }\n\n    // Ensure that the map for the owner exists\n    let ownerBalance = ownersMap.get(owner);\n    if (!ownerBalance) {\n      ownerBalance = new BN(0);\n      ownersMap.set(owner, ownerBalance);\n    }\n\n    // Update the balance\n    ownersMap.set(owner, ownerBalance.add(input.amount));\n  });\n\n  return aggregated;\n}\n\n/** @hidden */\nfunction findMessageInput(inputs: Input[]): InputMessage | undefined {\n  return getInputsMessage(inputs)?.[0];\n}\n/** @hidden */\nexport function getInputFromAssetId(\n  inputs: Input[],\n  assetId: string,\n  isBaseAsset = false\n): InputCoin | InputMessage | undefined {\n  const coinInput = findCoinInput(inputs, assetId);\n  if (coinInput) {\n    return coinInput;\n  }\n\n  if (isBaseAsset) {\n    return findMessageInput(inputs);\n  }\n\n  // #TODO: we should throw an error here if we are unable to return a valid input\n  return undefined;\n}\n\n/** @hidden */\nexport function getInputContractFromIndex(\n  inputs: Input[],\n  inputIndex: number\n): InputContract | undefined {\n  if (inputIndex == null) {\n    return undefined;\n  }\n\n  const contractInput = inputs?.[inputIndex];\n\n  if (!contractInput) {\n    return undefined;\n  }\n  if (contractInput.type !== InputType.Contract) {\n    throw new FuelError(\n      ErrorCode.INVALID_TRANSACTION_INPUT,\n      `Contract input should be of type 'contract'.`\n    );\n  }\n\n  return contractInput as InputContract;\n}\n\n/** @hidden */\nexport function getInputAccountAddress(input: Input) {\n  if (input.type === InputType.Coin) {\n    return input.owner.toString();\n  }\n\n  if (input.type === InputType.Message) {\n    return input.recipient.toString();\n  }\n\n  return '';\n}\n","import type {\n  Output,\n  OutputChange,\n  OutputCoin,\n  OutputContract,\n  OutputContractCreated,\n  OutputVariable,\n} from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getOutputsByType<T = Output>(outputs: Output[], type: OutputType) {\n  return outputs.filter((o) => o.type === type) as T[];\n}\n\n/** @hidden */\nexport function getOutputsContractCreated(outputs: Output[]) {\n  return getOutputsByType<OutputContractCreated>(outputs, OutputType.ContractCreated);\n}\n\n/** @hidden */\nexport function getOutputsCoin(outputs: Output[]) {\n  return getOutputsByType<OutputCoin>(outputs, OutputType.Coin);\n}\n\n/** @hidden */\nexport function getOutputsChange(outputs: Output[]) {\n  return getOutputsByType<OutputChange>(outputs, OutputType.Change);\n}\n\n/** @hidden */\nexport function getOutputsContract(outputs: Output[]) {\n  return getOutputsByType<OutputContract>(outputs, OutputType.Contract);\n}\n\n/** @hidden */\nexport function getOutputsVariable(outputs: Output[]) {\n  return getOutputsByType<OutputVariable>(outputs, OutputType.Variable);\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport type { B256Address } from '@fuel-ts/address';\nimport type { BN, BNInput } from '@fuel-ts/math';\nimport type {\n  Transaction,\n  Input,\n  Output,\n  TransactionType,\n  OutputChange,\n  OutputVariable,\n} from '@fuel-ts/transactions';\n\nimport type { GqlSuccessStatusFragment } from '../__generated__/operations';\nimport type { TransactionReceiptJson } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\nexport type SubmittedStatus = {\n  type: 'SubmittedStatus';\n  time: string;\n};\n\nexport type SuccessStatus = {\n  type: 'SuccessStatus';\n  time: string;\n  programState?: GqlSuccessStatusFragment['programState'];\n  block?: {\n    id: string;\n  };\n  receipts: TransactionReceiptJson[];\n  totalGas: string;\n  totalFee: string;\n};\n\nexport type FailureStatus = {\n  type: 'FailureStatus';\n  time: string;\n  reason: string;\n  block?: {\n    id: string;\n  };\n  receipts: TransactionReceiptJson[];\n  totalGas: string;\n  totalFee: string;\n};\n\nexport type SqueezedOutStatus = {\n  type: 'SqueezedOutStatus';\n  reason: string;\n};\n\nexport type SerializedResolvedOutput = {\n  utxoId: string;\n  output:\n    | { to: string; amount: string; assetId: string; type: 'ChangeOutput' }\n    | { to: string; amount: string; assetId: string; type: 'CoinOutput' }\n    | { contract: string; stateRoot: string; type: 'ContractCreated' }\n    | { inputIndex: string; balanceRoot: string; stateRoot: string; type: 'ContractOutput' }\n    | { to: string; amount: string; assetId: string; type: 'VariableOutput' };\n};\n\n// #region resolved-output-type\nexport type ResolvedOutput = {\n  utxoId: string;\n  output: OutputChange | OutputVariable;\n};\n// #endregion resolved-output-type\n\nexport type PreconfirmationSuccessStatus = {\n  type: 'PreconfirmationSuccessStatus';\n  totalFee: string;\n  totalGas: string;\n  resolvedOutputs?: SerializedResolvedOutput[] | null;\n  preconfirmationReceipts?: TransactionReceiptJson[] | null;\n  preconfirmationTransaction?: { rawPayload: string } | null;\n};\n\nexport type PreconfirmationFailureStatus = {\n  type: 'PreconfirmationFailureStatus';\n  reason: string;\n  totalFee: string;\n  totalGas: string;\n  resolvedOutputs?: SerializedResolvedOutput[] | null;\n  preconfirmationReceipts?: TransactionReceiptJson[] | null;\n  preconfirmationTransaction?: { rawPayload: string } | null;\n};\n\nexport type GraphqlTransactionStatus =\n  | SubmittedStatus\n  | SuccessStatus\n  | FailureStatus\n  | SqueezedOutStatus\n  | PreconfirmationSuccessStatus\n  | PreconfirmationFailureStatus\n  | null;\n\nexport type GqlTransaction = {\n  id: string;\n  rawPayload: string;\n  status?: GraphqlTransactionStatus;\n};\n\nexport type Reason = FailureStatus['reason'];\nexport type ProgramState = SuccessStatus['programState'];\nexport type Time = SubmittedStatus['time'] | SuccessStatus['time'] | FailureStatus['time'];\nexport type BlockId = string;\n\n/**\n * @hidden\n */\nexport enum TransactionTypeName {\n  Create = 'Create',\n  Mint = 'Mint',\n  Script = 'Script',\n  Upgrade = 'Upgrade',\n  Upload = 'Upload',\n  Blob = 'Blob',\n}\n\n/**\n * @hidden\n */\nexport enum TransactionStatus {\n  submitted = 'submitted',\n  success = 'success',\n  squeezedout = 'squeezedout',\n  failure = 'failure',\n  preconfirmationSuccess = 'preconfirmationSuccess',\n  preconfirmationFailure = 'preconfirmationFailure',\n}\n\n/**\n * @hidden\n */\nexport type GqlTransactionStatusesNames =\n  | 'FailureStatus'\n  | 'SubmittedStatus'\n  | 'SuccessStatus'\n  | 'SqueezedOutStatus'\n  | 'PreconfirmationSuccessStatus'\n  | 'PreconfirmationFailureStatus';\n\n/**\n * @hidden\n */\nexport enum OperationName {\n  payBlockProducer = 'Pay network fee to block producer',\n  contractCreated = 'Contract created',\n  transfer = 'Transfer asset',\n  contractCall = 'Contract call',\n  receive = 'Receive asset',\n  withdrawFromFuel = 'Withdraw from Fuel',\n}\n\nexport type OperationCoin = {\n  assetId: string;\n  amount: BNInput;\n};\n\nexport type OperationFunctionCall = {\n  functionSignature: string;\n  functionName: string;\n  argumentsProvided?: Record<string, unknown>;\n} & Partial<OperationCoin>;\n\nexport type Operation = {\n  name?: OperationName;\n  from?: OperationTransactionAddress;\n  to?: OperationTransactionAddress;\n  assetsSent?: Array<OperationCoin>;\n  calls?: Array<OperationFunctionCall>;\n  receipts?: TransactionResultReceipt[];\n};\n\n/**\n * @hidden\n */\nexport enum AddressType {\n  contract,\n  account,\n}\n\n/**\n * @hidden\n */\nexport enum ChainName {\n  ethereum = 'ethereum',\n  fuel = 'fuel',\n}\n\nexport type OperationTransactionAddress = {\n  address: string;\n  type: AddressType;\n  chain?: ChainName;\n};\n\nexport type InputParam = {\n  inputs: Input[];\n};\n\nexport type OutputParam = {\n  outputs: Output[];\n};\n\nexport type ReceiptParam = {\n  receipts: TransactionResultReceipt[];\n};\n\nexport type AbiMap = Record<string, JsonAbi>;\n\nexport type RawPayloadParam = {\n  rawPayload?: string;\n};\n\nexport type InputOutputParam = InputParam & OutputParam;\n\nexport interface GetTransferOperationsParams extends InputOutputParam {\n  receipts: TransactionResultReceipt[];\n  baseAssetId: string;\n}\n\nexport type GetOperationParams = {\n  transactionType: TransactionType;\n  abiMap?: AbiMap;\n  maxInputs: BN;\n  baseAssetId: string;\n} & InputOutputParam &\n  ReceiptParam &\n  RawPayloadParam;\n\nexport interface MintedAsset {\n  subId: B256Address;\n  contractId: B256Address;\n  assetId: B256Address;\n  amount: BN;\n}\n\nexport type BurnedAsset = MintedAsset;\n\nexport interface PreConfirmationTransactionSummary {\n  id: string;\n  status?: TransactionStatus;\n  isStatusPreConfirmationSuccess: boolean;\n  isStatusPreConfirmationFailure: boolean;\n  isStatusPending: boolean;\n  isStatusSuccess: boolean;\n  isStatusFailure: boolean;\n  receipts?: TransactionResultReceipt[];\n  isTypeMint?: boolean;\n  isTypeCreate?: boolean;\n  isTypeScript?: boolean;\n  isTypeUpgrade?: boolean;\n  isTypeUpload?: boolean;\n  isTypeBlob?: boolean;\n  errorReason?: string;\n  operations?: Operation[];\n  gasUsed?: BN;\n  mintedAssets?: MintedAsset[];\n  burnedAssets?: BurnedAsset[];\n  tip?: BN;\n  fee?: BN;\n  type?: TransactionTypeName;\n  transaction?: Transaction;\n  resolvedOutputs?: ResolvedOutput[];\n}\n\nexport type TransactionSummary<TTransactionType = void> = {\n  id: string;\n  time?: string;\n  operations: Operation[];\n  gasUsed: BN;\n  tip: BN;\n  fee: BN;\n  type: TransactionTypeName;\n  blockId?: BlockId;\n  status?: TransactionStatus;\n  isTypeMint: boolean;\n  isTypeCreate: boolean;\n  isTypeScript: boolean;\n  isTypeUpgrade: boolean;\n  isTypeUpload: boolean;\n  isTypeBlob: boolean;\n  isStatusPending: boolean;\n  isStatusSuccess: boolean;\n  isStatusFailure: boolean;\n  mintedAssets: MintedAsset[];\n  burnedAssets: BurnedAsset[];\n  date?: Date;\n  receipts: TransactionResultReceipt[];\n  transaction: Transaction<TTransactionType>;\n};\n","import { ReceiptType } from '@fuel-ts/transactions';\n\nimport type { TransactionReceiptJson } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { deserializeReceipt } from '../utils/serialization';\n\nimport type { BurnedAsset, MintedAsset } from './types';\n\n/** @deprecated Use `deserializeReceipt` instead. */\nexport const processGqlReceipt = (gqlReceipt: TransactionReceiptJson): TransactionResultReceipt =>\n  deserializeReceipt(gqlReceipt);\n\nexport const extractMintedAssetsFromReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): MintedAsset[] => {\n  const mintedAssets: MintedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Mint) {\n      mintedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return mintedAssets;\n};\n\nexport const extractBurnedAssetsFromReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): BurnedAsset[] => {\n  const burnedAssets: BurnedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Burn) {\n      burnedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return burnedAssets;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { OutputChange, OutputVariable } from '@fuel-ts/transactions';\n\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { deserializeProcessedTxOutput, deserializeReceipt } from '../utils';\n\nimport { TransactionStatus } from './types';\nimport type {\n  BlockId,\n  GqlTransactionStatusesNames,\n  GraphqlTransactionStatus,\n  Time,\n  ResolvedOutput,\n  SerializedResolvedOutput,\n} from './types';\n\n/** @hidden */\nexport const getTransactionStatusName = (gqlStatus: GqlTransactionStatusesNames) => {\n  switch (gqlStatus) {\n    case 'FailureStatus':\n      return TransactionStatus.failure;\n    case 'SuccessStatus':\n      return TransactionStatus.success;\n    case 'SubmittedStatus':\n      return TransactionStatus.submitted;\n    case 'SqueezedOutStatus':\n      return TransactionStatus.squeezedout;\n    case 'PreconfirmationSuccessStatus':\n      return TransactionStatus.preconfirmationSuccess;\n    case 'PreconfirmationFailureStatus':\n      return TransactionStatus.preconfirmationFailure;\n    default:\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_STATUS,\n        `Invalid transaction status: ${gqlStatus}.`\n      );\n  }\n};\n\n/** @hidden */\nexport const extractResolvedOutputs = (\n  serializedOutputs?: SerializedResolvedOutput[] | null\n): ResolvedOutput[] => {\n  const resolvedOutputs: ResolvedOutput[] = [];\n  serializedOutputs?.forEach(({ utxoId, output }) =>\n    resolvedOutputs.push({\n      utxoId,\n      output: deserializeProcessedTxOutput(output) as OutputChange | OutputVariable,\n    })\n  );\n  return resolvedOutputs;\n};\n\ntype IProcessGraphqlStatusResponse = {\n  time?: Time;\n  blockId?: BlockId;\n  status?: TransactionStatus;\n  totalFee?: BN;\n  totalGas?: BN;\n  receipts?: TransactionResultReceipt[];\n  isStatusFailure: boolean;\n  isStatusSuccess: boolean;\n  isStatusPending: boolean;\n  isStatusPreConfirmationSuccess: boolean;\n  isStatusPreConfirmationFailure: boolean;\n  resolvedOutputs?: ResolvedOutput[];\n  errorReason?: string;\n};\n\n/** @hidden */\nexport const processGraphqlStatus = (gqlTransactionStatus?: GraphqlTransactionStatus) => {\n  let time: Time | undefined;\n  let blockId: BlockId | undefined;\n  let status: TransactionStatus | undefined;\n  let totalFee: BN | undefined;\n  let totalGas: BN | undefined;\n  let receipts: TransactionResultReceipt[] | undefined;\n  let resolvedOutputs: ResolvedOutput[] = [];\n  let errorReason: string | undefined;\n\n  let isStatusFailure = false;\n  let isStatusSuccess = false;\n  let isStatusPending = false;\n  let isStatusPreConfirmationSuccess = false;\n  let isStatusPreConfirmationFailure = false;\n\n  if (gqlTransactionStatus?.type) {\n    status = getTransactionStatusName(gqlTransactionStatus.type);\n\n    switch (gqlTransactionStatus.type) {\n      case 'SuccessStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusSuccess = true;\n        receipts = gqlTransactionStatus.receipts?.map(deserializeReceipt);\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        break;\n\n      case 'FailureStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusFailure = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        receipts = gqlTransactionStatus.receipts?.map(deserializeReceipt);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        break;\n\n      case 'SubmittedStatus':\n        time = gqlTransactionStatus.time;\n        isStatusPending = true;\n        break;\n\n      case 'PreconfirmationSuccessStatus':\n        isStatusPreConfirmationSuccess = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        receipts = gqlTransactionStatus.preconfirmationReceipts?.map(deserializeReceipt);\n        resolvedOutputs = extractResolvedOutputs(gqlTransactionStatus.resolvedOutputs);\n        break;\n\n      case 'PreconfirmationFailureStatus':\n        isStatusPreConfirmationFailure = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        receipts = gqlTransactionStatus.preconfirmationReceipts?.map(deserializeReceipt);\n        resolvedOutputs = extractResolvedOutputs(gqlTransactionStatus.resolvedOutputs);\n        errorReason = gqlTransactionStatus.reason;\n        break;\n\n      default:\n    }\n  }\n\n  const processedGraphqlStatus: IProcessGraphqlStatusResponse = {\n    time,\n    blockId,\n    status,\n    totalFee,\n    totalGas,\n    receipts,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    isStatusPreConfirmationSuccess,\n    isStatusPreConfirmationFailure,\n    resolvedOutputs,\n    errorReason,\n  };\n\n  return processedGraphqlStatus;\n};\n\n/**\n * Returns the total fee from the transaction status.\n *\n * @param status - The transaction status.\n * @returns The total fee from the transaction status or undefined.\n */\nexport const getTotalFeeFromStatus = (status?: GraphqlTransactionStatus): BN | undefined =>\n  status && 'totalFee' in status ? bn(status.totalFee) : undefined;\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultCallReceipt,\n  TransactionResultReceipt,\n} from './transaction-response';\n\nexport interface DecodedLogs<T = unknown> {\n  logs: T[];\n  groupedLogs: Record<string, T[]>;\n}\n\n/**\n * @hidden\n *\n * This helper decodes logs from transaction receipts.\n * It loops through all receipts and decodes two types of logs:\n * - ReceiptType.LogData\n * - ReceiptType.Log\n *\n * The \"mainAbi\" parameter represents the ABI of the main contract used to create the transaction\n * or the ABI from a script used within a \"BaseInvocationScope\" context.\n * The \"externalAbis\" parameter is a record of contract ABIs that are also part of the transaction.\n * These ABIs were added using `contract.addContracts` or through a multi-call with `contract.multiCall`.\n *\n * @param receipts - The array of transaction result receipts.\n * @param mainAbi - The ABI of the script or main contract.\n * @param externalAbis - The record of external contract ABIs.\n * @returns An array of decoded logs from Sway projects.\n */\nexport function getAllDecodedLogs<T = unknown>(opts: {\n  receipts: Array<TransactionResultReceipt>;\n  mainAbi: JsonAbi;\n  externalAbis?: Record<string, JsonAbi>;\n}): DecodedLogs<T> {\n  const { receipts, mainAbi, externalAbis = {} } = opts;\n\n  let mainContract = '';\n  if (mainAbi.programType === 'contract') {\n    const firstCallReceipt = receipts.find(\n      (r) => r.type === ReceiptType.Call && r.id === ZeroBytes32\n    ) as TransactionResultCallReceipt;\n\n    if (firstCallReceipt) {\n      mainContract = firstCallReceipt.to;\n    }\n  }\n\n  return receipts.reduce(\n    ({ logs, groupedLogs }, receipt) => {\n      if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {\n        const isLogFromMainAbi = receipt.id === ZeroBytes32 || mainContract === receipt.id;\n        const isDecodable = isLogFromMainAbi || externalAbis[receipt.id];\n\n        if (isDecodable) {\n          const interfaceToUse = isLogFromMainAbi\n            ? new Interface(mainAbi)\n            : new Interface(externalAbis[receipt.id]);\n\n          const data =\n            receipt.type === ReceiptType.Log\n              ? new BigNumberCoder('u64').encode(receipt.ra)\n              : receipt.data;\n\n          const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n          logs.push(decodedLog);\n          // eslint-disable-next-line no-param-reassign\n          groupedLogs[receipt.id] = [...(groupedLogs[receipt.id] || []), decodedLog];\n        }\n      }\n\n      return { logs, groupedLogs };\n    },\n    { logs: [], groupedLogs: {} } as DecodedLogs<T>\n  );\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultCallReceipt,\n  TransactionResultReceipt,\n} from './transaction-response';\n\n/**\n * @hidden\n *\n * This helper decodes logs from transaction receipts.\n * It loops through all receipts and decodes two types of logs:\n * - ReceiptType.LogData\n * - ReceiptType.Log\n *\n * The \"mainAbi\" parameter represents the ABI of the main contract used to create the transaction\n * or the ABI from a script used within a \"BaseInvocationScope\" context.\n * The \"externalAbis\" parameter is a record of contract ABIs that are also part of the transaction.\n * These ABIs were added using `contract.addContracts` or through a multi-call with `contract.multiCall`.\n *\n * @param receipts - The array of transaction result receipts.\n * @param mainAbi - The ABI of the script or main contract.\n * @param externalAbis - The record of external contract ABIs.\n * @returns An array of decoded logs from Sway projects.\n *\n * @deprecated Use `getAllDecodedLogs` instead.\n */\nexport function getDecodedLogs<T = unknown>(\n  receipts: Array<TransactionResultReceipt>,\n  mainAbi: JsonAbi,\n  externalAbis: Record<string, JsonAbi> = {}\n): T[] {\n  let mainContract = '';\n  if (mainAbi.programType === 'contract') {\n    const firstCallReceipt = receipts.find(\n      (r) => r.type === ReceiptType.Call && r.id === ZeroBytes32\n    ) as TransactionResultCallReceipt;\n\n    mainContract = firstCallReceipt.to;\n  }\n\n  return receipts.reduce((logs: T[], receipt) => {\n    if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {\n      const isLogFromMainAbi = receipt.id === ZeroBytes32 || mainContract === receipt.id;\n      const isDecodable = isLogFromMainAbi || externalAbis[receipt.id];\n\n      if (isDecodable) {\n        const interfaceToUse = isLogFromMainAbi\n          ? new Interface(mainAbi)\n          : new Interface(externalAbis[receipt.id]);\n\n        const data =\n          receipt.type === ReceiptType.Log\n            ? new BigNumberCoder('u64').encode(receipt.ra)\n            : receipt.data;\n\n        const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n        logs.push(decodedLog);\n      }\n    }\n\n    return logs;\n  }, []);\n}\n","import { sleep } from '@fuel-ts/utils';\n\nimport type { ProviderOptions } from '../provider';\n\ntype Backoff = 'linear' | 'exponential' | 'fixed';\n\n/**\n * Retry options scheme\n */\nexport type RetryOptions = {\n  /**\n   * Amount of attempts to retry before failing the call.\n   */\n  maxRetries: number;\n  /**\n   * Backoff strategy to use when retrying. Default is exponential.\n   */\n  backoff?: Backoff;\n  /**\n   * Starting delay for backoff strategy. Default is 150ms.\n   */\n  baseDelay?: number;\n};\n\n/**\n * Calculate the delay for the next retry attempt\n * @param options - Retry options configuration\n * @param retryAttemptNum - 1-based, tells which retry attempt is this\n * @returns Next wait delay\n */\nexport function getWaitDelay(options: RetryOptions, retryAttemptNum: number) {\n  const duration = options.baseDelay ?? 150;\n\n  switch (options.backoff) {\n    case 'linear':\n      return duration * retryAttemptNum;\n    case 'fixed':\n      return duration;\n    case 'exponential':\n    default:\n      return 2 ** (retryAttemptNum - 1) * duration;\n  }\n}\n\n/**\n * Returns a wrapped fetch function that will auto-execute itself in case of errors, until it succeeds\n * @param fetchFn - Function to be auto-retried\n * @param options - Retry options configuration\n * @param retryAttemptNum - ZERO=first call, ONE=first retry, TWO=second retry, etc.\n * @returns Whatever is the output of the `fetchFn` function\n */\nexport function autoRetryFetch(\n  fetchFn: NonNullable<ProviderOptions['fetch']>,\n  options?: RetryOptions,\n  retryAttemptNum: number = 0\n): NonNullable<ProviderOptions['fetch']> {\n  if (options === undefined) {\n    return fetchFn;\n  }\n\n  return async (...args) => {\n    try {\n      return await fetchFn(...args);\n    } catch (_error: unknown) {\n      const error = _error as Error & { cause?: { code: string } };\n\n      /**\n       * So far, we are auto-retrying only for `ECONNREFUSED` error.\n       * TODO: Investigate if we should consider more errors.\n       */\n      if (error.cause?.code !== 'ECONNREFUSED') {\n        throw error;\n      }\n      const retryNum = retryAttemptNum + 1;\n\n      if (retryNum > options.maxRetries) {\n        throw error;\n      }\n\n      const delay = getWaitDelay(options, retryNum);\n\n      await sleep(delay);\n\n      return autoRetryFetch(fetchFn, options, retryNum)(...args);\n    }\n  };\n}\n","import { FuelGraphqlSubscriber } from '../fuel-graphql-subscriber';\n\ntype ParseGraphqlResponseReturns = {\n  extensions: {\n    current_fuel_block_height?: number;\n    fuel_block_height_precondition_failed: boolean;\n  };\n};\n\nexport const parseGraphqlResponse = async (options: {\n  response: Response;\n  isSubscription: boolean;\n}): Promise<ParseGraphqlResponseReturns> => {\n  const { response, isSubscription } = options;\n\n  let extensions: {\n    current_fuel_block_height?: number;\n    fuel_block_height_precondition_failed: boolean;\n  };\n\n  const responseClone = response.clone();\n\n  if (isSubscription) {\n    const reader = responseClone.body?.getReader() as ReadableStreamDefaultReader<Uint8Array>;\n    const { event } = await FuelGraphqlSubscriber.readEvent(reader);\n\n    extensions = event?.extensions as typeof extensions;\n  } else {\n    extensions = (await responseClone.json()).extensions;\n  }\n\n  return {\n    extensions,\n  };\n};\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nimport type { CursorPaginationArgs } from '../provider';\n\n/**\n * @hidden\n */\nexport const validatePaginationArgs = (params: {\n  inputArgs?: CursorPaginationArgs;\n  paginationLimit: number;\n}): CursorPaginationArgs => {\n  const { paginationLimit, inputArgs = {} } = params;\n  const { first, last, after, before } = inputArgs;\n\n  if (after && before) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'Pagination arguments \"after\" and \"before\" cannot be used together'\n    );\n  }\n\n  if ((first || 0) > paginationLimit || (last || 0) > paginationLimit) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      `Pagination limit for this query cannot exceed ${paginationLimit} items`\n    );\n  }\n\n  if (first && before) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"first\" with \"before\" is not supported'\n    );\n  }\n\n  if (last && after) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"last\" with \"after\" is not supported'\n    );\n  }\n\n  // If neither first nor last is provided, set a default first value\n  if (!first && !last) {\n    inputArgs.first = paginationLimit;\n  }\n\n  return inputArgs;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionCoder } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { GqlGetTransactionsByOwnerQueryVariables } from '../__generated__/operations';\nimport { TRANSACTIONS_PAGE_SIZE_LIMIT } from '../provider';\nimport type Provider from '../provider';\nimport type { TransactionReceiptJson, PageInfo } from '../provider';\nimport type { TransactionRequest } from '../transaction-request';\nimport type { TransactionResult } from '../transaction-response';\nimport { deserializeReceipt } from '../utils/serialization';\nimport { validatePaginationArgs } from '../utils/validate-pagination-args';\n\nimport { assembleTransactionSummary } from './assemble-transaction-summary';\nimport { getTotalFeeFromStatus } from './status';\nimport type { AbiMap, GraphqlTransactionStatus, TransactionSummary } from './types';\n/** @hidden */\nexport interface GetTransactionSummaryParams {\n  id: string;\n  provider: Provider;\n  abiMap?: AbiMap;\n}\n\nexport async function getTransactionSummary<TTransactionType = void>(\n  params: GetTransactionSummaryParams\n): Promise<TransactionResult> {\n  const { id, provider, abiMap } = params;\n\n  const { transaction: gqlTransaction } = await provider.operations.getTransactionWithReceipts({\n    transactionId: id,\n  });\n\n  if (!gqlTransaction) {\n    throw new FuelError(\n      ErrorCode.TRANSACTION_NOT_FOUND,\n      `Transaction not found for given id: ${id}.`\n    );\n  }\n\n  const [decodedTransaction] = new TransactionCoder().decode(\n    arrayify(gqlTransaction.rawPayload),\n    0\n  );\n\n  let txReceipts: TransactionReceiptJson[] = [];\n\n  if (gqlTransaction?.status && 'receipts' in gqlTransaction.status) {\n    txReceipts = gqlTransaction.status.receipts;\n  }\n\n  const receipts = txReceipts.map(deserializeReceipt);\n\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  // If we have the total fee, we do not need to refetch the gas price\n  const totalFee = getTotalFeeFromStatus(gqlTransaction.status);\n  const gasPrice = totalFee ? bn(0) : await provider.getLatestGasPrice();\n\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactionInfo = assembleTransactionSummary<TTransactionType>({\n    id: gqlTransaction.id,\n    receipts,\n    transaction: decodedTransaction,\n    transactionBytes: arrayify(gqlTransaction.rawPayload),\n    gqlTransactionStatus: gqlTransaction.status,\n    gasPerByte: bn(gasPerByte),\n    gasPriceFactor: bn(gasPriceFactor),\n    abiMap,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  });\n\n  return {\n    ...transactionInfo,\n  };\n}\n\nexport interface GetTransactionSummaryFromRequestParams {\n  transactionRequest: TransactionRequest;\n  provider: Provider;\n  abiMap?: AbiMap;\n}\n\n/** @hidden */\nexport async function getTransactionSummaryFromRequest<TTransactionType = void>(\n  params: GetTransactionSummaryFromRequestParams\n): Promise<TransactionSummary<TTransactionType>> {\n  const { provider, transactionRequest, abiMap } = params;\n\n  const { receipts } = await provider.dryRun(transactionRequest);\n\n  const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await provider.getGasConfig();\n  const maxInputs = (await provider.getChain()).consensusParameters.txParameters.maxInputs;\n\n  const transaction = transactionRequest.toTransaction();\n  const transactionBytes = transactionRequest.toTransactionBytes();\n\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactionSummary = assembleTransactionSummary<TTransactionType>({\n    id: transactionRequest.getTransactionId(await provider.getChainId()),\n    receipts,\n    transaction,\n    transactionBytes,\n    abiMap,\n    gasPerByte,\n    gasPriceFactor,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  });\n\n  return transactionSummary;\n}\n\nexport interface GetTransactionsSummariesParams {\n  provider: Provider;\n  filters: GqlGetTransactionsByOwnerQueryVariables;\n  abiMap?: AbiMap;\n}\n\nexport interface GetTransactionsSummariesReturns {\n  transactions: TransactionResult[];\n  pageInfo: PageInfo;\n}\n\n/**\n * Gets transaction summaries for a given owner/address.\n *\n * @param params - The filters to apply to the query.\n * @returns The transaction summaries.\n */\nexport async function getTransactionsSummaries(\n  params: GetTransactionsSummariesParams\n): Promise<GetTransactionsSummariesReturns> {\n  const { filters, provider, abiMap } = params;\n\n  const { owner, ...inputArgs } = filters;\n\n  const validPaginationParams = validatePaginationArgs({\n    inputArgs,\n    paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT,\n  });\n\n  const { transactionsByOwner } = await provider.operations.getTransactionsByOwner({\n    ...validPaginationParams,\n    owner,\n  });\n\n  const { edges, pageInfo } = transactionsByOwner;\n\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactions = edges.map((edge) => {\n    const { node: gqlTransaction } = edge;\n\n    const { id, rawPayload, status } = gqlTransaction;\n\n    const [decodedTransaction] = new TransactionCoder().decode(arrayify(rawPayload), 0);\n\n    let txReceipts: TransactionReceiptJson[] = [];\n\n    if (gqlTransaction?.status && 'receipts' in gqlTransaction.status) {\n      txReceipts = gqlTransaction.status.receipts;\n    }\n\n    const receipts = txReceipts.map(deserializeReceipt);\n\n    const transactionSummary = assembleTransactionSummary({\n      id,\n      receipts,\n      transaction: decodedTransaction,\n      transactionBytes: arrayify(rawPayload),\n      gqlTransactionStatus: status as GraphqlTransactionStatus,\n      abiMap,\n      gasPerByte,\n      gasPriceFactor,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId,\n    });\n\n    const output: TransactionResult = {\n      ...transactionSummary,\n    };\n\n    return output;\n  });\n\n  return {\n    transactions,\n    pageInfo,\n  };\n}\n","import { bn } from '@fuel-ts/math';\nimport { TransactionCoder } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { Provider } from '../..';\nimport { deserializeReceipt, type TransactionSummaryJson } from '../utils/serialization';\n\nimport { assembleTransactionSummary } from './assemble-transaction-summary';\n\nexport const assembleTransactionSummaryFromJson = async (opts: {\n  provider: Provider;\n  transactionSummary: TransactionSummaryJson;\n}) => {\n  const { provider, transactionSummary } = opts;\n  const { id, transactionBytes, gasPrice, receipts } = transactionSummary;\n\n  const {\n    consensusParameters: {\n      baseAssetId,\n      txParameters: { maxInputs, maxGasPerTx },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  const deserializedTransactionBytes = arrayify(transactionBytes);\n  const [transaction] = new TransactionCoder().decode(deserializedTransactionBytes, 0);\n\n  return assembleTransactionSummary({\n    id,\n    transaction,\n    transactionBytes: deserializedTransactionBytes,\n    receipts: receipts.map(deserializeReceipt),\n    gasPrice: bn(gasPrice),\n\n    // From chain\n    baseAssetId,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPerByte,\n    gasPriceFactor,\n  });\n};\n","import Provider from '../provider';\nimport { transactionRequestify } from '../transaction-request';\nimport { TransactionResponse } from '../transaction-response';\nimport type { TransactionResponseJson } from '../transaction-response';\n\nimport { serializeProviderCache } from './serialization';\n\n/**\n * NOTE: These helpers are defined here instead of in \"serialization.ts\"\n * to avoid circular dependencies.\n */\n\nexport const serializeTransactionResponseJson = async (\n  response: TransactionResponse\n): Promise<TransactionResponseJson> => {\n  const { id, status, abis, request, provider, gqlTransaction, preConfirmationStatus } = response;\n  return {\n    id,\n    status,\n    abis,\n    requestJson: request ? JSON.stringify(request.toJSON()) : undefined,\n    providerUrl: provider.url,\n    providerCache: await serializeProviderCache(provider),\n    gqlTransaction,\n    preConfirmationStatus,\n  };\n};\n\nexport const deserializeTransactionResponseJson = (json: TransactionResponseJson) => {\n  const {\n    id,\n    abis,\n    status,\n    providerUrl,\n    requestJson,\n    providerCache,\n    gqlTransaction,\n    preConfirmationStatus,\n  } = json;\n\n  const provider = new Provider(providerUrl, { cache: providerCache });\n  const { chainId } = providerCache.chain.consensusParameters;\n\n  const response = new TransactionResponse(id, provider, Number(chainId), abis);\n\n  if (requestJson) {\n    response.request = transactionRequestify(JSON.parse(requestJson));\n  }\n\n  response.status = status;\n  response.gqlTransaction = gqlTransaction;\n  response.preConfirmationStatus = preConfirmationStatus;\n\n  return response;\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Address } from '@fuel-ts/address';\n\nexport abstract class AbstractAccount {\n  abstract address: Address;\n  abstract provider: unknown;\n  abstract getResourcesToSpend(quantities: any[], options?: any): any;\n  abstract sendTransaction(transactionRequest: any, options?: any): any;\n  abstract simulateTransaction(transactionRequest: any, options?: any): any;\n  abstract getTransactionCost(transactionRequest: any, options?: any): Promise<any>;\n  abstract fund(transactionRequest: any, txCost: any): Promise<any>;\n}\n","import { ASSET_ID_LEN, BigNumberCoder, CONTRACT_ID_LEN, WORD_SIZE } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport type { BN } from '@fuel-ts/math';\nimport { arrayify, concat } from '@fuel-ts/utils';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\ninterface AssembleTransferToContractParams {\n  contractId: string;\n  assetId: BytesLike;\n  amount: BN;\n}\n\nexport const formatTransferToContractScriptData = (\n  transferParams: Array<AssembleTransferToContractParams>\n) => {\n  const numberCoder = new BigNumberCoder('u64');\n  return transferParams.reduce((acc, transferParam) => {\n    const { assetId, amount, contractId } = transferParam;\n    const encoded = numberCoder.encode(amount);\n    const scriptData = concat([new Address(contractId).toBytes(), encoded, arrayify(assetId)]);\n    return concat([acc, scriptData]);\n  }, new Uint8Array());\n};\n\nexport const assembleTransferToContractScript = async (\n  transferParams: Array<AssembleTransferToContractParams>\n) => {\n  const scriptData = formatTransferToContractScriptData(transferParams);\n\n  // @ts-expect-error method reference missing in DTS\n  await asm.initWasm();\n\n  let script = new Uint8Array();\n\n  transferParams.forEach((_, i) => {\n    const offset = (CONTRACT_ID_LEN + WORD_SIZE + ASSET_ID_LEN) * i;\n\n    script = concat([\n      script,\n      // Load ScriptData into register 0x10.\n      asm.gtf(0x10, 0x0, asm.GTFArgs.ScriptData).to_bytes(),\n      // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.\n      asm.addi(0x11, 0x10, offset).to_bytes(),\n      // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.\n      asm.addi(0x12, 0x11, CONTRACT_ID_LEN).to_bytes(),\n      // Load word to the amount at 0x12 into register 0x13.\n      asm.lw(0x13, 0x12, 0x0).to_bytes(),\n      // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.\n      asm.addi(0x14, 0x12, WORD_SIZE).to_bytes(),\n      // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.\n      asm.tr(0x11, 0x13, 0x14).to_bytes(),\n    ]);\n  });\n\n  // Add return instruction at the end of the script\n  script = concat([script, asm.ret(0x1).to_bytes()]);\n\n  return { script, scriptData };\n};\n","import type { Coin } from '../providers';\n\nexport const splitCoinsIntoBatches = (coins: Coin[], maxBatchLength: number) => {\n  const batchesNum = Math.ceil(coins.length / maxBatchLength);\n  const batches: Coin[][] = [];\n\n  for (let i = 0; i < batchesNum; i += 1) {\n    const batchStart = i * maxBatchLength;\n    const batchEnd = (i + 1) * maxBatchLength;\n    batches.push(coins.slice(batchStart, batchEnd));\n  }\n\n  return batches;\n};\n","import type { HashableMessage } from '@fuel-ts/hasher';\nimport { hashMessage } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport { Account } from '../account';\nimport { transactionRequestify, validateTransactionForAssetBurn } from '../providers';\nimport type {\n  TransactionRequestLike,\n  CallResult,\n  Provider,\n  ProviderSendTxParams,\n  EstimateTransactionParams,\n  TransactionRequest,\n  TransactionResponse,\n} from '../providers';\nimport { Signer } from '../signer';\n\nimport { encryptKeystoreWallet } from './keystore-wallet';\n\n/**\n * `BaseWalletUnlocked` provides the base functionalities for an unlocked wallet.\n */\nexport class BaseWalletUnlocked extends Account {\n  /**\n   * Default HDWallet path.\n   */\n  static defaultPath = \"m/44'/1179993420'/0'/0/0\";\n\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer: () => Signer;\n\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   */\n  constructor(privateKey: BytesLike, provider?: Provider) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n  }\n\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey(): string {\n    return this.signer().privateKey;\n  }\n\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey(): string {\n    return this.signer().publicKey;\n  }\n\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  override async signMessage(message: HashableMessage): Promise<string> {\n    const signedMessage = await this.signer().sign(hashMessage(message));\n    return hexlify(signedMessage);\n  }\n\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  override async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = await this.provider.getChainId();\n    const hashedTransaction = transactionRequest.getTransactionId(chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n    return hexlify(signature);\n  }\n\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature<T extends TransactionRequest>(\n    transactionRequestLike: TransactionRequestLike\n  ) {\n    const transactionRequest = transactionRequestify(transactionRequestLike) as T;\n    const signedTransaction = await this.signTransaction(transactionRequest);\n\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n\n    return transactionRequest;\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @param estimateTxDependencies - Whether to estimate the transaction dependencies.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  override async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = false, enableAssetBurn }: ProviderSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.provider.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      { estimateTxDependencies: false, enableAssetBurn }\n    );\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  override async simulateTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.dryRun(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n        estimateTxDependencies: false,\n      }\n    );\n  }\n\n  /**\n   * Encrypts an unlocked wallet with a password.\n   *\n   * @param password - the password to encrypt the wallet with.\n   * @returns - the encrypted wallet.\n   */\n  async encrypt(password: string): Promise<string> {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n}\n","import { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { hash } from '@fuel-ts/hasher';\nimport { toBytes } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify, concat, arrayify } from '@fuel-ts/utils';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\nexport class Signer {\n  readonly address: Address;\n\n  readonly publicKey: string;\n\n  readonly compressedPublicKey: string;\n\n  readonly privateKey: string;\n\n  /**\n   * Create a Signer instance from a given private key\n   *\n   * @param privateKey - The private key to use for signing\n   * @returns A new Signer instance\n   */\n  constructor(privateKey: BytesLike) {\n    // A lot of common tools do not prefix private keys with a 0x\n    if (typeof privateKey === 'string') {\n      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        // eslint-disable-next-line no-param-reassign\n        privateKey = `0x${privateKey}`;\n      }\n    }\n    // Convert to byte array, normalize private key input allowing it to be BytesLike\n    // like remove 0x prefix and accept array of bytes\n    const privateKeyBytes = toBytes(privateKey, 32);\n\n    this.privateKey = hexlify(privateKeyBytes);\n\n    // Slice(1) removes the encoding scheme from the public key\n    this.publicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, false).slice(1));\n    this.compressedPublicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, true));\n    this.address = new Address(this.publicKey);\n  }\n\n  /**\n   * Sign data using the Signer instance\n   *\n   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.\n   * @ignore\n   * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)\n   *\n   * @param data - The data to be sign\n   * @returns hashed signature\n   */\n  sign(data: BytesLike) {\n    const signature = secp256k1.sign(arrayify(data), arrayify(this.privateKey));\n\n    const r = toBytes(`0x${signature.r.toString(16)}`, 32);\n    const s = toBytes(`0x${signature.s.toString(16)}`, 32);\n\n    // add recoveryParam to first s byte\n    s[0] |= (signature.recovery || 0) << 7;\n\n    return hexlify(concat([r, s]));\n  }\n\n  /**\n   * Add point on the current elliptic curve\n   *\n   * @param point - Point to add on the curve\n   * @returns compressed point on the curve\n   */\n  addPoint(point: BytesLike) {\n    const p0 = secp256k1.ProjectivePoint.fromHex(arrayify(this.compressedPublicKey));\n    const p1 = secp256k1.ProjectivePoint.fromHex(arrayify(point));\n    const result = p0.add(p1);\n    return `0x${result.toHex(true)}`;\n  }\n\n  /**\n   * Recover the public key from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - hashed signature\n   * @returns public key from signature from the\n   */\n  static recoverPublicKey(data: BytesLike, signature: BytesLike): string {\n    const signedMessageBytes = arrayify(signature);\n    const r = signedMessageBytes.slice(0, 32);\n    const s = signedMessageBytes.slice(32, 64);\n    const recoveryParam = (s[0] & 0x80) >> 7;\n\n    // remove recoveryParam from s first byte\n    s[0] &= 0x7f;\n\n    const sig = new secp256k1.Signature(BigInt(hexlify(r)), BigInt(hexlify(s))).addRecoveryBit(\n      recoveryParam\n    );\n\n    const publicKey = sig.recoverPublicKey(arrayify(data)).toRawBytes(false).slice(1);\n    return hexlify(publicKey);\n  }\n\n  /**\n   * Recover the address from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - Signature\n   * @returns Address from signature\n   */\n  static recoverAddress(data: BytesLike, signature: BytesLike): Address {\n    return new Address(Signer.recoverPublicKey(data, signature));\n  }\n\n  /**\n   * Generate a random privateKey\n   *\n   * @param entropy - Adds extra entropy to generate the privateKey\n   * @returns random 32-byte hashed\n   */\n  static generatePrivateKey(entropy?: BytesLike) {\n    return entropy ? hash(concat([randomBytes(32), arrayify(entropy)])) : randomBytes(32);\n  }\n\n  /**\n   * Extended publicKey from a compact publicKey\n   *\n   * @param publicKey - Compact publicKey\n   * @returns extended publicKey\n   */\n  static extendPublicKey(publicKey: BytesLike) {\n    const point = secp256k1.ProjectivePoint.fromHex(arrayify(publicKey));\n    return hexlify(point.toRawBytes(false).slice(1));\n  }\n}\n","import type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport {\n  bufferFromString,\n  keccak256,\n  randomBytes,\n  scrypt,\n  stringFromBuffer,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  randomUUID,\n} from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type KeystoreWallet = {\n  id: string;\n  version: number;\n  address: string;\n  crypto: KeystoreCrypto;\n};\n\ntype KeystoreCrypto = {\n  cipher: 'aes-128-ctr';\n  cipherparams: { iv: string };\n  ciphertext: string;\n  kdf: 'scrypt';\n  mac: string;\n  kdfparams: KDFParams;\n};\n\ntype KDFParams = {\n  dklen: number;\n  n: number;\n  p: number;\n  r: number;\n  salt: string;\n};\n\n// Same values used in the Rust SDK\nexport const DEFAULT_KDF_PARAMS_LOG_N = 13;\nexport const DEFAULT_KDF_PARAMS_R = 8;\nexport const DEFAULT_KDF_PARAMS_P = 1;\nexport const DEFAULT_KEY_SIZE = 32;\nexport const DEFAULT_IV_SIZE = 16;\n\n/**\n * Removes the '0x' prefix from a hexadecimal string.\n * If the prefix does not exist, it returns the original string.\n */\nexport const removeHexPrefix = (hexString: string) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n\n  return hexString;\n};\n\nexport async function encryptKeystoreWallet(\n  privateKey: string,\n  address: AddressInput,\n  password: string\n): Promise<string> {\n  // Convert the hexlified private key string to a Buffer.\n  const privateKeyBuffer = bufferFromString(removeHexPrefix(privateKey), 'hex');\n  const ownerAddress = new Address(address);\n  // Generate a random salt.\n  const salt = randomBytes(DEFAULT_KEY_SIZE);\n\n  const key = scrypt({\n    password: bufferFromString(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P,\n  });\n\n  // Encrypt the private key using AES-128-CTR.\n  const iv = randomBytes(DEFAULT_IV_SIZE);\n\n  const ciphertext = await encryptJsonWalletData(privateKeyBuffer, key, iv);\n\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n\n  // Calculate the MAC.\n  const macHashUint8Array = keccak256(data);\n\n  const mac = stringFromBuffer(macHashUint8Array, 'hex');\n\n  // Construct keystore.\n  const keystore: KeystoreWallet = {\n    id: randomUUID(),\n    version: 3,\n    address: removeHexPrefix(ownerAddress.toHexString()),\n    crypto: {\n      cipher: 'aes-128-ctr',\n      mac,\n      cipherparams: { iv: stringFromBuffer(iv, 'hex') },\n      ciphertext: stringFromBuffer(ciphertext, 'hex'),\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: stringFromBuffer(salt, 'hex'),\n      },\n    },\n  };\n\n  return JSON.stringify(keystore);\n}\n\nexport async function decryptKeystoreWallet(jsonWallet: string, password: string): Promise<string> {\n  const keystoreWallet = JSON.parse(jsonWallet) as KeystoreWallet;\n\n  // Extract the parameters needed for decryption.\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt },\n    },\n  } = keystoreWallet;\n\n  const ciphertextBuffer = bufferFromString(ciphertext, 'hex');\n  const ivBuffer = bufferFromString(iv, 'hex');\n  const saltBuffer = bufferFromString(salt, 'hex');\n\n  const passwordBuffer = bufferFromString(password);\n\n  const key = scrypt({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen,\n  });\n\n  // Verify the MAC. It should be the Keccak-256 hash of the concatenation of the second half of the derived key and the ciphertext.\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n\n  const macHashUint8Array = keccak256(data);\n\n  const macHash = stringFromBuffer(macHashUint8Array, 'hex');\n\n  if (mac !== macHash) {\n    throw new FuelError(\n      ErrorCode.INVALID_PASSWORD,\n      'Failed to decrypt the keystore wallet, the provided password is incorrect.'\n    );\n  }\n\n  // Decrypt the private key.\n  const buffer = await decryptJsonWalletData(ciphertextBuffer, key, ivBuffer);\n\n  const privateKey = hexlify(buffer);\n\n  return privateKey;\n}\n","import { computeHmac, ripemd160 } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport { bn, toBytes, toHex } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, concat, dataSlice, encodeBase58, decodeBase58 } from '@fuel-ts/utils';\n\nimport { Mnemonic } from '../mnemonic';\nimport { Signer } from '../signer';\n\n// \"Bitcoin seed\"\nconst HARDENED_INDEX = 0x80000000;\n\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = hexlify('0x0488ade4');\nconst MainnetPUB = hexlify('0x0488b21e');\nconst TestnetPRV = hexlify('0x04358394');\nconst TestnetPUB = hexlify('0x043587cf');\n\nfunction base58check(data: Uint8Array): string {\n  return encodeBase58(concat([data, dataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getExtendedKeyPrefix(isPublic: boolean = false, testnet: boolean = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV : MainnetPRV;\n}\n\nfunction isPublicExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));\n}\n\nfunction isValidExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPRV, TestnetPRV, MainnetPUB, TestnetPUB].includes(\n    hexlify(extendedKey.slice(0, 4))\n  );\n}\n\nfunction parsePath(path: string, depth: number = 0) {\n  const components = path.split('/');\n\n  if (components.length === 0 || (components[0] === 'm' && depth !== 0)) {\n    throw new FuelError(ErrorCode.HD_WALLET_ERROR, `invalid path - ${path}`);\n  }\n\n  if (components[0] === 'm') {\n    components.shift();\n  }\n\n  return components.map((p) =>\n    ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\n\ntype HDWalletConfig = {\n  privateKey?: BytesLike;\n  publicKey?: BytesLike;\n  chainCode: BytesLike;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: string;\n};\n\nclass HDWallet {\n  depth: number = 0;\n  index: number = 0;\n  fingerprint: string = hexlify('0x00000000');\n  parentFingerprint: string = hexlify('0x00000000');\n  privateKey?: string;\n  publicKey: string;\n  chainCode: BytesLike;\n\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config: HDWalletConfig) {\n    // TODO: set some asserts here\n\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = hexlify(signer.compressedPublicKey);\n      this.privateKey = hexlify(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new FuelError(\n          ErrorCode.HD_WALLET_ERROR,\n          'Both public and private Key cannot be missing. At least one should be provided.'\n        );\n      }\n      this.publicKey = hexlify(config.publicKey);\n    }\n\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index: number) {\n    const privateKey = this.privateKey && arrayify(this.privateKey);\n    const publicKey = arrayify(this.publicKey);\n    const chainCode = arrayify(this.chainCode);\n    const data = new Uint8Array(37);\n\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new FuelError(\n          ErrorCode.HD_WALLET_ERROR,\n          'Cannot derive a hardened index without a private Key.'\n        );\n      }\n\n      // 33 bytes: 0x00 || private key\n      data.set(privateKey, 1);\n    } else {\n      data.set(arrayify(this.publicKey));\n    }\n\n    // child number: ser32(i)\n    data.set(toBytes(index, 4), 33);\n\n    const bytes = arrayify(computeHmac('sha512', chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n\n    if (privateKey) {\n      const N = '0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141';\n      // Child key ki is parse256(IL) + kpar (mod n).\n      const ki = bn(IL).add(privateKey).mod(N).toBytes(32);\n\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint,\n      });\n    }\n\n    const signer = new Signer(hexlify(IL));\n    const Ki = signer.addPoint(publicKey);\n\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n    });\n  }\n\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path: string) {\n    const paths = parsePath(path, this.depth);\n\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), <HDWallet>this);\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic: boolean = false, testnet: boolean = false): string {\n    if (this.depth >= 256) {\n      throw new FuelError(\n        ErrorCode.HD_WALLET_ERROR,\n        `Exceeded max depth of 255. Current depth: ${this.depth}.`\n      );\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = hexlify(Uint8Array.from([this.depth]));\n    const parentFingerprint = this.parentFingerprint;\n    const index = toHex(this.index, 4);\n    // last 32 bites from the key\n    const chainCode = this.chainCode;\n    // first 32 bites from the key\n    const key =\n      this.privateKey != null && !isPublic ? concat(['0x00', this.privateKey]) : this.publicKey;\n    const extendedKey = arrayify(concat([prefix, depth, parentFingerprint, index, chainCode, key]));\n\n    return base58check(extendedKey);\n  }\n\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed: string) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n\n    return new HDWallet({\n      chainCode: arrayify(masterKey.slice(32)),\n      privateKey: arrayify(masterKey.slice(0, 32)),\n    });\n  }\n\n  static fromExtendedKey(extendedKey: string) {\n    const decoded = hexlify(toBytes(decodeBase58(extendedKey)));\n    const bytes = arrayify(decoded);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Provided key is not a valid extended key.');\n    }\n    if (!validChecksum) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Provided key has an invalid checksum.');\n    }\n\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n\n    if ((depth === 0 && parentFingerprint !== '0x00000000') || (depth === 0 && index !== 0)) {\n      throw new FuelError(\n        ErrorCode.HD_WALLET_ERROR,\n        'Inconsistency detected: Depth is zero but fingerprint/index is non-zero.'\n      );\n    }\n\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Invalid public extended key.');\n      }\n\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint,\n      });\n    }\n\n    if (key[0] !== 0) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Invalid private extended key.');\n    }\n\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint,\n    });\n  }\n}\n\nexport default HDWallet;\n","import { randomBytes, pbkdf2, computeHmac } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, concat, dataSlice, encodeBase58, toUtf8Bytes } from '@fuel-ts/utils';\n\nimport { english } from '../wordlists';\n\nimport type { MnemonicPhrase } from './utils';\nimport { entropyToMnemonicIndices, getWords, getPhrase, mnemonicWordsToEntropy } from './utils';\n\n//\n// Constants\n//\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes('Bitcoin seed');\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = '0x0488ade4';\nconst TestnetPRV = '0x04358394';\nexport const MNEMONIC_SIZES = [12, 15, 18, 21, 24];\n\nfunction assertWordList(wordlist: Array<string>) {\n  if (wordlist.length !== 2048) {\n    throw new FuelError(\n      ErrorCode.INVALID_WORD_LIST,\n      `Expected word list length of 2048, but got ${wordlist.length}.`\n    );\n  }\n}\n\nfunction assertEntropy(entropy: BytesLike) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new FuelError(\n      ErrorCode.INVALID_ENTROPY,\n      `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`\n    );\n  }\n}\n\nfunction assertMnemonic(words: Array<string>) {\n  if (!MNEMONIC_SIZES.includes(words.length)) {\n    const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(\n      ', '\n    )}] words, but got ${words.length}.`;\n\n    throw new FuelError(ErrorCode.INVALID_MNEMONIC, errorMsg);\n  }\n}\n\nclass Mnemonic {\n  wordlist: Array<string>;\n\n  /**\n   *\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic instance\n   */\n  constructor(wordlist: Array<string> = english) {\n    this.wordlist = wordlist;\n\n    assertWordList(this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns Entropy hash\n   */\n  mnemonicToEntropy(phrase: MnemonicPhrase) {\n    return Mnemonic.mnemonicToEntropy(phrase, this.wordlist);\n  }\n\n  /**\n   *\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @returns Mnemonic phrase\n   */\n  entropyToMnemonic(entropy: BytesLike) {\n    return Mnemonic.entropyToMnemonic(entropy, this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic phrase\n   */\n  static mnemonicToEntropy(phrase: MnemonicPhrase, wordlist: Array<string> = english): string {\n    const words = getWords(phrase);\n\n    assertMnemonic(words);\n\n    return hexlify(mnemonicWordsToEntropy(words, wordlist));\n  }\n\n  /**\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static entropyToMnemonic(entropy: BytesLike, wordlist: Array<string> = english): string {\n    const entropyBytes = arrayify(entropy);\n\n    assertWordList(wordlist);\n    assertEntropy(entropyBytes);\n\n    return entropyToMnemonicIndices(entropyBytes)\n      .map((i) => wordlist[i])\n      .join(' ');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToSeed(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    assertMnemonic(getWords(phrase));\n\n    const phraseBytes = toUtf8Bytes(getPhrase(phrase));\n    const salt = toUtf8Bytes(`mnemonic${passphrase}`);\n\n    return pbkdf2(phraseBytes, salt, 2048, 64, 'sha512');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToMasterKeys(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    const seed = Mnemonic.mnemonicToSeed(phrase, passphrase);\n    return Mnemonic.masterKeysFromSeed(seed);\n  }\n\n  /**\n   * Validates if given mnemonic is  valid\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns true if phrase is a valid mnemonic\n   */\n  static isMnemonicValid(phrase: string) {\n    const words = getWords(phrase);\n\n    let i: number = 0;\n\n    try {\n      assertMnemonic(words);\n    } catch {\n      return false;\n    }\n\n    while (i < words.length) {\n      if (Mnemonic.binarySearch(words[i]) === false) {\n        return false;\n      }\n      i += 1;\n    }\n\n    return true;\n  }\n\n  static binarySearch(target: string): boolean {\n    const words = english;\n    let left: number = 0;\n    let right: number = words.length - 1;\n\n    while (left <= right) {\n      const mid: number = Math.floor((left + right) / 2);\n\n      if (words[mid] === target) {\n        return true;\n      }\n      if (target < words[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static masterKeysFromSeed(seed: string): Uint8Array {\n    const seedArray = arrayify(seed);\n\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new FuelError(\n        ErrorCode.INVALID_SEED,\n        `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`\n      );\n    }\n\n    return arrayify(computeHmac('sha512', MasterSecret, seedArray));\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  static seedToExtendedKey(seed: string, testnet: boolean = false): string {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n    const prefix = arrayify(testnet ? TestnetPRV : MainnetPRV);\n    const depth = '0x00';\n    const fingerprint = '0x00000000';\n    const index = '0x00000000';\n    // last 32 bites from the key\n    const chainCode = masterKey.slice(32);\n    // first 32 bites from the key\n    const privateKey = masterKey.slice(0, 32);\n    const extendedKey = concat([\n      prefix,\n      depth,\n      fingerprint,\n      index,\n      chainCode,\n      concat(['0x00', privateKey]),\n    ]);\n    const checksum = dataSlice(sha256(sha256(extendedKey)), 0, 4);\n\n    return encodeBase58(concat([extendedKey, checksum]));\n  }\n\n  /**\n   *  Create a new mnemonic using a randomly generated number as entropy.\n   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.\n   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.\n   *  If not provided, the default entropy length will be set to 256 bits.\n   *  The return is a list of words that encodes the generated entropy.\n   *\n   *\n   * @param size - Number of bytes used as an entropy\n   * @param extraEntropy - Optional extra entropy to increase randomness\n   * @returns A randomly generated mnemonic\n   */\n  static generate(size: number = 32, extraEntropy: BytesLike = '') {\n    const entropy = extraEntropy\n      ? sha256(concat([randomBytes(size), arrayify(extraEntropy)]))\n      : randomBytes(size);\n    return Mnemonic.entropyToMnemonic(entropy);\n  }\n}\n\nexport default Mnemonic;\n","export const english = [\n  'abandon',\n  'ability',\n  'able',\n  'about',\n  'above',\n  'absent',\n  'absorb',\n  'abstract',\n  'absurd',\n  'abuse',\n  'access',\n  'accident',\n  'account',\n  'accuse',\n  'achieve',\n  'acid',\n  'acoustic',\n  'acquire',\n  'across',\n  'act',\n  'action',\n  'actor',\n  'actress',\n  'actual',\n  'adapt',\n  'add',\n  'addict',\n  'address',\n  'adjust',\n  'admit',\n  'adult',\n  'advance',\n  'advice',\n  'aerobic',\n  'affair',\n  'afford',\n  'afraid',\n  'again',\n  'age',\n  'agent',\n  'agree',\n  'ahead',\n  'aim',\n  'air',\n  'airport',\n  'aisle',\n  'alarm',\n  'album',\n  'alcohol',\n  'alert',\n  'alien',\n  'all',\n  'alley',\n  'allow',\n  'almost',\n  'alone',\n  'alpha',\n  'already',\n  'also',\n  'alter',\n  'always',\n  'amateur',\n  'amazing',\n  'among',\n  'amount',\n  'amused',\n  'analyst',\n  'anchor',\n  'ancient',\n  'anger',\n  'angle',\n  'angry',\n  'animal',\n  'ankle',\n  'announce',\n  'annual',\n  'another',\n  'answer',\n  'antenna',\n  'antique',\n  'anxiety',\n  'any',\n  'apart',\n  'apology',\n  'appear',\n  'apple',\n  'approve',\n  'april',\n  'arch',\n  'arctic',\n  'area',\n  'arena',\n  'argue',\n  'arm',\n  'armed',\n  'armor',\n  'army',\n  'around',\n  'arrange',\n  'arrest',\n  'arrive',\n  'arrow',\n  'art',\n  'artefact',\n  'artist',\n  'artwork',\n  'ask',\n  'aspect',\n  'assault',\n  'asset',\n  'assist',\n  'assume',\n  'asthma',\n  'athlete',\n  'atom',\n  'attack',\n  'attend',\n  'attitude',\n  'attract',\n  'auction',\n  'audit',\n  'august',\n  'aunt',\n  'author',\n  'auto',\n  'autumn',\n  'average',\n  'avocado',\n  'avoid',\n  'awake',\n  'aware',\n  'away',\n  'awesome',\n  'awful',\n  'awkward',\n  'axis',\n  'baby',\n  'bachelor',\n  'bacon',\n  'badge',\n  'bag',\n  'balance',\n  'balcony',\n  'ball',\n  'bamboo',\n  'banana',\n  'banner',\n  'bar',\n  'barely',\n  'bargain',\n  'barrel',\n  'base',\n  'basic',\n  'basket',\n  'battle',\n  'beach',\n  'bean',\n  'beauty',\n  'because',\n  'become',\n  'beef',\n  'before',\n  'begin',\n  'behave',\n  'behind',\n  'believe',\n  'below',\n  'belt',\n  'bench',\n  'benefit',\n  'best',\n  'betray',\n  'better',\n  'between',\n  'beyond',\n  'bicycle',\n  'bid',\n  'bike',\n  'bind',\n  'biology',\n  'bird',\n  'birth',\n  'bitter',\n  'black',\n  'blade',\n  'blame',\n  'blanket',\n  'blast',\n  'bleak',\n  'bless',\n  'blind',\n  'blood',\n  'blossom',\n  'blouse',\n  'blue',\n  'blur',\n  'blush',\n  'board',\n  'boat',\n  'body',\n  'boil',\n  'bomb',\n  'bone',\n  'bonus',\n  'book',\n  'boost',\n  'border',\n  'boring',\n  'borrow',\n  'boss',\n  'bottom',\n  'bounce',\n  'box',\n  'boy',\n  'bracket',\n  'brain',\n  'brand',\n  'brass',\n  'brave',\n  'bread',\n  'breeze',\n  'brick',\n  'bridge',\n  'brief',\n  'bright',\n  'bring',\n  'brisk',\n  'broccoli',\n  'broken',\n  'bronze',\n  'broom',\n  'brother',\n  'brown',\n  'brush',\n  'bubble',\n  'buddy',\n  'budget',\n  'buffalo',\n  'build',\n  'bulb',\n  'bulk',\n  'bullet',\n  'bundle',\n  'bunker',\n  'burden',\n  'burger',\n  'burst',\n  'bus',\n  'business',\n  'busy',\n  'butter',\n  'buyer',\n  'buzz',\n  'cabbage',\n  'cabin',\n  'cable',\n  'cactus',\n  'cage',\n  'cake',\n  'call',\n  'calm',\n  'camera',\n  'camp',\n  'can',\n  'canal',\n  'cancel',\n  'candy',\n  'cannon',\n  'canoe',\n  'canvas',\n  'canyon',\n  'capable',\n  'capital',\n  'captain',\n  'car',\n  'carbon',\n  'card',\n  'cargo',\n  'carpet',\n  'carry',\n  'cart',\n  'case',\n  'cash',\n  'casino',\n  'castle',\n  'casual',\n  'cat',\n  'catalog',\n  'catch',\n  'category',\n  'cattle',\n  'caught',\n  'cause',\n  'caution',\n  'cave',\n  'ceiling',\n  'celery',\n  'cement',\n  'census',\n  'century',\n  'cereal',\n  'certain',\n  'chair',\n  'chalk',\n  'champion',\n  'change',\n  'chaos',\n  'chapter',\n  'charge',\n  'chase',\n  'chat',\n  'cheap',\n  'check',\n  'cheese',\n  'chef',\n  'cherry',\n  'chest',\n  'chicken',\n  'chief',\n  'child',\n  'chimney',\n  'choice',\n  'choose',\n  'chronic',\n  'chuckle',\n  'chunk',\n  'churn',\n  'cigar',\n  'cinnamon',\n  'circle',\n  'citizen',\n  'city',\n  'civil',\n  'claim',\n  'clap',\n  'clarify',\n  'claw',\n  'clay',\n  'clean',\n  'clerk',\n  'clever',\n  'click',\n  'client',\n  'cliff',\n  'climb',\n  'clinic',\n  'clip',\n  'clock',\n  'clog',\n  'close',\n  'cloth',\n  'cloud',\n  'clown',\n  'club',\n  'clump',\n  'cluster',\n  'clutch',\n  'coach',\n  'coast',\n  'coconut',\n  'code',\n  'coffee',\n  'coil',\n  'coin',\n  'collect',\n  'color',\n  'column',\n  'combine',\n  'come',\n  'comfort',\n  'comic',\n  'common',\n  'company',\n  'concert',\n  'conduct',\n  'confirm',\n  'congress',\n  'connect',\n  'consider',\n  'control',\n  'convince',\n  'cook',\n  'cool',\n  'copper',\n  'copy',\n  'coral',\n  'core',\n  'corn',\n  'correct',\n  'cost',\n  'cotton',\n  'couch',\n  'country',\n  'couple',\n  'course',\n  'cousin',\n  'cover',\n  'coyote',\n  'crack',\n  'cradle',\n  'craft',\n  'cram',\n  'crane',\n  'crash',\n  'crater',\n  'crawl',\n  'crazy',\n  'cream',\n  'credit',\n  'creek',\n  'crew',\n  'cricket',\n  'crime',\n  'crisp',\n  'critic',\n  'crop',\n  'cross',\n  'crouch',\n  'crowd',\n  'crucial',\n  'cruel',\n  'cruise',\n  'crumble',\n  'crunch',\n  'crush',\n  'cry',\n  'crystal',\n  'cube',\n  'culture',\n  'cup',\n  'cupboard',\n  'curious',\n  'current',\n  'curtain',\n  'curve',\n  'cushion',\n  'custom',\n  'cute',\n  'cycle',\n  'dad',\n  'damage',\n  'damp',\n  'dance',\n  'danger',\n  'daring',\n  'dash',\n  'daughter',\n  'dawn',\n  'day',\n  'deal',\n  'debate',\n  'debris',\n  'decade',\n  'december',\n  'decide',\n  'decline',\n  'decorate',\n  'decrease',\n  'deer',\n  'defense',\n  'define',\n  'defy',\n  'degree',\n  'delay',\n  'deliver',\n  'demand',\n  'demise',\n  'denial',\n  'dentist',\n  'deny',\n  'depart',\n  'depend',\n  'deposit',\n  'depth',\n  'deputy',\n  'derive',\n  'describe',\n  'desert',\n  'design',\n  'desk',\n  'despair',\n  'destroy',\n  'detail',\n  'detect',\n  'develop',\n  'device',\n  'devote',\n  'diagram',\n  'dial',\n  'diamond',\n  'diary',\n  'dice',\n  'diesel',\n  'diet',\n  'differ',\n  'digital',\n  'dignity',\n  'dilemma',\n  'dinner',\n  'dinosaur',\n  'direct',\n  'dirt',\n  'disagree',\n  'discover',\n  'disease',\n  'dish',\n  'dismiss',\n  'disorder',\n  'display',\n  'distance',\n  'divert',\n  'divide',\n  'divorce',\n  'dizzy',\n  'doctor',\n  'document',\n  'dog',\n  'doll',\n  'dolphin',\n  'domain',\n  'donate',\n  'donkey',\n  'donor',\n  'door',\n  'dose',\n  'double',\n  'dove',\n  'draft',\n  'dragon',\n  'drama',\n  'drastic',\n  'draw',\n  'dream',\n  'dress',\n  'drift',\n  'drill',\n  'drink',\n  'drip',\n  'drive',\n  'drop',\n  'drum',\n  'dry',\n  'duck',\n  'dumb',\n  'dune',\n  'during',\n  'dust',\n  'dutch',\n  'duty',\n  'dwarf',\n  'dynamic',\n  'eager',\n  'eagle',\n  'early',\n  'earn',\n  'earth',\n  'easily',\n  'east',\n  'easy',\n  'echo',\n  'ecology',\n  'economy',\n  'edge',\n  'edit',\n  'educate',\n  'effort',\n  'egg',\n  'eight',\n  'either',\n  'elbow',\n  'elder',\n  'electric',\n  'elegant',\n  'element',\n  'elephant',\n  'elevator',\n  'elite',\n  'else',\n  'embark',\n  'embody',\n  'embrace',\n  'emerge',\n  'emotion',\n  'employ',\n  'empower',\n  'empty',\n  'enable',\n  'enact',\n  'end',\n  'endless',\n  'endorse',\n  'enemy',\n  'energy',\n  'enforce',\n  'engage',\n  'engine',\n  'enhance',\n  'enjoy',\n  'enlist',\n  'enough',\n  'enrich',\n  'enroll',\n  'ensure',\n  'enter',\n  'entire',\n  'entry',\n  'envelope',\n  'episode',\n  'equal',\n  'equip',\n  'era',\n  'erase',\n  'erode',\n  'erosion',\n  'error',\n  'erupt',\n  'escape',\n  'essay',\n  'essence',\n  'estate',\n  'eternal',\n  'ethics',\n  'evidence',\n  'evil',\n  'evoke',\n  'evolve',\n  'exact',\n  'example',\n  'excess',\n  'exchange',\n  'excite',\n  'exclude',\n  'excuse',\n  'execute',\n  'exercise',\n  'exhaust',\n  'exhibit',\n  'exile',\n  'exist',\n  'exit',\n  'exotic',\n  'expand',\n  'expect',\n  'expire',\n  'explain',\n  'expose',\n  'express',\n  'extend',\n  'extra',\n  'eye',\n  'eyebrow',\n  'fabric',\n  'face',\n  'faculty',\n  'fade',\n  'faint',\n  'faith',\n  'fall',\n  'false',\n  'fame',\n  'family',\n  'famous',\n  'fan',\n  'fancy',\n  'fantasy',\n  'farm',\n  'fashion',\n  'fat',\n  'fatal',\n  'father',\n  'fatigue',\n  'fault',\n  'favorite',\n  'feature',\n  'february',\n  'federal',\n  'fee',\n  'feed',\n  'feel',\n  'female',\n  'fence',\n  'festival',\n  'fetch',\n  'fever',\n  'few',\n  'fiber',\n  'fiction',\n  'field',\n  'figure',\n  'file',\n  'film',\n  'filter',\n  'final',\n  'find',\n  'fine',\n  'finger',\n  'finish',\n  'fire',\n  'firm',\n  'first',\n  'fiscal',\n  'fish',\n  'fit',\n  'fitness',\n  'fix',\n  'flag',\n  'flame',\n  'flash',\n  'flat',\n  'flavor',\n  'flee',\n  'flight',\n  'flip',\n  'float',\n  'flock',\n  'floor',\n  'flower',\n  'fluid',\n  'flush',\n  'fly',\n  'foam',\n  'focus',\n  'fog',\n  'foil',\n  'fold',\n  'follow',\n  'food',\n  'foot',\n  'force',\n  'forest',\n  'forget',\n  'fork',\n  'fortune',\n  'forum',\n  'forward',\n  'fossil',\n  'foster',\n  'found',\n  'fox',\n  'fragile',\n  'frame',\n  'frequent',\n  'fresh',\n  'friend',\n  'fringe',\n  'frog',\n  'front',\n  'frost',\n  'frown',\n  'frozen',\n  'fruit',\n  'fuel',\n  'fun',\n  'funny',\n  'furnace',\n  'fury',\n  'future',\n  'gadget',\n  'gain',\n  'galaxy',\n  'gallery',\n  'game',\n  'gap',\n  'garage',\n  'garbage',\n  'garden',\n  'garlic',\n  'garment',\n  'gas',\n  'gasp',\n  'gate',\n  'gather',\n  'gauge',\n  'gaze',\n  'general',\n  'genius',\n  'genre',\n  'gentle',\n  'genuine',\n  'gesture',\n  'ghost',\n  'giant',\n  'gift',\n  'giggle',\n  'ginger',\n  'giraffe',\n  'girl',\n  'give',\n  'glad',\n  'glance',\n  'glare',\n  'glass',\n  'glide',\n  'glimpse',\n  'globe',\n  'gloom',\n  'glory',\n  'glove',\n  'glow',\n  'glue',\n  'goat',\n  'goddess',\n  'gold',\n  'good',\n  'goose',\n  'gorilla',\n  'gospel',\n  'gossip',\n  'govern',\n  'gown',\n  'grab',\n  'grace',\n  'grain',\n  'grant',\n  'grape',\n  'grass',\n  'gravity',\n  'great',\n  'green',\n  'grid',\n  'grief',\n  'grit',\n  'grocery',\n  'group',\n  'grow',\n  'grunt',\n  'guard',\n  'guess',\n  'guide',\n  'guilt',\n  'guitar',\n  'gun',\n  'gym',\n  'habit',\n  'hair',\n  'half',\n  'hammer',\n  'hamster',\n  'hand',\n  'happy',\n  'harbor',\n  'hard',\n  'harsh',\n  'harvest',\n  'hat',\n  'have',\n  'hawk',\n  'hazard',\n  'head',\n  'health',\n  'heart',\n  'heavy',\n  'hedgehog',\n  'height',\n  'hello',\n  'helmet',\n  'help',\n  'hen',\n  'hero',\n  'hidden',\n  'high',\n  'hill',\n  'hint',\n  'hip',\n  'hire',\n  'history',\n  'hobby',\n  'hockey',\n  'hold',\n  'hole',\n  'holiday',\n  'hollow',\n  'home',\n  'honey',\n  'hood',\n  'hope',\n  'horn',\n  'horror',\n  'horse',\n  'hospital',\n  'host',\n  'hotel',\n  'hour',\n  'hover',\n  'hub',\n  'huge',\n  'human',\n  'humble',\n  'humor',\n  'hundred',\n  'hungry',\n  'hunt',\n  'hurdle',\n  'hurry',\n  'hurt',\n  'husband',\n  'hybrid',\n  'ice',\n  'icon',\n  'idea',\n  'identify',\n  'idle',\n  'ignore',\n  'ill',\n  'illegal',\n  'illness',\n  'image',\n  'imitate',\n  'immense',\n  'immune',\n  'impact',\n  'impose',\n  'improve',\n  'impulse',\n  'inch',\n  'include',\n  'income',\n  'increase',\n  'index',\n  'indicate',\n  'indoor',\n  'industry',\n  'infant',\n  'inflict',\n  'inform',\n  'inhale',\n  'inherit',\n  'initial',\n  'inject',\n  'injury',\n  'inmate',\n  'inner',\n  'innocent',\n  'input',\n  'inquiry',\n  'insane',\n  'insect',\n  'inside',\n  'inspire',\n  'install',\n  'intact',\n  'interest',\n  'into',\n  'invest',\n  'invite',\n  'involve',\n  'iron',\n  'island',\n  'isolate',\n  'issue',\n  'item',\n  'ivory',\n  'jacket',\n  'jaguar',\n  'jar',\n  'jazz',\n  'jealous',\n  'jeans',\n  'jelly',\n  'jewel',\n  'job',\n  'join',\n  'joke',\n  'journey',\n  'joy',\n  'judge',\n  'juice',\n  'jump',\n  'jungle',\n  'junior',\n  'junk',\n  'just',\n  'kangaroo',\n  'keen',\n  'keep',\n  'ketchup',\n  'key',\n  'kick',\n  'kid',\n  'kidney',\n  'kind',\n  'kingdom',\n  'kiss',\n  'kit',\n  'kitchen',\n  'kite',\n  'kitten',\n  'kiwi',\n  'knee',\n  'knife',\n  'knock',\n  'know',\n  'lab',\n  'label',\n  'labor',\n  'ladder',\n  'lady',\n  'lake',\n  'lamp',\n  'language',\n  'laptop',\n  'large',\n  'later',\n  'latin',\n  'laugh',\n  'laundry',\n  'lava',\n  'law',\n  'lawn',\n  'lawsuit',\n  'layer',\n  'lazy',\n  'leader',\n  'leaf',\n  'learn',\n  'leave',\n  'lecture',\n  'left',\n  'leg',\n  'legal',\n  'legend',\n  'leisure',\n  'lemon',\n  'lend',\n  'length',\n  'lens',\n  'leopard',\n  'lesson',\n  'letter',\n  'level',\n  'liar',\n  'liberty',\n  'library',\n  'license',\n  'life',\n  'lift',\n  'light',\n  'like',\n  'limb',\n  'limit',\n  'link',\n  'lion',\n  'liquid',\n  'list',\n  'little',\n  'live',\n  'lizard',\n  'load',\n  'loan',\n  'lobster',\n  'local',\n  'lock',\n  'logic',\n  'lonely',\n  'long',\n  'loop',\n  'lottery',\n  'loud',\n  'lounge',\n  'love',\n  'loyal',\n  'lucky',\n  'luggage',\n  'lumber',\n  'lunar',\n  'lunch',\n  'luxury',\n  'lyrics',\n  'machine',\n  'mad',\n  'magic',\n  'magnet',\n  'maid',\n  'mail',\n  'main',\n  'major',\n  'make',\n  'mammal',\n  'man',\n  'manage',\n  'mandate',\n  'mango',\n  'mansion',\n  'manual',\n  'maple',\n  'marble',\n  'march',\n  'margin',\n  'marine',\n  'market',\n  'marriage',\n  'mask',\n  'mass',\n  'master',\n  'match',\n  'material',\n  'math',\n  'matrix',\n  'matter',\n  'maximum',\n  'maze',\n  'meadow',\n  'mean',\n  'measure',\n  'meat',\n  'mechanic',\n  'medal',\n  'media',\n  'melody',\n  'melt',\n  'member',\n  'memory',\n  'mention',\n  'menu',\n  'mercy',\n  'merge',\n  'merit',\n  'merry',\n  'mesh',\n  'message',\n  'metal',\n  'method',\n  'middle',\n  'midnight',\n  'milk',\n  'million',\n  'mimic',\n  'mind',\n  'minimum',\n  'minor',\n  'minute',\n  'miracle',\n  'mirror',\n  'misery',\n  'miss',\n  'mistake',\n  'mix',\n  'mixed',\n  'mixture',\n  'mobile',\n  'model',\n  'modify',\n  'mom',\n  'moment',\n  'monitor',\n  'monkey',\n  'monster',\n  'month',\n  'moon',\n  'moral',\n  'more',\n  'morning',\n  'mosquito',\n  'mother',\n  'motion',\n  'motor',\n  'mountain',\n  'mouse',\n  'move',\n  'movie',\n  'much',\n  'muffin',\n  'mule',\n  'multiply',\n  'muscle',\n  'museum',\n  'mushroom',\n  'music',\n  'must',\n  'mutual',\n  'myself',\n  'mystery',\n  'myth',\n  'naive',\n  'name',\n  'napkin',\n  'narrow',\n  'nasty',\n  'nation',\n  'nature',\n  'near',\n  'neck',\n  'need',\n  'negative',\n  'neglect',\n  'neither',\n  'nephew',\n  'nerve',\n  'nest',\n  'net',\n  'network',\n  'neutral',\n  'never',\n  'news',\n  'next',\n  'nice',\n  'night',\n  'noble',\n  'noise',\n  'nominee',\n  'noodle',\n  'normal',\n  'north',\n  'nose',\n  'notable',\n  'note',\n  'nothing',\n  'notice',\n  'novel',\n  'now',\n  'nuclear',\n  'number',\n  'nurse',\n  'nut',\n  'oak',\n  'obey',\n  'object',\n  'oblige',\n  'obscure',\n  'observe',\n  'obtain',\n  'obvious',\n  'occur',\n  'ocean',\n  'october',\n  'odor',\n  'off',\n  'offer',\n  'office',\n  'often',\n  'oil',\n  'okay',\n  'old',\n  'olive',\n  'olympic',\n  'omit',\n  'once',\n  'one',\n  'onion',\n  'online',\n  'only',\n  'open',\n  'opera',\n  'opinion',\n  'oppose',\n  'option',\n  'orange',\n  'orbit',\n  'orchard',\n  'order',\n  'ordinary',\n  'organ',\n  'orient',\n  'original',\n  'orphan',\n  'ostrich',\n  'other',\n  'outdoor',\n  'outer',\n  'output',\n  'outside',\n  'oval',\n  'oven',\n  'over',\n  'own',\n  'owner',\n  'oxygen',\n  'oyster',\n  'ozone',\n  'pact',\n  'paddle',\n  'page',\n  'pair',\n  'palace',\n  'palm',\n  'panda',\n  'panel',\n  'panic',\n  'panther',\n  'paper',\n  'parade',\n  'parent',\n  'park',\n  'parrot',\n  'party',\n  'pass',\n  'patch',\n  'path',\n  'patient',\n  'patrol',\n  'pattern',\n  'pause',\n  'pave',\n  'payment',\n  'peace',\n  'peanut',\n  'pear',\n  'peasant',\n  'pelican',\n  'pen',\n  'penalty',\n  'pencil',\n  'people',\n  'pepper',\n  'perfect',\n  'permit',\n  'person',\n  'pet',\n  'phone',\n  'photo',\n  'phrase',\n  'physical',\n  'piano',\n  'picnic',\n  'picture',\n  'piece',\n  'pig',\n  'pigeon',\n  'pill',\n  'pilot',\n  'pink',\n  'pioneer',\n  'pipe',\n  'pistol',\n  'pitch',\n  'pizza',\n  'place',\n  'planet',\n  'plastic',\n  'plate',\n  'play',\n  'please',\n  'pledge',\n  'pluck',\n  'plug',\n  'plunge',\n  'poem',\n  'poet',\n  'point',\n  'polar',\n  'pole',\n  'police',\n  'pond',\n  'pony',\n  'pool',\n  'popular',\n  'portion',\n  'position',\n  'possible',\n  'post',\n  'potato',\n  'pottery',\n  'poverty',\n  'powder',\n  'power',\n  'practice',\n  'praise',\n  'predict',\n  'prefer',\n  'prepare',\n  'present',\n  'pretty',\n  'prevent',\n  'price',\n  'pride',\n  'primary',\n  'print',\n  'priority',\n  'prison',\n  'private',\n  'prize',\n  'problem',\n  'process',\n  'produce',\n  'profit',\n  'program',\n  'project',\n  'promote',\n  'proof',\n  'property',\n  'prosper',\n  'protect',\n  'proud',\n  'provide',\n  'public',\n  'pudding',\n  'pull',\n  'pulp',\n  'pulse',\n  'pumpkin',\n  'punch',\n  'pupil',\n  'puppy',\n  'purchase',\n  'purity',\n  'purpose',\n  'purse',\n  'push',\n  'put',\n  'puzzle',\n  'pyramid',\n  'quality',\n  'quantum',\n  'quarter',\n  'question',\n  'quick',\n  'quit',\n  'quiz',\n  'quote',\n  'rabbit',\n  'raccoon',\n  'race',\n  'rack',\n  'radar',\n  'radio',\n  'rail',\n  'rain',\n  'raise',\n  'rally',\n  'ramp',\n  'ranch',\n  'random',\n  'range',\n  'rapid',\n  'rare',\n  'rate',\n  'rather',\n  'raven',\n  'raw',\n  'razor',\n  'ready',\n  'real',\n  'reason',\n  'rebel',\n  'rebuild',\n  'recall',\n  'receive',\n  'recipe',\n  'record',\n  'recycle',\n  'reduce',\n  'reflect',\n  'reform',\n  'refuse',\n  'region',\n  'regret',\n  'regular',\n  'reject',\n  'relax',\n  'release',\n  'relief',\n  'rely',\n  'remain',\n  'remember',\n  'remind',\n  'remove',\n  'render',\n  'renew',\n  'rent',\n  'reopen',\n  'repair',\n  'repeat',\n  'replace',\n  'report',\n  'require',\n  'rescue',\n  'resemble',\n  'resist',\n  'resource',\n  'response',\n  'result',\n  'retire',\n  'retreat',\n  'return',\n  'reunion',\n  'reveal',\n  'review',\n  'reward',\n  'rhythm',\n  'rib',\n  'ribbon',\n  'rice',\n  'rich',\n  'ride',\n  'ridge',\n  'rifle',\n  'right',\n  'rigid',\n  'ring',\n  'riot',\n  'ripple',\n  'risk',\n  'ritual',\n  'rival',\n  'river',\n  'road',\n  'roast',\n  'robot',\n  'robust',\n  'rocket',\n  'romance',\n  'roof',\n  'rookie',\n  'room',\n  'rose',\n  'rotate',\n  'rough',\n  'round',\n  'route',\n  'royal',\n  'rubber',\n  'rude',\n  'rug',\n  'rule',\n  'run',\n  'runway',\n  'rural',\n  'sad',\n  'saddle',\n  'sadness',\n  'safe',\n  'sail',\n  'salad',\n  'salmon',\n  'salon',\n  'salt',\n  'salute',\n  'same',\n  'sample',\n  'sand',\n  'satisfy',\n  'satoshi',\n  'sauce',\n  'sausage',\n  'save',\n  'say',\n  'scale',\n  'scan',\n  'scare',\n  'scatter',\n  'scene',\n  'scheme',\n  'school',\n  'science',\n  'scissors',\n  'scorpion',\n  'scout',\n  'scrap',\n  'screen',\n  'script',\n  'scrub',\n  'sea',\n  'search',\n  'season',\n  'seat',\n  'second',\n  'secret',\n  'section',\n  'security',\n  'seed',\n  'seek',\n  'segment',\n  'select',\n  'sell',\n  'seminar',\n  'senior',\n  'sense',\n  'sentence',\n  'series',\n  'service',\n  'session',\n  'settle',\n  'setup',\n  'seven',\n  'shadow',\n  'shaft',\n  'shallow',\n  'share',\n  'shed',\n  'shell',\n  'sheriff',\n  'shield',\n  'shift',\n  'shine',\n  'ship',\n  'shiver',\n  'shock',\n  'shoe',\n  'shoot',\n  'shop',\n  'short',\n  'shoulder',\n  'shove',\n  'shrimp',\n  'shrug',\n  'shuffle',\n  'shy',\n  'sibling',\n  'sick',\n  'side',\n  'siege',\n  'sight',\n  'sign',\n  'silent',\n  'silk',\n  'silly',\n  'silver',\n  'similar',\n  'simple',\n  'since',\n  'sing',\n  'siren',\n  'sister',\n  'situate',\n  'six',\n  'size',\n  'skate',\n  'sketch',\n  'ski',\n  'skill',\n  'skin',\n  'skirt',\n  'skull',\n  'slab',\n  'slam',\n  'sleep',\n  'slender',\n  'slice',\n  'slide',\n  'slight',\n  'slim',\n  'slogan',\n  'slot',\n  'slow',\n  'slush',\n  'small',\n  'smart',\n  'smile',\n  'smoke',\n  'smooth',\n  'snack',\n  'snake',\n  'snap',\n  'sniff',\n  'snow',\n  'soap',\n  'soccer',\n  'social',\n  'sock',\n  'soda',\n  'soft',\n  'solar',\n  'soldier',\n  'solid',\n  'solution',\n  'solve',\n  'someone',\n  'song',\n  'soon',\n  'sorry',\n  'sort',\n  'soul',\n  'sound',\n  'soup',\n  'source',\n  'south',\n  'space',\n  'spare',\n  'spatial',\n  'spawn',\n  'speak',\n  'special',\n  'speed',\n  'spell',\n  'spend',\n  'sphere',\n  'spice',\n  'spider',\n  'spike',\n  'spin',\n  'spirit',\n  'split',\n  'spoil',\n  'sponsor',\n  'spoon',\n  'sport',\n  'spot',\n  'spray',\n  'spread',\n  'spring',\n  'spy',\n  'square',\n  'squeeze',\n  'squirrel',\n  'stable',\n  'stadium',\n  'staff',\n  'stage',\n  'stairs',\n  'stamp',\n  'stand',\n  'start',\n  'state',\n  'stay',\n  'steak',\n  'steel',\n  'stem',\n  'step',\n  'stereo',\n  'stick',\n  'still',\n  'sting',\n  'stock',\n  'stomach',\n  'stone',\n  'stool',\n  'story',\n  'stove',\n  'strategy',\n  'street',\n  'strike',\n  'strong',\n  'struggle',\n  'student',\n  'stuff',\n  'stumble',\n  'style',\n  'subject',\n  'submit',\n  'subway',\n  'success',\n  'such',\n  'sudden',\n  'suffer',\n  'sugar',\n  'suggest',\n  'suit',\n  'summer',\n  'sun',\n  'sunny',\n  'sunset',\n  'super',\n  'supply',\n  'supreme',\n  'sure',\n  'surface',\n  'surge',\n  'surprise',\n  'surround',\n  'survey',\n  'suspect',\n  'sustain',\n  'swallow',\n  'swamp',\n  'swap',\n  'swarm',\n  'swear',\n  'sweet',\n  'swift',\n  'swim',\n  'swing',\n  'switch',\n  'sword',\n  'symbol',\n  'symptom',\n  'syrup',\n  'system',\n  'table',\n  'tackle',\n  'tag',\n  'tail',\n  'talent',\n  'talk',\n  'tank',\n  'tape',\n  'target',\n  'task',\n  'taste',\n  'tattoo',\n  'taxi',\n  'teach',\n  'team',\n  'tell',\n  'ten',\n  'tenant',\n  'tennis',\n  'tent',\n  'term',\n  'test',\n  'text',\n  'thank',\n  'that',\n  'theme',\n  'then',\n  'theory',\n  'there',\n  'they',\n  'thing',\n  'this',\n  'thought',\n  'three',\n  'thrive',\n  'throw',\n  'thumb',\n  'thunder',\n  'ticket',\n  'tide',\n  'tiger',\n  'tilt',\n  'timber',\n  'time',\n  'tiny',\n  'tip',\n  'tired',\n  'tissue',\n  'title',\n  'toast',\n  'tobacco',\n  'today',\n  'toddler',\n  'toe',\n  'together',\n  'toilet',\n  'token',\n  'tomato',\n  'tomorrow',\n  'tone',\n  'tongue',\n  'tonight',\n  'tool',\n  'tooth',\n  'top',\n  'topic',\n  'topple',\n  'torch',\n  'tornado',\n  'tortoise',\n  'toss',\n  'total',\n  'tourist',\n  'toward',\n  'tower',\n  'town',\n  'toy',\n  'track',\n  'trade',\n  'traffic',\n  'tragic',\n  'train',\n  'transfer',\n  'trap',\n  'trash',\n  'travel',\n  'tray',\n  'treat',\n  'tree',\n  'trend',\n  'trial',\n  'tribe',\n  'trick',\n  'trigger',\n  'trim',\n  'trip',\n  'trophy',\n  'trouble',\n  'truck',\n  'true',\n  'truly',\n  'trumpet',\n  'trust',\n  'truth',\n  'try',\n  'tube',\n  'tuition',\n  'tumble',\n  'tuna',\n  'tunnel',\n  'turkey',\n  'turn',\n  'turtle',\n  'twelve',\n  'twenty',\n  'twice',\n  'twin',\n  'twist',\n  'two',\n  'type',\n  'typical',\n  'ugly',\n  'umbrella',\n  'unable',\n  'unaware',\n  'uncle',\n  'uncover',\n  'under',\n  'undo',\n  'unfair',\n  'unfold',\n  'unhappy',\n  'uniform',\n  'unique',\n  'unit',\n  'universe',\n  'unknown',\n  'unlock',\n  'until',\n  'unusual',\n  'unveil',\n  'update',\n  'upgrade',\n  'uphold',\n  'upon',\n  'upper',\n  'upset',\n  'urban',\n  'urge',\n  'usage',\n  'use',\n  'used',\n  'useful',\n  'useless',\n  'usual',\n  'utility',\n  'vacant',\n  'vacuum',\n  'vague',\n  'valid',\n  'valley',\n  'valve',\n  'van',\n  'vanish',\n  'vapor',\n  'various',\n  'vast',\n  'vault',\n  'vehicle',\n  'velvet',\n  'vendor',\n  'venture',\n  'venue',\n  'verb',\n  'verify',\n  'version',\n  'very',\n  'vessel',\n  'veteran',\n  'viable',\n  'vibrant',\n  'vicious',\n  'victory',\n  'video',\n  'view',\n  'village',\n  'vintage',\n  'violin',\n  'virtual',\n  'virus',\n  'visa',\n  'visit',\n  'visual',\n  'vital',\n  'vivid',\n  'vocal',\n  'voice',\n  'void',\n  'volcano',\n  'volume',\n  'vote',\n  'voyage',\n  'wage',\n  'wagon',\n  'wait',\n  'walk',\n  'wall',\n  'walnut',\n  'want',\n  'warfare',\n  'warm',\n  'warrior',\n  'wash',\n  'wasp',\n  'waste',\n  'water',\n  'wave',\n  'way',\n  'wealth',\n  'weapon',\n  'wear',\n  'weasel',\n  'weather',\n  'web',\n  'wedding',\n  'weekend',\n  'weird',\n  'welcome',\n  'west',\n  'wet',\n  'whale',\n  'what',\n  'wheat',\n  'wheel',\n  'when',\n  'where',\n  'whip',\n  'whisper',\n  'wide',\n  'width',\n  'wife',\n  'wild',\n  'will',\n  'win',\n  'window',\n  'wine',\n  'wing',\n  'wink',\n  'winner',\n  'winter',\n  'wire',\n  'wisdom',\n  'wise',\n  'wish',\n  'witness',\n  'wolf',\n  'woman',\n  'wonder',\n  'wood',\n  'wool',\n  'word',\n  'work',\n  'world',\n  'worry',\n  'worth',\n  'wrap',\n  'wreck',\n  'wrestle',\n  'wrist',\n  'write',\n  'wrong',\n  'yard',\n  'year',\n  'yellow',\n  'you',\n  'young',\n  'youth',\n  'zebra',\n  'zero',\n  'zone',\n  'zoo',\n];\n","export { english } from './words/english';\n\nexport enum Language {\n  'english' = 'english',\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\n/* Mnemonic phrase composed by words from the provided wordlist it can be a text or a array of words */\nexport type MnemonicPhrase = string | Array<string>;\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n  return (1 << bits) - 1;\n}\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n  return ((1 << bits) - 1) << (8 - bits);\n}\n\nexport function getWords(mnemonic: MnemonicPhrase): Array<string> {\n  if (!Array.isArray(mnemonic)) {\n    return mnemonic.split(/\\s+/);\n  }\n  return mnemonic;\n}\n\nexport function getPhrase(mnemonic: MnemonicPhrase): string {\n  if (Array.isArray(mnemonic)) {\n    return mnemonic.join(' ');\n  }\n  return mnemonic;\n}\n\nexport function entropyToMnemonicIndices(entropy: Uint8Array): Array<number> {\n  const indices: Array<number> = [0];\n\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i += 1) {\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n      remainingBits += 3;\n    }\n  }\n\n  // Compute the checksum bits\n  const checksumBits = entropy.length / 4;\n  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> (8 - checksumBits);\n\n  return indices;\n}\n\nexport function mnemonicWordsToEntropy(words: Array<string>, wordlist: Array<string>): BytesLike {\n  const size = Math.ceil((11 * words.length) / 8);\n  const entropy = arrayify(new Uint8Array(size));\n\n  let offset = 0;\n  for (let i = 0; i < words.length; i += 1) {\n    const index = wordlist.indexOf(words[i].normalize('NFKD'));\n    if (index === -1) {\n      throw new FuelError(\n        ErrorCode.INVALID_MNEMONIC,\n        `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`\n      );\n    }\n\n    for (let bit = 0; bit < 11; bit += 1) {\n      if (index & (1 << (10 - bit))) {\n        entropy[offset >> 3] |= 1 << (7 - (offset % 8));\n      }\n      offset += 1;\n    }\n  }\n  const entropyBits = (32 * words.length) / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new FuelError(\n      ErrorCode.INVALID_CHECKSUM,\n      'Checksum validation failed for the provided mnemonic.'\n    );\n  }\n\n  return entropy.slice(0, entropyBits / 8);\n}\n","//\n// Because WalletLocked and WalletUnlocked has a cycle dependency\n// it's not possible to split the two classes in different files\n//\n/* eslint-disable max-classes-per-file */\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport { Account } from '../account';\nimport { HDWallet } from '../hdwallet';\nimport { Mnemonic } from '../mnemonic';\nimport type { Provider } from '../providers';\nimport { Signer } from '../signer';\n\nimport { BaseWalletUnlocked } from './base-wallet-unlocked';\nimport { decryptKeystoreWallet } from './keystore-wallet';\n\nexport interface GenerateOptions {\n  /** Additional entropy for the random bytes */\n  entropy?: BytesLike;\n  provider?: Provider;\n}\n\n/**\n * `WalletLocked` provides the functionalities for a locked  wallet.\n */\nexport class WalletLocked extends Account {\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey: BytesLike): WalletUnlocked {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new WalletUnlocked(privateKey, this._provider);\n  }\n}\n\n/**\n * `WalletUnlocked` provides the functionalities for an unlocked wallet.\n */\nexport class WalletUnlocked extends BaseWalletUnlocked {\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock(): WalletLocked {\n    this.signer = () => new Signer('0x00');\n    return new WalletLocked(this.address, this._provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions?: GenerateOptions): WalletUnlocked {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed: string, path?: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(\n    mnemonic: string,\n    path?: string,\n    passphrase?: BytesLike,\n    provider?: Provider\n  ): WalletUnlocked {\n    const seed = Mnemonic.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromExtendedKey(extendedKey);\n\n    return new WalletUnlocked(<string>hdWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static async fromEncryptedJson(\n    jsonWallet: string,\n    password: string,\n    provider?: Provider\n  ): Promise<WalletUnlocked> {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n\n    return new WalletUnlocked(privateKey, provider);\n  }\n}\n","import type { Address } from '@fuel-ts/address';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Provider } from '../providers';\n\nimport { WalletLocked, WalletUnlocked } from './wallets';\n\n/**\n * `Wallet` provides methods to create locked and unlocked wallet instances.\n */\nexport class Wallet {\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(address: string | Address, provider?: Provider): WalletLocked {\n    return new WalletLocked(address, provider);\n  }\n\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey: BytesLike, provider?: Provider) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static generate = WalletUnlocked.generate;\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromSeed = WalletUnlocked.fromSeed;\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromMnemonic = WalletUnlocked.fromMnemonic;\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromExtendedKey = WalletUnlocked.fromExtendedKey;\n\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromEncryptedJson = WalletUnlocked.fromEncryptedJson;\n}\n","import type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport type { Keystore } from '@fuel-ts/crypto';\nimport { encrypt, decrypt } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { EventEmitter } from 'events';\n\nimport type { WalletUnlocked } from '../wallet';\n\nimport { MemoryStorage } from './storages/memory-storage';\nimport type {\n  StorageAbstract,\n  WalletManagerAccount,\n  VaultConfig,\n  VaultsState,\n  WalletManagerOptions,\n  WalletManagerState,\n  Vault,\n} from './types';\nimport { MnemonicVault } from './vaults/mnemonic-vault';\nimport { PrivateKeyVault } from './vaults/privatekey-vault';\n\nconst ERROR_MESSAGES = {\n  invalid_vault_type: 'The provided Vault type is invalid.',\n  address_not_found: 'No private key found for address the specified wallet address.',\n  vault_not_found: 'The specified vault was not found.',\n  wallet_not_unlocked: 'The wallet is currently locked.',\n  passphrase_not_match: 'The provided passphrase did not match the expected value.',\n};\n\n/**\n * Generic assert function to avoid undesirable errors\n */\nfunction assert(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new FuelError(ErrorCode.WALLET_MANAGER_ERROR, message);\n  }\n}\n\n/**\n * WalletManager is a upper package to manage multiple vaults like mnemonic and privateKeys.\n *\n * - VaultTypes can be add to `WalletManager.Vaults` enabling to add custom Vault types.\n * - Storage can be instantiate when initializing enabling custom storage types.\n */\nexport class WalletManager extends EventEmitter {\n  /**\n   * Vaults\n   *\n   * Vaults are responsible to store secret keys and return an `Wallet` instance,\n   * to interact with the network.\n   *\n   * Each vault has access to its own state\n   *\n   */\n  static Vaults = [MnemonicVault, PrivateKeyVault];\n  /**\n   * Storage\n   *\n   * Persistent encrypted data. `The default storage works only on memory`.\n   */\n  readonly storage: StorageAbstract = new MemoryStorage();\n  /* Key name passed to the storage */\n  readonly STORAGE_KEY: string = 'WalletManager';\n\n  // `This variables are only accessible from inside the class`\n  #vaults: VaultsState = [];\n  #passphrase = '';\n  #isLocked: boolean = true;\n\n  constructor(options?: WalletManagerOptions) {\n    super();\n    this.storage = options?.storage || this.storage;\n  }\n\n  get isLocked(): boolean {\n    return this.#isLocked;\n  }\n\n  /**\n   * Return the vault serialized object containing all the privateKeys,\n   * the format of the return depends on the Vault type.\n   */\n  exportVault<T extends Vault>(vaultId: number): ReturnType<T['serialize']> {\n    assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = this.#vaults.find((_, idx) => idx === vaultId);\n    assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    return vaultState.vault.serialize() as ReturnType<T['serialize']>;\n  }\n\n  /**\n   * List all vaults on the Wallet Manager, this function not return secret's\n   */\n  getVaults(): Array<{ title?: string; type: string; vaultId: number }> {\n    return this.#vaults.map((v, idx) => ({\n      title: v.title,\n      type: v.type,\n      vaultId: idx,\n    }));\n  }\n\n  /**\n   * List all accounts on the Wallet Manager not vault information is revealed\n   */\n  getAccounts(): Array<WalletManagerAccount> {\n    // Return all WalletManagerAccounts from vaults\n    return this.#vaults.flatMap<WalletManagerAccount>((vaultState, vaultId) =>\n      vaultState.vault.getAccounts().map((account) => ({ ...account, vaultId }))\n    );\n  }\n\n  /**\n   * Create a Wallet instance for the specific account\n   */\n  getWallet(address: AddressInput): WalletUnlocked {\n    const ownerAddress = new Address(address);\n    const vaultState = this.#vaults.find((vs) =>\n      vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n\n    return vaultState.vault.getWallet(ownerAddress);\n  }\n\n  /**\n   * Export specific account privateKey\n   */\n  exportPrivateKey(address: AddressInput) {\n    const ownerAddress = new Address(address);\n    assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = this.#vaults.find((vs) =>\n      vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n\n    return vaultState.vault.exportAccount(ownerAddress);\n  }\n\n  /**\n   * Add account to a selected vault or on the first vault as default.\n   * If not vaults are adds it will return error\n   */\n  async addAccount(options?: { vaultId: number }) {\n    // Make sure before add new vault state is fully loaded\n    await this.loadState();\n    // Get vault instance\n    const vaultState = this.#vaults[options?.vaultId || 0];\n    await assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    // Add account on vault\n    const account = vaultState.vault.addAccount();\n    // Save the accounts state\n    await this.saveState();\n    // Return account\n    return account;\n  }\n\n  /**\n   * Remove vault by index, by remove the vault you also remove all accounts\n   * created by the vault.\n   */\n  async removeVault(index: number) {\n    this.#vaults.splice(index, 1);\n    await this.saveState();\n  }\n\n  /**\n   * Add Vault, the `vaultConfig.type` will look for the Vaults supported if\n   * didn't found it will throw.\n   */\n  async addVault(vaultConfig: VaultConfig) {\n    // Make sure before add new vault state is fully loaded\n    await this.loadState();\n    // Check if vault is supported\n    const Vault = this.getVaultClass(vaultConfig.type);\n    // create Vault instance\n    const vault = new Vault(vaultConfig);\n    // Push vaults to state\n    this.#vaults = this.#vaults.concat({\n      title: vaultConfig.title,\n      type: vaultConfig.type,\n      vault,\n    });\n    // Persist data on storage\n    await this.saveState();\n  }\n\n  /**\n   * Lock wallet. It removes passphrase from class instance, encrypt and hide all address and\n   * secrets.\n   */\n  lock() {\n    this.#isLocked = true;\n    // Clean state vaults from state\n    this.#vaults = [];\n    // Clean password from state\n    this.#passphrase = '';\n    // Emit event that wallet is locked\n    this.emit('lock');\n  }\n\n  /**\n   * Unlock wallet. It sets passphrase on WalletManger instance load all address from configured vaults.\n   * Vaults with secrets are not unlocked or instantiated on this moment.\n   */\n  async unlock(passphrase: string) {\n    // Set password on state\n    this.#passphrase = passphrase;\n    // Set locked state to false\n    this.#isLocked = false;\n    // Try to load state with passphrase\n    try {\n      // Load state with passphrase\n      await this.loadState();\n      // Emit event that wallet is unlocked\n      this.emit('unlock');\n    } catch (err) {\n      // If passphrase is wrong lock wallet\n      await this.lock();\n      // Forward error\n      throw err;\n    }\n  }\n\n  /**\n   * Update WalletManager encryption passphrase\n   */\n  async updatePassphrase(oldpass: string, newpass: string) {\n    const isLocked = this.#isLocked;\n    // Unlock wallet to decrypt data\n    await this.unlock(oldpass);\n    // Set new password on state\n    this.#passphrase = newpass;\n    // Persist data on storage\n    await this.saveState();\n    // Load state with new password\n    await this.loadState();\n    // If wallet was locked, lock the wallet again\n    if (isLocked) {\n      await this.lock();\n    }\n  }\n\n  /**\n   * Retrieve and decrypt WalletManager state from storage\n   */\n  async loadState() {\n    await assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n\n    const data = await this.storage.getItem(this.STORAGE_KEY);\n    if (data) {\n      const state = await decrypt<WalletManagerState>(this.#passphrase, <Keystore>JSON.parse(data));\n      this.#vaults = this.#deserializeVaults(state.vaults);\n    }\n  }\n\n  /**\n   * Store encrypted WalletManager state on storage\n   */\n  private async saveState() {\n    await assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n\n    const encryptedData = await encrypt(this.#passphrase, {\n      vaults: this.#serializeVaults(this.#vaults),\n    });\n    await this.storage.setItem(this.STORAGE_KEY, JSON.stringify(encryptedData));\n    this.emit('update');\n  }\n\n  /**\n   * Serialize all vaults to store\n   *\n   * `This is only accessible from inside the class`\n   */\n  #serializeVaults(vaults: VaultsState) {\n    return vaults.map(({ title, type, vault }) => ({\n      title,\n      type,\n      data: vault.serialize(),\n    }));\n  }\n\n  /**\n   * Deserialize all vaults to state\n   *\n   * `This is only accessible from inside the class`\n   */\n  #deserializeVaults(vaults: VaultsState) {\n    return vaults.map(({ title, type, data: vaultConfig }) => {\n      const VaultClass = this.getVaultClass(type);\n      return {\n        title,\n        type,\n        vault: new VaultClass(<VaultConfig>vaultConfig),\n      };\n    });\n  }\n\n  /**\n   * Return a instantiable Class reference from `WalletManager.Vaults` supported list.\n   */\n  private getVaultClass(type: string) {\n    const VaultClass = WalletManager.Vaults.find((v) => v.type === type);\n\n    assert(VaultClass, ERROR_MESSAGES.invalid_vault_type);\n\n    return VaultClass;\n  }\n}\n","import type { StorageAbstract } from '../types';\n\nexport class MemoryStorage implements StorageAbstract {\n  storage = new Map<string, unknown>();\n\n  async getItem<T>(key: string): Promise<T | null> {\n    const item = await this.storage.get(key);\n    return item as T | null;\n  }\n\n  async setItem(key: string, value: string) {\n    await this.storage.set(key, value);\n  }\n\n  async removeItem(key: string) {\n    await this.storage.delete(key);\n  }\n\n  async clear() {\n    await this.storage.clear();\n  }\n}\n","import type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { Mnemonic } from '../../mnemonic';\nimport type { WalletUnlocked } from '../../wallet';\nimport { Wallet } from '../../wallet';\nimport type { Vault } from '../types';\n\nexport interface MnemonicVaultOptions {\n  secret?: string;\n  rootPath?: string;\n  numberOfAccounts?: number | null;\n}\n\nexport class MnemonicVault implements Vault<MnemonicVaultOptions> {\n  static readonly type = 'mnemonic';\n  readonly #secret: string;\n\n  pathKey = '{}';\n  rootPath: string = `m/44'/1179993420'/${this.pathKey}'/0/0`;\n  numberOfAccounts: number = 0;\n\n  constructor(options: MnemonicVaultOptions) {\n    this.#secret = options.secret || Mnemonic.generate();\n    this.rootPath = options.rootPath || this.rootPath;\n    // On creating the vault also adds one account\n    this.numberOfAccounts = options.numberOfAccounts || 1;\n  }\n\n  getDerivePath(index: number) {\n    if (this.rootPath.includes(this.pathKey)) {\n      return this.rootPath.replace(this.pathKey, String(index));\n    }\n    return `${this.rootPath}/${index}`;\n  }\n\n  serialize(): MnemonicVaultOptions {\n    return {\n      secret: this.#secret,\n      rootPath: this.rootPath,\n      numberOfAccounts: this.numberOfAccounts,\n    };\n  }\n\n  getAccounts() {\n    const accounts = [];\n    let numberOfAccounts = 0;\n\n    // Create all accounts to current vault\n    do {\n      const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(numberOfAccounts));\n      accounts.push({\n        publicKey: wallet.publicKey,\n        address: wallet.address,\n      });\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n\n    return accounts;\n  }\n\n  addAccount() {\n    this.numberOfAccounts += 1;\n    const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(this.numberOfAccounts - 1));\n\n    return {\n      publicKey: wallet.publicKey,\n      address: wallet.address,\n    };\n  }\n\n  exportAccount(address: AddressInput): string {\n    let numberOfAccounts = 0;\n    const ownerAddress = new Address(address);\n    // Look for the account that has the same address\n    do {\n      const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(numberOfAccounts));\n      if (wallet.address.equals(ownerAddress)) {\n        return wallet.privateKey;\n      }\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n\n    throw new FuelError(\n      ErrorCode.WALLET_MANAGER_ERROR,\n      `Account with address '${address}' not found in derived wallets.`\n    );\n  }\n\n  getWallet(address: AddressInput): WalletUnlocked {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n}\n","import type { AddressInput } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { WalletUnlocked } from '../../wallet';\nimport { Wallet } from '../../wallet';\nimport type { WalletManagerAccount, Vault } from '../types';\n\nexport interface PkVaultOptions {\n  secret?: string;\n  accounts?: Array<string>;\n}\n\nexport class PrivateKeyVault implements Vault<PkVaultOptions> {\n  static readonly type = 'privateKey';\n\n  #privateKeys: Array<string> = [];\n\n  /**\n   * If privateKey vault is initialized with a secretKey, it creates\n   * one account with the fallowing secret\n   */\n  constructor(options: PkVaultOptions = {}) {\n    if (options.secret) {\n      this.#privateKeys = [options.secret];\n    } else {\n      this.#privateKeys = options.accounts || [Wallet.generate().privateKey];\n    }\n  }\n\n  serialize(): PkVaultOptions {\n    return {\n      accounts: this.#privateKeys,\n    };\n  }\n\n  getPublicAccount(privateKey: string) {\n    const wallet = Wallet.fromPrivateKey(privateKey);\n    return {\n      address: wallet.address,\n      publicKey: wallet.publicKey,\n    };\n  }\n\n  getAccounts(): WalletManagerAccount[] {\n    return this.#privateKeys.map((pk) => this.getPublicAccount(pk));\n  }\n\n  addAccount() {\n    const wallet = Wallet.generate();\n\n    this.#privateKeys.push(wallet.privateKey);\n\n    return this.getPublicAccount(wallet.privateKey);\n  }\n\n  exportAccount(address: AddressInput): string {\n    const ownerAddress = new Address(address);\n    const privateKey = this.#privateKeys.find((pk) =>\n      Wallet.fromPrivateKey(pk).address.equals(ownerAddress)\n    );\n\n    if (!privateKey) {\n      throw new FuelError(\n        ErrorCode.WALLET_MANAGER_ERROR,\n        `No private key found for address '${address}'.`\n      );\n    }\n\n    return privateKey;\n  }\n\n  getWallet(address: string | Address): WalletUnlocked {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { WalletUnlocked } from '../wallet';\n\nexport type WalletManagerAccount = {\n  address: Address;\n  publicKey: string;\n  vaultId?: number;\n};\n\nexport type WalletManagerOptions = {\n  storage: StorageAbstract;\n};\n\nexport type VaultConfig = {\n  type: string;\n  title?: string;\n  secret?: string;\n};\n\nexport type VaultsState = Array<{\n  type: string;\n  title?: string;\n  data?: VaultConfig;\n  vault: Vault;\n}>;\n\nexport interface WalletManagerState {\n  vaults: VaultsState;\n}\n\nexport abstract class Vault<TOptions = { secret?: string }> {\n  static readonly type: string;\n\n  constructor(_options: TOptions) {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  serialize(): TOptions {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  getAccounts(): WalletManagerAccount[] {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  addAccount(): WalletManagerAccount {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  exportAccount(_address: Address): string {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  getWallet(_address: Address): WalletUnlocked {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n}\n\nexport abstract class StorageAbstract {\n  abstract setItem(key: string, value: string): Promise<void>;\n  abstract getItem(key: string): Promise<string | null | undefined>;\n  abstract removeItem(key: string): Promise<void>;\n  abstract clear(): Promise<void>;\n}\n","import type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nimport type { FakeResources } from '../account';\nimport { Account } from '../account';\nimport {\n  transactionRequestify,\n  isRequestInputResource,\n  isRequestInputResourceFromOwner,\n  isRequestInputCoinOrMessage,\n} from '../providers';\nimport type {\n  CallResult,\n  CoinQuantityLike,\n  ResourcesIdsToIgnore,\n  Provider,\n  Resource,\n  TransactionRequest,\n  TransactionRequestLike,\n  TransactionResponse,\n} from '../providers';\nimport { deployScriptOrPredicate } from '../utils/deployScriptOrPredicate';\n\nimport { getPredicateRoot } from './utils';\n\nexport type PredicateParams<\n  TData extends InputValue[] = InputValue[],\n  TConfigurables extends { [name: string]: unknown } | undefined = { [name: string]: unknown },\n> = {\n  bytecode: BytesLike;\n  provider: Provider;\n  abi: JsonAbi;\n  data?: TData;\n  configurableConstants?: TConfigurables;\n};\n\n/**\n * `Predicate` provides methods to populate transaction data with predicate information and sending transactions with them.\n */\nexport class Predicate<\n  TData extends InputValue[] = InputValue[],\n  TConfigurables extends { [name: string]: unknown } | undefined = { [name: string]: unknown },\n> extends Account {\n  bytes: Uint8Array;\n  predicateData: TData = [] as unknown as TData;\n  interface: Interface;\n  initialBytecode: Uint8Array;\n  configurableConstants: TConfigurables | undefined;\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param bytecode - The bytecode of the predicate.\n   * @param abi - The JSON ABI of the predicate.\n   * @param provider - The provider used to interact with the blockchain.\n   * @param data - The predicate input data (optional).\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   */\n  constructor({\n    bytecode,\n    abi,\n    provider,\n    data,\n    configurableConstants,\n  }: PredicateParams<TData, TConfigurables>) {\n    const { predicateBytes, predicateInterface } = Predicate.processPredicateData(\n      bytecode,\n      abi,\n      configurableConstants\n    );\n    const address = new Address(getPredicateRoot(predicateBytes));\n    super(address, provider);\n\n    this.initialBytecode = arrayify(bytecode);\n    this.bytes = predicateBytes;\n    this.interface = predicateInterface;\n    this.configurableConstants = configurableConstants;\n    if (data !== undefined && data.length > 0) {\n      this.predicateData = data;\n    }\n  }\n\n  /**\n   * Populates the transaction data with predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns The transaction request with predicate data.\n   */\n  populateTransactionPredicateData<T extends TransactionRequest>(\n    transactionRequestLike: TransactionRequestLike\n  ) {\n    const request = transactionRequestify(transactionRequestLike) as T;\n\n    const placeholderIndex = this.getIndexFromPlaceholderWitness(request);\n\n    if (placeholderIndex !== -1) {\n      request.removeWitness(placeholderIndex);\n    }\n\n    request.inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      if (isRequestInputResourceFromOwner(input, this.address)) {\n        // eslint-disable-next-line no-param-reassign\n        input.predicate = hexlify(this.bytes);\n        // eslint-disable-next-line no-param-reassign\n        input.predicateData = hexlify(this.getPredicateData());\n        // eslint-disable-next-line no-param-reassign\n        input.witnessIndex = 0;\n      }\n    });\n\n    return request;\n  }\n\n  /**\n   * Sends a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the transaction response.\n   */\n  override sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n\n    return super.sendTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Simulates a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the call result.\n   */\n  override simulateTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.simulateTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Retrieves the properly encoded predicate data.\n   *\n   * @returns A Uint8Array containing the encoded predicate data. If no predicate data is available, returns an empty Uint8Array.\n   */\n  getPredicateData(): Uint8Array {\n    if (!this.predicateData.length) {\n      return new Uint8Array();\n    }\n\n    const mainFn = this.interface?.functions.main;\n    return mainFn?.encodeArguments(this.predicateData) || new Uint8Array();\n  }\n\n  /**\n   * Creates a new Predicate instance from an existing Predicate instance.\n   * @param overrides - The data and configurable constants to override.\n   * @returns A new Predicate instance with the same bytecode, ABI and provider but with the ability to set the data and configurable constants.\n   */\n  toNewInstance(\n    overrides: Pick<PredicateParams<TData, TConfigurables>, 'data' | 'configurableConstants'> = {}\n  ) {\n    return new Predicate<TData, TConfigurables>({\n      bytecode: this.initialBytecode,\n      abi: this.interface.jsonAbi,\n      provider: this.provider,\n      data: overrides.data ?? this.predicateData,\n      configurableConstants: overrides.configurableConstants ?? this.configurableConstants,\n    });\n  }\n\n  /**\n   * Processes the predicate data and returns the altered bytecode and interface.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   * @returns An object containing the new predicate bytes and interface.\n   */\n  private static processPredicateData(\n    bytes: BytesLike,\n    jsonAbi: JsonAbi,\n    configurableConstants?: { [name: string]: unknown }\n  ) {\n    let predicateBytes = arrayify(bytes);\n    const abiInterface: Interface = new Interface(jsonAbi);\n\n    if (abiInterface.functions.main === undefined) {\n      throw new FuelError(\n        ErrorCode.ABI_MAIN_METHOD_MISSING,\n        'Cannot use ABI without \"main\" function.'\n      );\n    }\n\n    if (configurableConstants && Object.keys(configurableConstants).length) {\n      predicateBytes = Predicate.setConfigurableConstants(\n        predicateBytes,\n        configurableConstants,\n        abiInterface\n      );\n    }\n\n    return {\n      predicateBytes,\n      predicateInterface: abiInterface,\n    };\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - IDs of coins to exclude.\n   * @param resourcesIdsToIgnore - IDs of resources to be excluded from the query.\n   * @returns A promise that resolves to an array of Resources.\n   */\n  override async getResourcesToSpend(\n    quantities: CoinQuantityLike[],\n    resourcesIdsToIgnore?: ResourcesIdsToIgnore\n  ): Promise<Resource[]> {\n    const resources = await this.provider.getResourcesToSpend(\n      this.address,\n      quantities,\n      resourcesIdsToIgnore\n    );\n    return resources.map((resource) => ({\n      ...resource,\n      predicate: hexlify(this.bytes),\n      predicateData: hexlify(this.getPredicateData()),\n    }));\n  }\n\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  override generateFakeResources(coins: FakeResources[]): Array<Resource> {\n    return super.generateFakeResources(coins).map((coin) => ({\n      ...coin,\n      predicate: hexlify(this.bytes),\n      predicateData: hexlify(this.getPredicateData()),\n    }));\n  }\n\n  /**\n   * Sets the configurable constants for the predicate.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param configurableConstants - Configurable constants to be set.\n   * @param abiInterface - The ABI interface of the predicate.\n   * @returns The mutated bytes with the configurable constants set.\n   */\n  private static setConfigurableConstants(\n    bytes: Uint8Array,\n    configurableConstants: { [name: string]: unknown },\n    abiInterface: Interface\n  ) {\n    const mutatedBytes = bytes;\n\n    try {\n      if (Object.keys(abiInterface.configurables).length === 0) {\n        throw new FuelError(\n          ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n          'Predicate has no configurable constants to be set'\n        );\n      }\n\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!abiInterface?.configurables[key]) {\n          throw new FuelError(\n            ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `No configurable constant named '${key}' found in the Predicate`\n          );\n        }\n\n        const { offset } = abiInterface.configurables[key];\n\n        const encoded = abiInterface.encodeConfigurable(key, value as InputValue);\n\n        mutatedBytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new FuelError(\n        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${(<Error>err).message}.`\n      );\n    }\n\n    return mutatedBytes;\n  }\n\n  /**\n   * Returns the index of the witness placeholder that was added to this predicate.\n   * If no witness placeholder was added, it returns -1.\n   * @param request - The transaction request.\n   * @returns The index of the witness placeholder, or -1 if there is no witness placeholder.\n   */\n  private getIndexFromPlaceholderWitness(request: TransactionRequest): number {\n    const predicateInputs = request.inputs\n      .filter(isRequestInputResource)\n      .filter((input) => isRequestInputResourceFromOwner(input, this.address));\n\n    let index = -1;\n\n    const hasEmptyPredicateInputs = predicateInputs.find((input) => !input.predicate);\n\n    if (hasEmptyPredicateInputs) {\n      index = hasEmptyPredicateInputs.witnessIndex;\n\n      const allInputsAreEmpty = predicateInputs.every((input) => !input.predicate);\n\n      if (!allInputsAreEmpty) {\n        /**\n         * If at least one resource was added as a predicate resource, we need to check if it was the\n         * first one. If that is the case, we don't need to remove the witness placeholder\n         * as this was added with the \"witnessIndex\" as 0 and without a placeholder witness. Later if\n         * any resource without a predicate is added, it will have the same witnessIndex because it has the\n         * same owner.\n         */\n        const wasFilledInputAddedFirst = !!predicateInputs[0]?.predicate;\n\n        if (wasFilledInputAddedFirst) {\n          index = -1;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader predicate will have the same configurable constants\n   * as the original predicate which was used to generate the loader predicate.\n   */\n  async deploy<T = this>(account: Account) {\n    return deployScriptOrPredicate<T>({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: (loaderBytecode, newAbi) =>\n        new Predicate({\n          bytecode: loaderBytecode,\n          abi: newAbi,\n          provider: this.provider,\n          data: this.predicateData,\n        }) as T,\n    });\n  }\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { Account } from '../account';\nimport { BlobTransactionRequest, TransactionStatus } from '../providers';\n\nimport {\n  getBytecodeConfigurableOffset,\n  getBytecodeId,\n  getPredicateScriptLoaderInstructions,\n} from './predicate-script-loader-instructions';\n\nasync function fundBlobTx(deployer: Account, blobTxRequest: BlobTransactionRequest) {\n  const { assembledRequest } = await deployer.provider.assembleTx({\n    request: blobTxRequest,\n    feePayerAccount: deployer,\n    accountCoinQuantities: [],\n  });\n\n  return assembledRequest;\n}\n\nfunction adjustConfigurableOffsets(jsonAbi: JsonAbi, configurableOffsetDiff: number) {\n  const { configurables: readOnlyConfigurables } = jsonAbi;\n  const configurables: JsonAbi['configurables'] = [];\n  readOnlyConfigurables.forEach((config) => {\n    // @ts-expect-error shut up the read-only thing\n    configurables.push({ ...config, offset: config.offset - configurableOffsetDiff });\n  });\n  return { ...jsonAbi, configurables } as JsonAbi;\n}\n\ninterface Deployer<T> {\n  deployer: Account;\n  bytecode: Uint8Array;\n  abi: JsonAbi;\n  loaderInstanceCallback: (loaderBytecode: Uint8Array, newAbi: JsonAbi) => T;\n}\n\nexport async function deployScriptOrPredicate<T>({\n  deployer,\n  bytecode,\n  abi,\n  loaderInstanceCallback,\n}: Deployer<T>) {\n  const blobId = getBytecodeId(arrayify(bytecode));\n\n  const configurableOffset = getBytecodeConfigurableOffset(arrayify(bytecode));\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n\n  const blobTxRequest = new BlobTransactionRequest({\n    blobId,\n    witnessIndex: 0,\n    witnesses: [byteCodeWithoutConfigurableSection],\n  });\n\n  const { loaderBytecode, blobOffset } = getPredicateScriptLoaderInstructions(\n    arrayify(bytecode),\n    arrayify(blobId)\n  );\n\n  const newConfigurableOffsetDiff = byteCodeWithoutConfigurableSection.length - (blobOffset || 0);\n  const newAbi = adjustConfigurableOffsets(abi, newConfigurableOffsetDiff);\n\n  const blobExists = (await deployer.provider.getBlobs([blobId])).length > 0;\n\n  const loaderInstance = loaderInstanceCallback(loaderBytecode, newAbi);\n  if (blobExists) {\n    return {\n      waitForResult: () => Promise.resolve(loaderInstance),\n      blobId,\n    };\n  }\n\n  const fundedBlobRequest = await fundBlobTx(deployer, blobTxRequest);\n\n  // Transaction id is unset until we have funded the create tx, which is dependent on the blob tx\n  const waitForResult = async () => {\n    try {\n      const blobTx = await deployer.sendTransaction(fundedBlobRequest);\n      const result = await blobTx.waitForResult();\n\n      if (result.status !== TransactionStatus.success) {\n        throw new Error();\n      }\n    } catch (err: unknown) {\n      throw new FuelError(ErrorCode.TRANSACTION_FAILED, 'Failed to deploy predicate chunk');\n    }\n\n    return loaderInstance;\n  };\n\n  return {\n    waitForResult,\n    blobId,\n  };\n}\n","import { BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { sha256 } from '@fuel-ts/hasher';\nimport { concat } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\nconst BLOB_ID_SIZE = 32;\nconst REG_ADDRESS_OF_DATA_AFTER_CODE = 0x10;\nconst REG_START_OF_LOADED_CODE = 0x11;\nconst REG_GENERAL_USE = 0x12;\nconst WORD_SIZE = 8; // size in bytes\n\nexport const DATA_OFFSET_INDEX = 8;\nexport const CONFIGURABLE_OFFSET_INDEX = 16;\n\n/**\n * Get the offset of the data section in the bytecode\n *\n * @param bytecode - The bytecode to get the offset from\n * @returns The offset of the data section\n */\nexport function getBytecodeDataOffset(bytecode: Uint8Array): number {\n  const [offset] = new BigNumberCoder('u64').decode(bytecode, DATA_OFFSET_INDEX);\n  return offset.toNumber();\n}\n\n/**\n * Get the offset of the configurable section in the bytecode\n *\n * @param bytecode - The bytecode to get the offset from\n * @returns The offset of the configurable section\n */\nexport function getBytecodeConfigurableOffset(bytecode: Uint8Array): number {\n  const [offset] = new BigNumberCoder('u64').decode(bytecode, CONFIGURABLE_OFFSET_INDEX);\n  return offset.toNumber();\n}\n\n/**\n * Takes bytecode and generates it's associated bytecode ID.\n *\n * The bytecode ID is a hash of the bytecode when sliced at the configurable offset. This\n * superseded legacy blob IDs when uploading blobs for scripts and predicates so that\n * the bytecode ID is equal to the legacy blob ID. Therefore blobs can be used for ABI verification.\n *\n * @param bytecode - The bytecode to get the id from\n * @returns The id of the bytecode\n */\nexport function getBytecodeId(bytecode: Uint8Array): string {\n  const configurableOffset = getBytecodeConfigurableOffset(bytecode);\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n\n  return sha256(byteCodeWithoutConfigurableSection);\n}\n\n/**\n * Takes bytecode and generates it's associated legacy blob ID.\n *\n * The legacy blob ID is a hash of the bytecode when sliced at the data section offset.\n *\n * @param bytecode - The bytecode to get the id from\n * @returns The id of the bytecode\n */\nexport function getLegacyBlobId(bytecode: Uint8Array): string {\n  const dataOffset = getBytecodeDataOffset(bytecode);\n  const byteCodeWithoutDataSection = bytecode.slice(0, dataOffset);\n\n  return sha256(byteCodeWithoutDataSection);\n}\n\nexport function getPredicateScriptLoaderInstructions(\n  originalBinary: Uint8Array,\n  blobId: Uint8Array\n) {\n  // The final code is going to have this structure:\n  // 1. loader instructions\n  // 2. blob id\n  // 3. length_of_data_section\n  // 4. the data_section (updated with configurables as needed)\n\n  const { RegId, Instruction } = asm;\n\n  const REG_PC = RegId.pc().to_u8();\n  const REG_SP = RegId.sp().to_u8();\n  const REG_IS = RegId.is().to_u8();\n\n  const getInstructions = (numOfInstructions: number) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    asm.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    asm.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    asm.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    asm.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Move on to the data section length\n    asm.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, BLOB_ID_SIZE),\n    // load the size of the data section into REG_GENERAL_USE\n    asm.lw(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE, 0),\n    // after we have read the length of the data section, we move the pointer to the actual\n    // data by skipping WORD_SIZE bytes.\n    asm.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, WORD_SIZE),\n    // load the data section of the executable\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 2),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    asm.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    asm.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    asm.jmp(REG_START_OF_LOADED_CODE),\n  ];\n\n  const getInstructionsNoDataSection = (numOfInstructions: number) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    asm.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    asm.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    asm.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    asm.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    asm.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    asm.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    asm.jmp(REG_START_OF_LOADED_CODE),\n  ];\n\n  const offset = getBytecodeConfigurableOffset(originalBinary);\n\n  // if the binary length is smaller than the offset\n  if (originalBinary.length < offset) {\n    throw new Error(\n      `Data section offset is out of bounds, offset: ${offset}, binary length: ${originalBinary.length}`\n    );\n  }\n\n  // Extract the configurable section from the binary (slice from the configurable offset onwards)\n  const configurableSection = originalBinary.slice(offset);\n\n  // Check if the configurable section is non-empty\n  if (configurableSection.length > 0) {\n    // Get the number of instructions (assuming it won't exceed u16::MAX)\n    const numOfInstructions = getInstructions(0).length;\n    if (numOfInstructions > 65535) {\n      throw new Error('Too many instructions, exceeding u16::MAX.');\n    }\n\n    // Convert instructions to bytes\n    const instructionBytes = new Uint8Array(\n      getInstructions(numOfInstructions).flatMap((instruction) =>\n        Array.from(instruction.to_bytes())\n      )\n    );\n\n    // Convert blobId to bytes\n    const blobBytes = new Uint8Array(blobId);\n\n    // Convert data section length to big-endian 8-byte array\n    const dataSectionLenBytes = new Uint8Array(8);\n    const dataView = new DataView(dataSectionLenBytes.buffer);\n    dataView.setBigUint64(0, BigInt(configurableSection.length), false); // false for big-endian\n\n    // Combine the instruction bytes, blob bytes, data section length, and the data section\n    const loaderBytecode = new Uint8Array([\n      ...instructionBytes,\n      ...blobBytes,\n      ...dataSectionLenBytes,\n    ]);\n\n    return {\n      loaderBytecode: concat([loaderBytecode, configurableSection]),\n      blobOffset: loaderBytecode.length,\n    };\n  }\n  // Handle case where there is no configurable section\n  const numOfInstructions = getInstructionsNoDataSection(0).length;\n  if (numOfInstructions > 65535) {\n    throw new Error('Too many instructions, exceeding u16::MAX.');\n  }\n\n  // Convert instructions to bytes\n  const instructionBytes = new Uint8Array(\n    getInstructionsNoDataSection(numOfInstructions).flatMap((instruction) =>\n      Array.from(instruction.to_bytes())\n    )\n  );\n\n  // Convert blobId to bytes\n  const blobBytes = new Uint8Array(blobId);\n\n  // Combine the instruction bytes and blob bytes\n  const loaderBytecode = new Uint8Array([...instructionBytes, ...blobBytes]);\n\n  return { loaderBytecode };\n}\n","import { hash } from '@fuel-ts/hasher';\nimport { calcRoot } from '@fuel-ts/merkle';\nimport { chunkAndPadBytes, hexlify, concat, arrayify } from '@fuel-ts/utils';\nimport type { BytesLike } from '@fuel-ts/utils';\n\n/**\n * @hidden\n *\n * Calculates the predicate root for a given bytecode and chain ID.\n *\n * @param bytecode - The bytecode represented as a BytesLike object.\n * @param chainId - The ID of the chain associated with the bytecode.\n * @returns The predicate root as a string.\n */\nexport const getPredicateRoot = (bytecode: BytesLike): string => {\n  const chunkSize = 16 * 1024;\n  const bytes = arrayify(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n  const codeRoot = calcRoot(chunks.map((c) => hexlify(c)));\n\n  const predicateRoot = hash(concat(['0x4655454C', codeRoot]));\n  return predicateRoot;\n};\n","import type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { Account } from '../account';\nimport { Provider } from '../providers';\nimport type { StorageAbstract } from '../wallet-manager';\n\nimport { FuelConnector } from './fuel-connector';\nimport {\n  FuelConnectorMethods,\n  FuelConnectorEventTypes,\n  FuelConnectorEventType,\n  LocalStorage,\n} from './types';\nimport type { Network, FuelConnectorEventsType, TargetObject } from './types';\nimport type { CacheFor } from './utils';\nimport { cacheFor, deferPromise, withTimeout } from './utils';\n\n// This is the time to wait for the connector\n// to be available before returning false for hasConnector.\nconst HAS_CONNECTOR_TIMEOUT = 2_000;\n// The time to cache the ping result, as is not\n// expected to change the availability of the connector to\n// change too often we can safely cache the result for 5 seconds\n// at minimum.\nconst PING_CACHE_TIME = 5_000;\n\nconst { warn } = console;\n\nexport type FuelConfig = {\n  connectors?: Array<FuelConnector>;\n  storage?: StorageAbstract | null;\n  targetObject?: TargetObject;\n};\n\nexport type FuelConnectorSelectOptions = {\n  emitEvents?: boolean;\n};\n\nexport type Status = {\n  installed: boolean;\n  connected: boolean;\n};\n\ninterface FuelSdk {\n  // #region connector-manager-method-connectors\n  connectors: () => Promise<Array<FuelConnector>>;\n  // #endregion connector-manager-method-connectors\n  // #region connector-manager-method-getConnector\n  getConnector: (connector: FuelConnector | string) => FuelConnector | null;\n  // #endregion connector-manager-method-getConnector\n  // #region connector-manager-method-hasConnector\n  hasConnector(): Promise<boolean>;\n  // #endregion connector-manager-method-hasConnector\n  // #region connector-manager-method-selectConnector\n  selectConnector(connectorName: string, options: FuelConnectorSelectOptions): Promise<boolean>;\n  // #endregion connector-manager-method-selectConnector\n  // #region connector-manager-method-currentConnector\n  currentConnector(): FuelConnector | null | undefined;\n  // #endregion connector-manager-method-currentConnector\n  // #region connector-manager-method-hasWallet\n  hasWallet(): Promise<boolean>;\n  // #endregion connector-manager-method-hasWallet\n  // #region connector-manager-method-getWallet\n  getWallet(address: string | Address, providerOrNetwork?: Provider | Network): Promise<Account>;\n  // #endregion connector-manager-method-getWallet\n  // #region connector-manager-method-unsubscribe\n  unsubscribe(): void;\n  // #endregion connector-manager-method-unsubscribe\n  // #region connector-manager-method-clean\n  clean(): Promise<void>;\n  // #endregion connector-manager-method-clean\n  // #region connector-manager-method-destroy\n  destroy(): Promise<void>;\n  // #endregion connector-manager-method-destroy\n}\n\nexport class Fuel extends FuelConnector implements FuelSdk {\n  static STORAGE_KEY = 'fuel-current-connector';\n  static defaultConfig: FuelConfig = {};\n  private _storage?: StorageAbstract | null = null;\n  private _connectors: Array<FuelConnector> = [];\n  private _targetObject: TargetObject | null = null;\n  private _unsubscribes: Array<() => void> = [];\n  private _targetUnsubscribe = () => {};\n  private _pingCache: CacheFor = {};\n  private _currentConnector?: FuelConnector | null;\n  private _initializationPromise: Promise<void> | null = null;\n\n  constructor(config: FuelConfig = Fuel.defaultConfig) {\n    super();\n    // Increase the limit of listeners\n    this.setMaxListeners(1_000);\n    // Set all connectors\n    this._connectors = config.connectors ?? [];\n    // Set the target object to listen for global events\n    this._targetObject = this.getTargetObject(config.targetObject);\n    // Set default storage\n    this._storage = config.storage === undefined ? this.getStorage() : config.storage;\n    // Setup all methods\n    this.setupMethods();\n    this._initializationPromise = this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      const connectResponse = this.setDefaultConnector();\n      this._targetUnsubscribe = this.setupConnectorListener();\n      await connectResponse;\n    } catch (error) {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Error initializing Fuel Connector');\n    }\n  }\n\n  public async init(): Promise<Fuel> {\n    await this._initializationPromise;\n    return this;\n  }\n\n  /**\n   * Return the target object to listen for global events.\n   */\n  private getTargetObject(targetObject?: TargetObject): TargetObject | null {\n    if (targetObject) {\n      return targetObject;\n    }\n    if (typeof window !== 'undefined') {\n      return window;\n    }\n    if (typeof document !== 'undefined') {\n      return document;\n    }\n    return null;\n  }\n\n  /**\n   * Return the storage used.\n   */\n  private getStorage(): StorageAbstract | undefined {\n    if (typeof window !== 'undefined') {\n      return new LocalStorage(window.localStorage);\n    }\n    return undefined;\n  }\n\n  /**\n   * Setup the default connector from the storage.\n   */\n  private async setDefaultConnector(): Promise<boolean | undefined> {\n    const connectorName =\n      (await this._storage?.getItem(Fuel.STORAGE_KEY)) || this._connectors[0]?.name;\n    if (connectorName) {\n      // Setup all events for the current connector\n      return this.selectConnector(connectorName, {\n        emitEvents: false,\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Start listener for all the events of the current\n   * connector and emit them to the Fuel instance\n   */\n  private setupConnectorEvents(events: string[]): void {\n    if (!this._currentConnector) {\n      return;\n    }\n    const currentConnector = this._currentConnector;\n    this._unsubscribes.map((unSub) => unSub());\n    this._unsubscribes = events.map((event) => {\n      const handler = (...args: unknown[]) => this.emit(event, ...args);\n      currentConnector.on(event as FuelConnectorEventsType, handler);\n      return () => currentConnector.off(event, handler);\n    });\n  }\n\n  /**\n   * Call method from the current connector.\n   */\n  private async callMethod(method: string, ...args: unknown[]) {\n    const hasConnector = await this.hasConnector();\n    await this.pingConnector();\n    if (!this._currentConnector || !hasConnector) {\n      throw new FuelError(\n        ErrorCode.MISSING_CONNECTOR,\n        `No connector selected for calling ${method}. Use hasConnector before executing other methods.`\n      );\n    }\n    if (typeof this._currentConnector[method as keyof FuelConnector] === 'function') {\n      return (this._currentConnector[method as keyof FuelConnector] as CallableFunction)(...args);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Create a method for each method proxy that is available on the Common interface\n   * and call the method from the current connector.\n   */\n  private setupMethods(): void {\n    Object.values(FuelConnectorMethods).forEach((method) => {\n      this[method] = async (...args: unknown[]) => this.callMethod(method, ...args);\n    });\n  }\n\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status.\n   */\n  private async fetchConnectorStatus(\n    connector: FuelConnector & { _latestUpdate?: number }\n  ): Promise<Status> {\n    // Control fetch status to avoid rewriting the status\n    // on late responses in this way even if a response is\n    // late we can avoid rewriting the status of the connector\n    const requestTimestamp = Date.now();\n    const [isConnected, ping] = await Promise.allSettled([\n      withTimeout(connector.isConnected()),\n      withTimeout(this.pingConnector(connector)),\n    ]);\n    // If the requestTimestamp is greater than the latest update\n    // we can ignore the response as is treated as stale.\n    const isStale = requestTimestamp < (connector._latestUpdate || 0);\n    if (!isStale) {\n      // eslint-disable-next-line no-param-reassign\n      connector._latestUpdate = Date.now();\n      // eslint-disable-next-line no-param-reassign\n      connector.installed = ping.status === 'fulfilled' && ping.value;\n      // eslint-disable-next-line no-param-reassign\n      connector.connected = isConnected.status === 'fulfilled' && isConnected.value;\n    }\n    return {\n      installed: connector.installed,\n      connected: connector.connected,\n    };\n  }\n\n  /**\n   * Fetch the status of all connectors and set the installed and connected\n   * status.\n   */\n  private async fetchConnectorsStatus(): Promise<Status[]> {\n    return Promise.all(\n      this._connectors.map(async (connector) => this.fetchConnectorStatus(connector))\n    );\n  }\n\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status. If no connector is provided it will ping the current connector.\n   */\n  private async pingConnector(connector?: FuelConnector) {\n    const curConnector = connector || this._currentConnector;\n    if (!curConnector) {\n      return false;\n    }\n    // If finds a ping in the cache and the value is true\n    // return from cache\n    try {\n      return await cacheFor(async () => withTimeout(curConnector.ping()), {\n        key: curConnector.name,\n        cache: this._pingCache,\n        cacheTime: PING_CACHE_TIME,\n      })();\n    } catch {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Current connector is not available.');\n    }\n  }\n\n  /**\n   * Setup a listener for the FuelConnector event and add the connector\n   * to the list of new connectors.\n   */\n  private setupConnectorListener = () => {\n    const { _targetObject: targetObject } = this;\n    const eventName = FuelConnectorEventType;\n    if (targetObject?.on) {\n      targetObject.on(eventName, this.addConnector);\n      return () => {\n        targetObject.off?.(eventName, this.addConnector);\n      };\n    }\n    if (targetObject?.addEventListener) {\n      const handler = (e: CustomEvent<FuelConnector>) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.addConnector(e.detail);\n      };\n      targetObject.addEventListener(eventName, handler);\n      return () => {\n        targetObject.removeEventListener?.(eventName, handler);\n      };\n    }\n    return () => {};\n  };\n\n  /**\n   * Add a new connector to the list of connectors.\n   */\n  private addConnector = async (connector: FuelConnector): Promise<void> => {\n    if (!this.getConnector(connector)) {\n      this._connectors.push(connector);\n    }\n    // Fetch the status of the new connector\n    await this.fetchConnectorStatus(connector);\n    // Emit connectors events once the connector list changes\n    this.emit(this.events.connectors, this._connectors);\n    // If the current connector is not set\n    if (!this._currentConnector) {\n      // set the new connector as currentConnector\n      await this.selectConnector(connector.name, {\n        emitEvents: false,\n      });\n    }\n  };\n\n  private triggerConnectorEvents = async () => {\n    const [isConnected, networks, currentNetwork] = await Promise.all([\n      this.isConnected(),\n      this.networks(),\n      this.currentNetwork(),\n    ]);\n    this.emit(this.events.connection, isConnected);\n    this.emit(this.events.networks, networks);\n    this.emit(this.events.currentNetwork, currentNetwork);\n    if (isConnected) {\n      const [accounts, currentAccount] = await Promise.all([\n        this.accounts(),\n        this.currentAccount(),\n      ]);\n      this.emit(this.events.accounts, accounts);\n      this.emit(this.events.currentAccount, currentAccount);\n    }\n  };\n\n  /**\n   * Get a connector from the list of connectors.\n   */\n  getConnector = (connector: FuelConnector | string): FuelConnector | null =>\n    this._connectors.find((c) => {\n      const connectorName = typeof connector === 'string' ? connector : connector.name;\n      return c.name === connectorName || c === connector;\n    }) || null;\n\n  /**\n   * Return the list of connectors with the status of installed and connected.\n   */\n  async connectors(): Promise<Array<FuelConnector>> {\n    await this.fetchConnectorsStatus();\n    return this._connectors;\n  }\n\n  /**\n   * Set the current connector to be used.\n   */\n  async selectConnector(\n    connectorName: string,\n    options: FuelConnectorSelectOptions = {\n      emitEvents: true,\n    }\n  ): Promise<boolean> {\n    const connector = this.getConnector(connectorName);\n    if (!connector) {\n      return false;\n    }\n    if (this._currentConnector?.name === connectorName) {\n      return true;\n    }\n    const { installed } = await this.fetchConnectorStatus(connector);\n    if (installed) {\n      this._currentConnector = connector;\n      this.emit(this.events.currentConnector, connector);\n      this.setupConnectorEvents(Object.values(FuelConnectorEventTypes));\n      await this._storage?.setItem(Fuel.STORAGE_KEY, connector.name);\n      // If emitEvents is true we query all the data from the connector\n      // and emit the events to the Fuel instance allowing the application to\n      // react to changes in the connector state.\n      if (options.emitEvents) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.triggerConnectorEvents();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Return the current selected connector.\n   */\n  currentConnector(): FuelConnector | null | undefined {\n    return this._currentConnector;\n  }\n\n  /**\n   * Return true if any connector is available.\n   */\n  async hasConnector(): Promise<boolean> {\n    // If there is a current connector return true\n    // as the connector is ready\n    if (this._currentConnector) {\n      return true;\n    }\n    // If there is no current connector\n    // wait for the current connector to be set\n    // for 1 second and return false if is not set\n    const defer = deferPromise<boolean>();\n    this.once(this.events.currentConnector, () => {\n      defer.resolve(true);\n    });\n    // As the max ping time is 1 second we wait for 2 seconds\n    // to allow applications to react to the current connector\n    return withTimeout(defer.promise, HAS_CONNECTOR_TIMEOUT)\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  async hasWallet(): Promise<boolean> {\n    return this.hasConnector();\n  }\n\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   *\n   * @deprecated getProvider is deprecated and is going to be removed in the future, use getWallet instead.\n   */\n  async getProvider(providerOrNetwork?: Provider | Network): Promise<Provider> {\n    warn(\n      'getProvider is deprecated and is going to be removed in the future, use getWallet instead.'\n    );\n    return this._getProvider(providerOrNetwork);\n  }\n\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   */\n  private async _getProvider(providerOrNetwork?: Provider | Network): Promise<Provider> {\n    // Decide which provider to use based on the providerOrNetwork\n    let provider: Provider;\n    // If provider is a valid instance of a Provider use it\n    if (providerOrNetwork && 'getTransactionResponse' in providerOrNetwork) {\n      provider = providerOrNetwork;\n      // If the provided param is a valid network use it\n    } else if (providerOrNetwork && 'chainId' in providerOrNetwork && 'url' in providerOrNetwork) {\n      provider = new Provider(providerOrNetwork.url);\n      // If nor provider or network is provided use the current network\n    } else if (!providerOrNetwork) {\n      const currentNetwork = await this.currentNetwork();\n      provider = new Provider(currentNetwork.url);\n      // If a provider or network was informed but is not valid\n      // throw an error\n    } else {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Provider is not valid.');\n    }\n    return provider;\n  }\n\n  /**\n   * Return a Fuel Wallet Locked instance with extends features to work with\n   * connectors.\n   */\n  async getWallet(\n    address: string | Address,\n    providerOrNetwork?: Provider | Network\n  ): Promise<Account> {\n    const provider = await this._getProvider(providerOrNetwork);\n    return new Account(address, provider, this);\n  }\n\n  /**\n   * Remove all open listeners this is useful when you want to\n   * remove the Fuel instance and avoid memory leaks.\n   */\n  unsubscribe(): void {\n    // Unsubscribe from all events\n    this._unsubscribes.map((unSub) => unSub());\n    this._targetUnsubscribe();\n    // Remove all listeners from fuel instance\n    this.removeAllListeners();\n  }\n\n  /**\n   * Clean all the data from the storage.\n   */\n  async clean(): Promise<void> {\n    await this._storage?.removeItem(Fuel.STORAGE_KEY);\n  }\n\n  /**\n   * Removes all listeners and cleans the storage.\n   */\n  async destroy(): Promise<void> {\n    this.unsubscribe();\n    await this.clean();\n  }\n}\n","/* eslint-disable @typescript-eslint/require-await */\nimport { FuelError } from '@fuel-ts/errors';\nimport type { HashableMessage } from '@fuel-ts/hasher';\nimport { EventEmitter } from 'events';\n\nimport type { Asset } from '../assets/types';\nimport type { TransactionRequestLike, TransactionResponse } from '../providers';\n\nimport { FuelConnectorEventTypes } from './types';\nimport type {\n  FuelConnectorEvents,\n  ConnectorMetadata,\n  FuelABI,\n  Network,\n  FuelEventArg,\n  Version,\n  SelectNetworkArguments,\n  FuelConnectorSendTxParams,\n} from './types';\n\ninterface Connector {\n  // #region fuel-connector-method-ping\n  ping(): Promise<boolean>;\n  // #endregion fuel-connector-method-ping\n  // #region fuel-connector-method-version\n  version(): Promise<Version>;\n  // #endregion fuel-connector-method-version\n  // #region fuel-connector-method-isConnected\n  isConnected(): Promise<boolean>;\n  // #endregion fuel-connector-method-isConnected\n  // #region fuel-connector-method-accounts\n  accounts(): Promise<Array<string>>;\n  // #endregion fuel-connector-method-accounts\n  // #region fuel-connector-method-connect\n  connect(): Promise<boolean>;\n  // #endregion fuel-connector-method-connect\n  // #region fuel-connector-method-disconnect\n  disconnect(): Promise<boolean>;\n  // #endregion fuel-connector-method-disconnect\n  // #region fuel-connector-method-signMessage\n  signMessage(address: string, message: HashableMessage): Promise<string>;\n  // #endregion fuel-connector-method-signMessage\n  // #region fuel-connector-method-signTransaction\n  signTransaction(address: string, transaction: TransactionRequestLike): Promise<string>;\n  // #endregion fuel-connector-method-signTransaction\n  // #region fuel-connector-method-sendTransaction\n  sendTransaction(\n    address: string,\n    transaction: TransactionRequestLike,\n    params?: FuelConnectorSendTxParams\n  ): Promise<string | TransactionResponse>;\n  // #endregion fuel-connector-method-sendTransaction\n  // #region fuel-connector-method-currentAccount\n  currentAccount(): Promise<string | null>;\n  // #endregion fuel-connector-method-currentAccount\n  // #region fuel-connector-method-addAssets\n  addAssets(assets: Array<Asset>): Promise<boolean>;\n  // #endregion fuel-connector-method-addAssets\n  // #region fuel-connector-method-addAsset\n  addAsset(asset: Asset): Promise<boolean>;\n  // #endregion fuel-connector-method-addAsset\n  // #region fuel-connector-method-assets\n  assets(): Promise<Array<Asset>>;\n  // #endregion fuel-connector-method-assets\n  // #region fuel-connector-method-addNetwork\n  addNetwork(networkUrl: string): Promise<boolean>;\n  // #endregion fuel-connector-method-addNetwork\n  // #region fuel-connector-method-selectNetwork\n  selectNetwork(network: SelectNetworkArguments): Promise<boolean>;\n  // #endregion fuel-connector-method-selectNetwork\n  // #region fuel-connector-method-networks\n  networks(): Promise<Array<Network>>;\n  // #endregion fuel-connector-method-networks\n  // #region fuel-connector-method-currentNetwork\n  currentNetwork(): Promise<Network>;\n  // #endregion fuel-connector-method-currentNetwork\n  // #region fuel-connector-method-addABI\n  addABI(contractId: string, abi: FuelABI): Promise<boolean>;\n  // #endregion fuel-connector-method-addABI\n  // #region fuel-connector-method-getABI\n  getABI(contractId: string): Promise<FuelABI | null>;\n  // #endregion fuel-connector-method-getABI\n  // #region fuel-connector-method-hasABI\n  hasABI(contractId: string): Promise<boolean>;\n  // #endregion fuel-connector-method-hasABI\n}\n\n/**\n * @name FuelConnector\n *\n * Wallet Connector is a interface that represents a Wallet Connector and all the methods\n * that should be implemented to be compatible with the Fuel SDK.\n */\nexport abstract class FuelConnector extends EventEmitter implements Connector {\n  name: string = '';\n  metadata: ConnectorMetadata = {} as ConnectorMetadata;\n  connected: boolean = false;\n  installed: boolean = false;\n  external: boolean = true;\n  events = FuelConnectorEventTypes;\n\n  /**\n   * Should return true if the connector is loaded\n   * in less then one second.\n   *\n   * @returns Always true.\n   */\n  async ping(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current version of the connector\n   * and the network version that is compatible.\n   *\n   * @returns boolean - connection status.\n   */\n  async version(): Promise<Version> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return true if the connector is connected\n   * to any of the accounts available.\n   *\n   * @returns The connection status.\n   */\n  async isConnected(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the accounts authorized for the\n   * current connection.\n   *\n   * @returns The accounts addresses strings\n   */\n  async accounts(): Promise<Array<string>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the connection process and return\n   * true if the account authorize the connection.\n   *\n   * and return false if the user reject the connection.\n   *\n   * @emits accounts\n   * @returns boolean - connection status.\n   */\n  async connect(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should disconnect the current connection and\n   * return false if the disconnection was successful.\n   *\n   * @emits assets connection\n   * @returns The connection status.\n   */\n  async disconnect(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the sign message process and return\n   * the signed message.\n   *\n   * @param address - The address to sign the message\n   * @param message - The message to sign all text will be treated as text utf-8\n   *\n   * @returns Message signature\n   */\n  async signMessage(_address: string, _message: HashableMessage): Promise<string> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the sign transaction process and return\n   * the signed transaction.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to sign\n   *\n   * @returns Transaction signature\n   */\n  async signTransaction(_address: string, _transaction: TransactionRequestLike): Promise<string> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the send transaction process and return\n   * the transaction id submitted to the network.\n   *\n   * If the network is not available for the connection\n   * it should throw an error to avoid the transaction\n   * to be sent to the wrong network and lost.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to send\n   * @param params - Optional parameters to send the transaction\n   * @returns The transaction id or transaction response\n   */\n  async sendTransaction(\n    _address: string,\n    _transaction: TransactionRequestLike,\n    _params?: FuelConnectorSendTxParams\n  ): Promise<string | TransactionResponse> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current account selected inside the connector, if the account\n   * is authorized for the connection.\n   *\n   * If the account is not authorized it should return null.\n   *\n   * @returns The current account selected otherwise null.\n   */\n  async currentAccount(): Promise<string | null> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the assets metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param assets - The assets to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAssets(_assets: Array<Asset>): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the asset metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param asset - The asset to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAsset(_asset: Asset): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the assets added to the connector. If a connection is already established.\n   *\n   * @returns Array of assets metadata from the connector vinculated to the all accounts from a specific Wallet.\n   */\n  async assets(): Promise<Array<Asset>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the add network process and return true if the network was added successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param networkUrl - The URL of the network to be added.\n   * @returns Return true if the network was added successfully\n   */\n  async addNetwork(_networkUrl: string): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the select network process and return true if the network has change successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param network - The network to be selected.\n   * @returns Return true if the network was added successfully\n   */\n  async selectNetwork(_network: SelectNetworkArguments): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the networks available from the connector. If the connection is already established.\n   *\n   * @returns Return all the networks added to the connector.\n   */\n  async networks(): Promise<Array<Network>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current network selected inside the connector. Even if the connection is not established.\n   *\n   * @returns Return the current network selected inside the connector.\n   */\n  async currentNetwork(): Promise<Network> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the ABI to the connector and return true if the ABI was added successfully.\n   *\n   * @param contractId - The contract id to add the ABI.\n   * @param abi - The JSON ABI that represents a contract.\n   * @returns Return true if the ABI was added successfully.\n   */\n  async addABI(_contractId: string, _abi: FuelABI): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the ABI from the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the ABI.\n   * @returns The ABI if it exists, otherwise return null.\n   */\n  async getABI(_id: string): Promise<FuelABI | null> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return true if the abi exists in the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the abi\n   * @returns Returns true if the abi exists or false if not.\n   */\n  async hasABI(_id: string): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Event listener for the connector.\n   *\n   * @param eventName - The event name to listen\n   * @param listener - The listener function\n   */\n  override on<E extends FuelConnectorEvents['type'], D extends FuelEventArg<E>>(\n    eventName: E,\n    listener: (data: D) => void\n  ): this {\n    super.on(eventName, listener);\n    return this;\n  }\n}\n","export enum FuelConnectorMethods {\n  // General methods\n  ping = 'ping',\n  version = 'version',\n  // Connection methods\n  connect = 'connect',\n  disconnect = 'disconnect',\n  isConnected = 'isConnected',\n  // Account methods\n  accounts = 'accounts',\n  currentAccount = 'currentAccount',\n  // Signature methods\n  signMessage = 'signMessage',\n  sendTransaction = 'sendTransaction',\n  // Assets metadata methods\n  assets = 'assets',\n  addAsset = 'addAsset',\n  addAssets = 'addAssets',\n  // Network methods\n  networks = 'networks',\n  currentNetwork = 'currentNetwork',\n  addNetwork = 'addNetwork',\n  selectNetwork = 'selectNetwork',\n  // ABI methods\n  addABI = 'addABI',\n  getABI = 'getABI',\n  hasABI = 'hasABI',\n}\n\nexport enum FuelConnectorEventTypes {\n  connectors = 'connectors',\n  currentConnector = 'currentConnector',\n  connection = 'connection',\n  accounts = 'accounts',\n  currentAccount = 'currentAccount',\n  networks = 'networks',\n  currentNetwork = 'currentNetwork',\n  assets = 'assets',\n  abis = 'abis',\n}\n\nexport const FuelConnectorEventType = 'FuelConnector';\n","/* eslint-disable @typescript-eslint/require-await */\nimport type { StorageAbstract } from '../../wallet-manager';\n\nexport class LocalStorage implements StorageAbstract {\n  private storage: Storage;\n\n  constructor(localStorage: Storage) {\n    this.storage = localStorage;\n  }\n\n  async setItem(key: string, value: string): Promise<void> {\n    this.storage.setItem(key, value);\n  }\n\n  async getItem(key: string): Promise<string | null | undefined> {\n    return this.storage.getItem(key);\n  }\n\n  async removeItem(key: string): Promise<void> {\n    this.storage.removeItem(key);\n  }\n\n  async clear(): Promise<void> {\n    this.storage.clear();\n  }\n}\n","/* eslint-disable no-param-reassign */\n\nexport type CacheFor = {\n  [key: string]: {\n    timeout: number;\n    value: unknown;\n  } | null;\n};\n\ntype CacheForOptions = {\n  key: string;\n  cache: CacheFor;\n  cacheTime: number;\n};\n\nexport function cacheFor<F extends (...args: unknown[]) => Promise<unknown>>(\n  fn: F,\n  { cache, cacheTime, key }: CacheForOptions\n): F {\n  return (async (...args: unknown[]) => {\n    if (cache[key] && cache[key]?.value) {\n      return cache[key]?.value as ReturnType<F>;\n    }\n    clearTimeout(cache[key]?.timeout);\n    const result = await fn(...args);\n\n    // Create cache auto clean\n\n    cache[key] = {\n      timeout: Number(\n        setTimeout(() => {\n          cache[key] = null;\n        }, cacheTime)\n      ),\n      value: result,\n    };\n\n    return result;\n  }) as F;\n}\n","import type { FuelConnector } from '../fuel-connector';\nimport { FuelConnectorEventType } from '../types';\n\n/**\n * Fuel Connector Event is a custom event that can be used by the connector to\n * inform the Fuel Connector Manager that a new connector is available.\n */\nexport function dispatchFuelConnectorEvent(connector: FuelConnector) {\n  window.dispatchEvent(\n    new CustomEvent(FuelConnectorEventType, {\n      detail: connector,\n    })\n  );\n}\n","import { FuelError } from '@fuel-ts/errors';\n\n// eslint-disable-next-line eslint-comments/disable-enable-pair\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport type DeferPromise<R = unknown> = {\n  promise: Promise<R>;\n  resolve: (value: R) => void;\n  reject: (error: unknown) => void;\n};\n\nexport function deferPromise<R = unknown>() {\n  const defer: DeferPromise<R> = {} as any;\n\n  defer.promise = new Promise((resolve, reject) => {\n    defer.reject = reject;\n    defer.resolve = resolve;\n  });\n\n  return defer;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function withTimeout<F extends Promise<unknown>, RT = Awaited<F>>(\n  promise: F,\n  timeout: number = 1050\n): Promise<RT> {\n  const timeoutPromise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new FuelError(FuelError.CODES.TIMEOUT_EXCEEDED, 'Promise timed out'));\n    }, timeout);\n  });\n  return Promise.race([timeoutPromise, promise]) as any;\n}\n"],"mappings":";;;;AAAO,IAAM,YAAY;AAAA,EACvB,KAAK;AAAA,IACH,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAAA,EACA,MAAM;AAAA,IACJ,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AACF;;;ACGO,IAAM,oBAAoB,wBAAC,gBAAkD;AAClF,MAAI,gBAAgB,YAAY;AAC9B,WAAO,UAAU,IAAI;AAAA,EACvB;AACA,MAAI,gBAAgB,QAAQ;AAC1B,WAAO,UAAU,KAAK;AAAA,EACxB;AAEA,SAAO;AACT,GATiC;AAqB1B,IAAM,kBAAkB,wBAAqC;AAAA,EAClE;AAAA,EACA;AAAA,EACA;AACF,MAAyD;AACvD,QAAM,UAAU,MAAM,SAAS;AAAA,IAC7B,CAAC,SAAS,KAAK,YAAY,WAAW,KAAK,SAAS;AAAA,EACtD;AAEA,SAAO;AACT,GAV+B;AAgBxB,IAAM,sBAAsB,wBAAyB;AAAA,EAC1D;AAAA,EACA;AAAA,EACA;AACF,MAAkE;AAEhE,QAAM,EAAE,UAAU,GAAG,GAAG,UAAU,IAAI;AAEtC,QAAM,eAAe,WAAW,kBAAkB,WAAW;AAE7D,MAAI,iBAAiB,QAAW;AAC9B,WAAO;AAAA,EACT;AAEA,QAAM,eAAe,gBAAgB;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,IACT;AAAA,EACF,CAAC;AAED,MAAI,CAAC,cAAc;AACjB,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AACF,GA5BmC;AAiC5B,IAAM,cAAc,wBAAC,OAAc,YACxC,oBAAoB;AAAA,EAClB;AAAA,EACA,aAAa;AAAA,EACb;AACF,CAAC,GALwB;AAUpB,IAAM,eAAe,wBAAC,OAAc,YACzC,oBAAoB;AAAA,EAClB;AAAA,EACA,aAAa;AAAA,EACb;AACF,CAAC,GALyB;;;AC9F5B,IAAM,iBAAiB;AACvB,IAAM,YAAY;AAClB,IAAM,WAAW,wBAAC,OAAO,OAAO,KAAK,QAAQ,WAAW,EAAE,GAAzC;AAEV,SAAS,QAAQ,YAAgC,OAA8B;AACpF,QAAM,aAAa,YAAY,QAAQ,YAAY;AACnD,QAAM,WAAW,UAAU,CAAC,MAAM,OAAO,QAAQ,SAAS;AAC1D,QAAM,WAAW,CAAC,SAAS,GAAG,KAAK,EAAE,OAAO,OAAO,EAAE,IAAI,QAAQ;AACjE,MAAI,YAAY,YAAY;AAC1B,aAAS,QAAQ,EAAE;AAAA,EACrB;AACA,SAAO,SAAS,KAAK,cAAc;AACrC;AARgB;;;ACMT,SAAS,iBAAiBA,SAAgB,WAAmB,MAAM;AACxE,SAAOA,QAAO,IAAI,CAAC,WAAW;AAAA,IAC5B,GAAG;AAAA,IACH,MAAM,QAAQ,UAAU,MAAM,IAAI;AAAA,EACpC,EAAE;AACJ;AALgB;;;ACVT,IAAM,oBAAoB;;;ACK1B,IAAM,YAAoB;AAAA,EAC/B;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,MACR;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,IAAI;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS,UAAU,KAAK;AAAA,QACxB,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,SAAS,iBAAiB,WAAW,iBAAiB;;;ACrjBnE,IAAM,WAAW;AAAA,EACf,SAAS;AAAA,EACT,SAAS;AACX;AAUA,IAAM,UAAU,8BAAkB,KAAa,SAA4C;AACzF,QAAM,WAAW,MAAM,MAAM,GAAG,GAAG,GAAG,IAAI,IAAI;AAAA,IAC5C,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,UAAU;AAAA,IACZ;AAAA,EACF,CAAC;AAED,MAAI;AACF,WAAO,MAAM,SAAS,KAAK;AAAA,EAC7B,SAAS,OAAO;AAEd,WAAO;AAAA,EACT;AACF,GAdgB;AAgBhB,IAAM,mBAAmB,wBAAC,eAAoE;AAC5F,QAAM,QAAQ,IAAI,gBAAgB;AAClC,SAAO,QAAQ,UAAU,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACnD,UAAM,IAAI,KAAK,MAAM,SAAS,CAAC;AAAA,EACjC,CAAC;AACD,SAAO,MAAM,OAAO,IAAI,IAAI,MAAM,SAAS,CAAC,KAAK;AACnD,GANyB;AAwClB,IAAM,eAAe,wBAAC,SAGI;AAC/B,QAAM,EAAE,UAAU,WAAW,QAAQ,IAAI;AACzC,QAAM,MAAM,SAAS,OAAO;AAC5B,SAAO,QAAmB,KAAK,WAAW,OAAO,EAAE;AACrD,GAP4B;AAyBrB,IAAM,mBAAmB,8BAAO,SAIT;AAC5B,QAAM,EAAE,UAAU,WAAW,OAAO,aAAa,EAAE,MAAM,GAAG,EAAE,IAAI;AAClE,QAAM,MAAM,SAAS,OAAO;AAC5B,QAAM,EAAE,KAAK,IAAI;AACjB,QAAM,cAAc,iBAAiB,EAAE,KAAK,CAAC;AAC7C,QAAM,WAAW,MAAM,QAAuB,KAAK,aAAa,KAAK,UAAU,WAAW,EAAE;AAG5F,MAAI,CAAC,UAAU;AACb,WAAO,EAAE,MAAM,CAAC,GAAG,UAAU,EAAE,OAAO,EAAE,EAAE;AAAA,EAC5C;AAEA,SAAO;AACT,GAjBgC;;;AChGhC,SAAS,eAAAC,oBAAmB;AAE5B,SAAS,WAAAC,gBAAe;AACxB,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAErC,SAAS,MAAAC,YAAU;AAEnB,SAAS,aAAAC,YAAW,cAAAC,mBAAkB;AAEtC,SAAS,YAAAC,YAAU,WAAAC,WAAS,aAAAC,kBAAiB;AAC7C,SAAS,SAAAC,cAAa;;;ACXtB,SAAS,UAAU;AAEnB,SAAS,eAAe;AAQjB,IAAM,iBAAiB,wBAAC,qBAAqD;AAClF,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI,MAAM,QAAQ,gBAAgB,GAAG;AACnC,aAAS,iBAAiB,CAAC;AAC3B,cAAU,iBAAiB,CAAC;AAC5B,UAAM,iBAAiB,CAAC,KAAK;AAAA,EAC/B,OAAO;AACL,aAAS,iBAAiB;AAC1B,cAAU,iBAAiB;AAC3B,UAAM,iBAAiB,OAAO;AAAA,EAChC;AAEA,SAAO;AAAA,IACL,SAAS,QAAQ,OAAO;AAAA,IACxB,QAAQ,GAAG,MAAM;AAAA,IACjB,KAAK,MAAM,GAAG,GAAG,IAAI;AAAA,EACvB;AACF,GAnB8B;AA2BvB,IAAM,4BAA4B,wBAAC,WAAoD;AAC5F,QAAM,EAAE,QAAQ,QAAQ,IAAI;AAE5B,QAAM,iBAAiB,CAAC,GAAG,OAAO,cAAc;AAEhD,QAAM,WAAW,eAAe,UAAU,CAAC,iBAAiB,aAAa,YAAY,OAAO;AAE5F,MAAI,aAAa,IAAI;AACnB,mBAAe,QAAQ,EAAE,SAAS,eAAe,QAAQ,EAAE,OAAO,IAAI,MAAM;AAAA,EAC9E,OAAO;AACL,mBAAe,KAAK,EAAE,SAAS,OAAO,CAAC;AAAA,EACzC;AAEA,SAAO;AACT,GAdyC;;;ACrCzC,SAAS,WAAAC,UAAS,cAAc;AAChC,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAErC,SAAS,MAAAC,YAAU;AAEnB,SAAS,qBAAAC,oBAAmB,oBAAAC,mBAAkB,mBAAAC,yBAAuB;AAErE,SAAS,YAAAC,YAAU,WAAAC,WAAS,YAAAC,WAAU,aAAAC,YAAW,SAAAC,cAAa;AAC9D,SAAS,mCAAmC,gBAAgB;AAE5D,SAAS,qBAAqB;AAE9B,OAAOC,UAAS;AAChB,SAAS,SAAAC,cAAa;;;ACbtB,OAAO,SAAS;AA65DT,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc7B,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAchC,IAAM,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUjC,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ9B,IAAM,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQlC,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhC,IAAM,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQlC,IAAM,mCAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOzC,IAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAMnC,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgC3B,IAAM,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAclC,kBAAkB;AACjB,IAAM,sCAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAO7C,wBAAwB;AACvB,IAAM,wCAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyC9C,IAAM,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWlC,kBAAkB;AACjB,IAAM,sCAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAO7C,wBAAwB;AACvB,IAAM,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAMrC,IAAM,0CAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAuCjD,kBAAkB;AACjB,IAAM,0CAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAwCjD,kBAAkB;AACjB,IAAM,2CAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA2BlD,0BAA0B;AAAA,EAC9B,mCAAmC;AAAA,EACnC,qCAAqC;AAAA,EACrC,mCAAmC;AAAA,EACnC,4BAA4B;AAAA,EAC5B,uCAAuC;AAAA,EACvC,uCAAuC;AAClC,IAAM,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAetC,0BAA0B;AAAA,EAC9B,wBAAwB;AAAA,EACxB,wBAAwB;AAAA,EACxB,4BAA4B;AACvB,IAAM,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQhC,4BAA4B;AAC3B,IAAM,mCAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAMzC,IAAM,qCAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU3C,IAAM,2CAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMlD,kCAAkC;AACjC,IAAM,qCAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ5C,kBAAkB;AACjB,IAAM,qCAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAO5C,kBAAkB;AACjB,IAAM,iCAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYvC,IAAM,iCAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWvC,IAAM,qCAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAS5C,8BAA8B;AAAA,EAClC,8BAA8B;AACzB,IAAM,8CAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUrD,kCAAkC;AAAA,EACtC,kBAAkB;AACb,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBzB,IAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUxB,IAAM,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW/B,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS3B,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,MAK/B,kBAAkB;AACjB,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDhC,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWhC,IAAM,iCAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASvC,IAAM,8BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpC,IAAM,gCAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOtC,IAAM,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjC,IAAM,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcjC,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAiB7B,wBAAwB;AACvB,IAAM,iCAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAwBxC,uBAAuB;AAAA,EAC3B,8BAA8B;AAAA,EAC9B,2BAA2B;AAAA,EAC3B,6BAA6B;AAAA,EAC7B,wBAAwB;AAAA,EACxB,mBAAmB;AACd,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAa9B,8BAA8B;AAC7B,IAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOnC,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ5B,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc5B,IAAM,sCAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ5C,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO3B,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM7B,mBAAmB;AAClB,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM1B,oBAAoB;AACnB,IAAM,8BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASrC,oBAAoB;AAAA,EACxB,mBAAmB;AACd,IAAM,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhC,sBAAsB;AACrB,IAAM,qCAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA2B5C,0BAA0B;AAAA,EAC9B,mCAAmC;AAAA,EACnC,mCAAmC;AAAA,EACnC,4BAA4B;AAAA,EAC5B,uCAAuC;AAAA,EACvC,uCAAuC;AAClC,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAajC,mBAAmB;AAClB,IAAM,iCAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBxC,mBAAmB;AAAA,EACvB,sBAAsB;AACjB,IAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMpC,wCAAwC;AACvC,IAAM,wCAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAS/C,wCAAwC;AACvC,IAAM,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQhC,gBAAgB;AACf,IAAM,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASrC,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM1B,gBAAgB;AACf,IAAM,mCAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAS1C,gBAAgB;AAAA,EACpB,gCAAgC;AAC3B,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAa3B,mBAAmB;AAAA,EACvB,gBAAgB;AACX,IAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOzB,eAAe;AACd,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmB1B,mBAAmB;AAAA,EACvB,eAAe;AACV,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWjC,eAAe;AAAA,EACnB,sBAAsB;AACjB,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ5B,IAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMpC,0BAA0B;AACzB,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO3B,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO7B,IAAM,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlC,IAAM,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjC,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkB5B,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoB/B,mBAAmB;AAClB,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmB7B,mBAAmB;AAAA,EACvB,qBAAqB;AAChB,IAAM,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlC,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWjC,uBAAuB;AACtB,IAAM,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjC,IAAM,sCAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM7C,mCAAmC;AAClC,IAAM,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAShC,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA6D5B,oBAAoB;AAAA,EACxB,wBAAwB;AAAA,EACxB,uBAAuB;AAAA,EACvB,qBAAqB;AAAA,EACrB,yBAAyB;AAAA,EACzB,uBAAuB;AAAA,EACvB,yBAAyB;AAAA,EACzB,gCAAgC;AAAA,EAChC,kCAAkC;AAAA,EAClC,kCAAkC;AAC7B,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUxB,2CAA2C;AAC1C,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOvB,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ9B,IAAM,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMnC,kBAAkB;AACjB,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa9B,IAAM,wCAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW9C,IAAM,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUtC,wCAAwC;AACvC,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAS9B,wCAAwC;AAEvC,SAAS,OAAU,WAAyB;AACjD,SAAO;AAAA,IACL,WAAW,WAAyC,SAA0C;AAC5F,aAAO,UAA2D,oBAAoB,WAAW,OAAO;AAAA,IAC1G;AAAA,IACA,YAAY,WAA0C,SAA2C;AAC/F,aAAO,UAA6D,qBAAqB,WAAW,OAAO;AAAA,IAC7G;AAAA,IACA,SAAS,WAAuC,SAAwC;AACtF,aAAO,UAAuD,kBAAkB,WAAW,OAAO;AAAA,IACpG;AAAA,IACA,oBAAoB,WAAkD,SAAmD;AACvH,aAAO,UAA6E,6BAA6B,WAAW,OAAO;AAAA,IACrI;AAAA,IACA,eAAe,WAA4C,SAA8C;AACvG,aAAO,UAAmE,wBAAwB,WAAW,OAAO;AAAA,IACtH;AAAA,IACA,2BAA2B,WAAwD,SAA0D;AAC3I,aAAO,UAA2F,oCAAoC,WAAW,OAAO;AAAA,IAC1J;AAAA,IACA,gBAAgB,WAA8C,SAA+C;AAC3G,aAAO,UAAqE,yBAAyB,WAAW,OAAO;AAAA,IACzH;AAAA,IACA,uBAAuB,WAAoD,SAAsD;AAC/H,aAAO,UAAmF,gCAAgC,WAAW,OAAO;AAAA,IAC9I;AAAA,IACA,mBAAmB,WAAgD,SAAkD;AACnH,aAAO,UAA2E,4BAA4B,WAAW,OAAO;AAAA,IAClI;AAAA,IACA,8BAA8B,WAA2D,SAA6D;AACpJ,aAAO,UAAiG,uCAAuC,WAAW,OAAO;AAAA,IACnK;AAAA,IACA,eAAe,WAA6C,SAA8C;AACxG,aAAO,UAAmE,wBAAwB,WAAW,OAAO;AAAA,IACtH;AAAA,IACA,qBAAqB,WAAmD,SAAoD;AAC1H,aAAO,UAA+E,8BAA8B,WAAW,OAAO;AAAA,IACxI;AAAA,IACA,SAAS,WAAuC,SAAwC;AACtF,aAAO,UAAuD,kBAAkB,WAAW,OAAO;AAAA,IACpG;AAAA,IACA,yBAAyB,WAAuD,SAAwD;AACtI,aAAO,UAAuF,kCAAkC,WAAW,OAAO;AAAA,IACpJ;AAAA,IACA,UAAU,WAAwC,SAAyC;AACzF,aAAO,UAAyD,mBAAmB,WAAW,OAAO;AAAA,IACvG;AAAA,IACA,QAAQ,WAAqC,SAAuC;AAClF,aAAO,UAAqD,iBAAiB,WAAW,OAAO;AAAA,IACjG;AAAA,IACA,SAAS,WAAsC,SAAwC;AACrF,aAAO,UAAuD,kBAAkB,WAAW,OAAO;AAAA,IACpG;AAAA,IACA,gBAAgB,WAA6C,SAA+C;AAC1G,aAAO,UAAqE,yBAAyB,WAAW,OAAO;AAAA,IACzH;AAAA,IACA,YAAY,WAAyC,SAA2C;AAC9F,aAAO,UAA6D,qBAAqB,WAAW,OAAO;AAAA,IAC7G;AAAA,IACA,mBAAmB,WAAgD,SAAkD;AACnH,aAAO,UAA2E,4BAA4B,WAAW,OAAO;AAAA,IAClI;AAAA,IACA,WAAW,WAAwC,SAA0C;AAC3F,aAAO,UAA2D,oBAAoB,WAAW,OAAO;AAAA,IAC1G;AAAA,IACA,aAAa,WAA0C,SAA4C;AACjG,aAAO,UAA+D,sBAAsB,WAAW,OAAO;AAAA,IAChH;AAAA,IACA,kBAAkB,WAAgD,SAAiD;AACjH,aAAO,UAAyE,2BAA2B,WAAW,OAAO;AAAA,IAC/H;AAAA,IACA,iBAAiB,WAA8C,SAAgD;AAC7G,aAAO,UAAuE,0BAA0B,WAAW,OAAO;AAAA,IAC5H;AAAA,IACA,YAAY,WAAyC,SAA2C;AAC9F,aAAO,UAA6D,qBAAqB,WAAW,OAAO;AAAA,IAC7G;AAAA,IACA,cAAc,WAA2C,SAA6C;AACpG,aAAO,UAAiE,uBAAuB,WAAW,OAAO;AAAA,IACnH;AAAA,IACA,YAAY,WAAyC,SAA2C;AAC9F,aAAO,UAA6D,qBAAqB,WAAW,OAAO;AAAA,IAC7G;AAAA,IACA,kBAAkB,WAA+C,SAAiD;AAChH,aAAO,UAAyE,2BAA2B,WAAW,OAAO;AAAA,IAC/H;AAAA,IACA,gBAAgB,WAA6C,SAA+C;AAC1G,aAAO,UAAqE,yBAAyB,WAAW,OAAO;AAAA,IACzH;AAAA,IACA,iBAAiB,WAA8C,SAAgD;AAC7G,aAAO,UAAuE,0BAA0B,WAAW,OAAO;AAAA,IAC5H;AAAA,IACA,4BAA4B,WAAyD,SAA2D;AAC9I,aAAO,UAA6F,qCAAqC,WAAW,OAAO;AAAA,IAC7J;AAAA,IACA,gBAAgB,WAA6C,SAA+C;AAC1G,aAAO,UAAqE,yBAAyB,WAAW,OAAO;AAAA,IACzH;AAAA,IACA,WAAW,WAAwC,SAA0C;AAC3F,aAAO,UAA2D,oBAAoB,WAAW,OAAO;AAAA,IAC1G;AAAA,IACA,OAAO,WAAoC,SAAsC;AAC/E,aAAO,UAAmD,gBAAgB,WAAW,OAAO;AAAA,IAC9F;AAAA,IACA,OAAO,WAAuC,SAAyC;AACrF,aAAO,UAAyD,gBAAgB,WAAW,OAAO;AAAA,IACpG;AAAA,IACA,cAAc,WAA8C,SAAgD;AAC1G,aAAO,UAAuE,uBAAuB,WAAW,OAAO;AAAA,IACzH;AAAA,IACA,kBAAkB,WAA+C,SAAiD;AAChH,aAAO,UAAyE,2BAA2B,WAAW,OAAO;AAAA,IAC/H;AAAA,IACA,cAAc,WAA2C,SAA6C;AACpG,aAAO,UAAiE,uBAAuB,WAAW,OAAO;AAAA,IACnH;AAAA,IACA,8BAA8B,WAA4D,SAA6D;AACrJ,aAAO,UAAiG,uCAAuC,WAAW,OAAO;AAAA,IACnK;AAAA,IACA,qBAAqB,WAAyD,SAAiE;AAC7I,aAAO,UAA6F,8BAA8B,WAAW,OAAO;AAAA,IACtJ;AAAA,IACA,aAAa,WAAiD,SAAyD;AACrH,aAAO,UAA6E,sBAAsB,WAAW,OAAO;AAAA,IAC9H;AAAA,EACF;AACF;AA9HgB;;;ACllGhB,SAAS,WAAW,iBAAiB;AACrC,SAAS,MAAAC,WAAU;AAEnB,SAAS,uBAAuB;AAChC,SAAS,WAAAC,UAAS,iBAAiB;AAkC5B,IAAM,oCAAoC,wBAAC,YAAyC;AACzF,QAAM,oBAAgC,CAAC;AACvC,QAAM,qBAAqB,WAAW;AAEtC,MAAI,oBAAoB;AACtB,sBAAkB,YAAY;AAAA,MAC5B,WAAWC,SAAS,QAAsB,KAAK;AAAA,MAC/C,kBAAkB,QAAQ,QAAQ,OAAO;AAAA,MACzC,eAAeA,SAAS,QAAsB,iBAAiB,CAAC;AAAA,IAClE;AAAA,EACF,OAAO;AACL,sBAAkB,UAAU,QAAQ,QAAQ,OAAO;AAAA,EACrD;AAEA,SAAO;AACT,GAfiD;AAiB1C,IAAM,wCAAwC,8BAAqC,WAMxE;AAChB,QAAM,EAAE,UAAU,oBAAoB,aAAa,WAAW,SAAS,IAAI;AAE3E,QAAM,oBAAoB,UAAU,WAAW;AAC/C,QAAM,kBAAkB,UAAU,SAAS;AAC3C,QAAM,aAAa,mBAAmB,SAAS,gBAAgB;AAE/D,MAAI,qBAAqB,YAAY;AACnC,UAAM,mBAAmB,mBAAmB;AAC5C,QAAIC,IAAG,WAAW,EAAE,GAAGA,IAAG,gBAAgB,CAAC,GAAG;AAC5C,YAAM,IAAI;AAAA,QACR,UAAU;AAAA,QACV,cAAc,WAAW,kCAAkC,gBAAgB;AAAA,MAC7E;AAAA,IACF;AAEA,uBAAmB,WAAWA,IAAG,WAAW;AAAA,EAC9C;AAEA,MAAI,iBAAiB;AACnB,UAAM,iBAAiB,mBAAmB;AAC1C,QAAIA,IAAG,SAAS,EAAE,GAAG,cAAc,GAAG;AACpC,YAAM,IAAI;AAAA,QACR,UAAU;AAAA,QACV,YAAY,SAAS,kCAAkC,cAAc;AAAA,MACvE;AAAA,IACF;AAEA,uBAAmB,SAASA,IAAG,SAAS;AAAA,EAC1C;AAEA,MAAI,qBAAqB,CAAC,iBAAiB;AACzC,UAAM,EAAE,QAAQ,eAAe,IAAI,MAAM,SAAS,oBAAoB;AAAA,MACpE;AAAA,MACA;AAAA,IACF,CAAC;AAED,uBAAmB,SAAS;AAAA,EAC9B;AAEA,SAAO;AACT,GA/CqD;;;ACvDrD,SAAS,aAAAC,YAAW,aAAAC,kBAAiB;AAErC,SAAS,aAAa;;;ACFtB,SAAS,aAAAC,YAAW,aAAAC,kBAAiB;AAGrC,IAAM,kBAAkB;AAAA,EACtB,iBACE;AAAA,EACF,4BACE;AAAA,EACF,iBAAiB;AAAA,EACjB,0BAA0B;AAAA,EAC1B,iCAAiC;AAAA,EACjC,yBAAyB;AAC3B;AAIA,IAAM,qBAAqB,wBAAC,UAA+B;AACzD,MAAI,gBAAgB,2BAA2B,KAAK,MAAM,OAAO,GAAG;AAClE,WAAO,IAAIC;AAAA,MACTC,WAAU;AAAA,MACV;AAAA,MACA,CAAC;AAAA,MACD;AAAA,IACF;AAAA,EACF;AAEA,MAAI,gBAAgB,yBAAyB,KAAK,MAAM,OAAO,GAAG;AAChE,UAAM,QAAQ,MAAM,QAAQ,MAAM,yBAAyB;AAC3D,UAAM,UAAU,QAAQ,CAAC,KAAK;AAC9B,WAAO,IAAID;AAAA,MACTC,WAAU;AAAA,MACV,oCAAoC,OAAO;AAAA,MAC3C,CAAC;AAAA,MACD;AAAA,IACF;AAAA,EACF;AAEA,MAAI,gBAAgB,gCAAgC,KAAK,MAAM,OAAO,GAAG;AACvE,WAAO,IAAID;AAAA,MACTC,WAAU;AAAA,MACV;AAAA,MACA,CAAC;AAAA,MACD;AAAA,IACF;AAAA,EACF;AAEA,MAAI,gBAAgB,gBAAgB,KAAK,MAAM,OAAO,GAAG;AACvD,WAAO,IAAID;AAAA,MACTC,WAAU;AAAA,MACV;AAAA,MACA,CAAC;AAAA,MACD;AAAA,IACF;AAAA,EACF;AAEA,MAAI,gBAAgB,gBAAgB,KAAK,MAAM,OAAO,GAAG;AACvD,WAAO,IAAID,WAAUC,WAAU,iBAAiB,MAAM,SAAS,CAAC,GAAG,KAAK;AAAA,EAC1E;AAEA,MAAI,gBAAgB,wBAAwB,KAAK,MAAM,OAAO,GAAG;AAC/D,UAAM,QAAQ,MAAM,QAAQ,MAAM,gBAAgB,uBAAuB;AACzE,WAAO,IAAID,WAAUC,WAAU,eAAe,QAAQ,CAAC,KAAK,MAAM,SAAS,CAAC,GAAG,KAAK;AAAA,EACtF;AAEA,SAAO,IAAID,WAAUC,WAAU,iBAAiB,MAAM,SAAS,CAAC,GAAG,KAAK;AAC1E,GAjD2B;AAmD3B,IAAM,yCAAyC,wBAC7C,OACA,mCACG;AACH,MAAI,CAAC,gCAAgC;AACnC,WAAO;AAAA,EACT;AAEA,SAAO,IAAID;AAAA,IACT,MAAM;AAAA,IACN,GAAG,MAAM,OAAO;AAAA;AAAA,EAAO,8BAA8B;AAAA,IACrD,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AACF,GAd+C;AAgBxC,IAAM,+BAA+B,wBAC1C,QACA,iCAAiD,UAC9C;AACH,MAAI,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC1B;AAAA,EACF;AAEA,QAAM,eAAe,OAAO,IAAI,kBAAkB;AAClD,MAAI,aAAa,WAAW,GAAG;AAC7B,UAAM,uCAAuC,aAAa,CAAC,GAAG,8BAA8B;AAAA,EAC9F;AAEA,QAAM,eAAe,aAAa,IAAI,CAAC,QAAQ,IAAI,OAAO,EAAE,KAAK,IAAI;AACrE,QAAM;AAAA,IACJ,IAAIA,WAAUC,WAAU,iBAAiB,cAAc,CAAC,GAAG,YAAY;AAAA,IACvE;AAAA,EACF;AACF,GAlB4C;;;AD9DrC,IAAM,wBAAN,MAAM,uBAAwD;AAAA,EAI3D,YACE,QACA,SACR;AAFQ;AACA;AAAA,EACP;AAAA,EA5BL,OAqBqE;AAAA;AAAA;AAAA,EACnE,OAAc,iCAAiD;AAAA,EAC/D,OAAe,cAAc,IAAI,YAAY;AAAA,EAO7C,aAAoB,OAAO,SAAuC;AAChE,UAAM,EAAE,KAAK,OAAO,WAAW,SAAS,eAAe,QAAQ,IAAI;AACnE,UAAM,WAAW,MAAM,QAAQ,GAAG,GAAG,QAAQ;AAAA,MAC3C,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,MAAM,KAAK;AAAA,QAClB;AAAA,QACA;AAAA,MACF,CAAC;AAAA,MACD,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,QAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAGD,UAAM,CAAC,aAAa,YAAY,IAAI,SAAS,KAAM,IAAI,EAAE,IAAI,CAAC,WAAW,OAAO,UAAU,CAAC;AAO3F,UAAM,IAAI,uBAAsB,WAAW,EAAE,KAAK;AAElD,WAAO,IAAI,uBAAsB,cAAc,OAAO;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAoB,UAClB,QACA,kBAA0B,IAKzB;AACD,QAAI,OAAO;AACX,UAAM,QAAQ;AAGd,WAAO,MAAM;AAKX,YAAM,UAAU,CAAC,GAAG,KAAK,SAAS,KAAK,CAAC,EAAE,QAAQ,CAAC,UAAU,KAAK;AAClE,UAAI,QAAQ,SAAS,GAAG;AACtB,YAAI;AACF,gBAAM,QAAQ,KAAK,MAAM,QAAQ,CAAC,EAAE,QAAQ,UAAU,EAAE,CAAC;AAEzD,iBAAO;AAAA,YACL;AAAA,YACA,MAAM;AAAA,YACN,iBAAiB,KAAK,QAAQ,QAAQ,CAAC,GAAG,EAAE;AAAA,UAC9C;AAAA,QACF,SAAS,GAAG;AACV,gBAAM,IAAIC;AAAA,YACRC,WAAU;AAAA,YACV,6CAA6C,IAAI;AAAA,UACnD;AAAA,QACF;AAAA,MACF;AAMA,YAAM,EAAE,OAAO,KAAK,IAAI,MAAM,OAAO,KAAK;AAE1C,UAAI,MAAM;AACR,eAAO,EAAE,OAAO,QAAW,MAAM,iBAAiB,GAAG;AAAA,MACvD;AAUA,YAAM,UAAU,uBAAsB,YACnC,OAAO,KAAK,EACZ,QAAQ,wBAAwB,EAAE;AAErC,cAAQ;AAAA,IACV;AAAA,EACF;AAAA,EAEQ,SAA4C,CAAC;AAAA,EAE7C,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ1B,MAAM,OAAkD;AAEtD,WAAO,MAAM;AAIX,YAAM,YAAY,KAAK,OAAO,MAAM;AACpC,UAAI,WAAW;AACb,aAAK,UAAU,SAAS;AACxB;AAAA,UACE,UAAU;AAAA,UACV,uBAAsB;AAAA,QACxB;AACA,eAAO,EAAE,OAAO,UAAU,MAAM,MAAM,MAAM;AAAA,MAC9C;AAKA,YAAM,EAAE,OAAO,MAAM,gBAAgB,IAAI,MAAM,uBAAsB;AAAA,QACnE,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAEA,WAAK,kBAAkB;AAEvB,UAAI,MAAM;AACR,eAAO,EAAE,OAAO,QAAW,MAAM,KAAK;AAAA,MACxC;AACA,WAAK,OAAO,KAAK,KAAmC;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,SAAsD;AACpD,WAAO,QAAQ,QAAQ,EAAE,MAAM,MAAM,OAAO,OAAU,CAAC;AAAA,EACzD;AAAA,EAEA,CAAC,OAAO,aAAa,IAAgD;AACnE,WAAO;AAAA,EACT;AACF;;;AEnLA,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,WAAAC,iBAAe;;;ACDxB,SAAS,UAAU,mBAAmB;AACtC,SAAS,mBAAmB;AAC5B,SAAS,aAAAC,YAAW,aAAAC,kBAAiB;AAErC,SAAS,MAAAC,KAAI,gBAAgB;AAE7B,SAAS,iBAAiB;AAE1B,SAAS,UAAU,WAAAC,gBAAe;AAkF3B,IAAM,WAAW,wBAAC,UAA0C;AACjE,QAAM,EAAE,KAAK,IAAI;AAEjB,UAAQ,MAAM,MAAM;AAAA,IAClB,KAAK,UAAU,MAAM;AACnB,YAAM,YAAY,SAAS,MAAM,aAAa,IAAI;AAClD,YAAM,gBAAgB,SAAS,MAAM,iBAAiB,IAAI;AAC1D,aAAO;AAAA,QACL,MAAM,UAAU;AAAA,QAChB,MAAMC,SAAQ,SAAS,MAAM,EAAE,EAAE,MAAM,GAAG,QAAQ,CAAC;AAAA,QACnD,aAAa,SAAS,SAAS,MAAM,EAAE,EAAE,MAAM,UAAU,WAAW,CAAC;AAAA,QACrE,OAAOA,SAAQ,MAAM,KAAK;AAAA,QAC1B,QAAQC,IAAG,MAAM,MAAM;AAAA,QACvB,SAASD,SAAQ,MAAM,OAAO;AAAA,QAC9B,WAAW;AAAA,UACT,aAAa,SAAS,SAAS,MAAM,SAAS,EAAE,MAAM,GAAG,CAAC,CAAC;AAAA,UAC3D,SAAS,SAAS,SAAS,MAAM,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,QAC1D;AAAA,QACA,cAAc,MAAM;AAAA,QACpB,kBAAkBC,IAAG,MAAM,gBAAgB;AAAA,QAC3C,iBAAiBA,IAAG,UAAU,MAAM;AAAA,QACpC,qBAAqBA,IAAG,cAAc,MAAM;AAAA,QAC5C,WAAWD,SAAQ,SAAS;AAAA,QAC5B,eAAeA,SAAQ,aAAa;AAAA,MACtC;AAAA,IACF;AAAA,IACA,KAAK,UAAU,UAAU;AACvB,aAAO;AAAA,QACL,MAAM,UAAU;AAAA,QAChB,MAAMA,SAAQ,MAAM,QAAQ,WAAW;AAAA,QACvC,aAAa;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,QACX,WAAW;AAAA,UACT,aAAa,SAAS,SAAS,MAAM,SAAS,EAAE,MAAM,GAAG,CAAC,CAAC;AAAA,UAC3D,SAAS,SAAS,SAAS,MAAM,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,QAC1D;AAAA,QACA,YAAYA,SAAQ,MAAM,UAAU;AAAA,MACtC;AAAA,IACF;AAAA,IACA,KAAK,UAAU,SAAS;AACtB,YAAM,YAAY,SAAS,MAAM,aAAa,IAAI;AAClD,YAAM,gBAAgB,SAAS,MAAM,iBAAiB,IAAI;AAC1D,YAAM,OAAO,SAAS,MAAM,QAAQ,IAAI;AACxC,aAAO;AAAA,QACL,MAAM,UAAU;AAAA,QAChB,QAAQA,SAAQ,MAAM,MAAM;AAAA,QAC5B,WAAWA,SAAQ,MAAM,SAAS;AAAA,QAClC,QAAQC,IAAG,MAAM,MAAM;AAAA,QACvB,OAAOD,SAAQ,MAAM,KAAK;AAAA,QAC1B,cAAc,MAAM;AAAA,QACpB,kBAAkBC,IAAG,MAAM,gBAAgB;AAAA,QAC3C,iBAAiBA,IAAG,UAAU,MAAM;AAAA,QACpC,qBAAqBA,IAAG,cAAc,MAAM;AAAA,QAC5C,WAAWD,SAAQ,SAAS;AAAA,QAC5B,eAAeA,SAAQ,aAAa;AAAA,QACpC,MAAMA,SAAQ,IAAI;AAAA,QAClB,YAAY,KAAK;AAAA,MACnB;AAAA,IACF;AAAA,IACA,SAAS;AACP,YAAM,IAAIE;AAAA,QACRC,WAAU;AAAA,QACV,mCAAmC,IAAI;AAAA,MACzC;AAAA,IACF;AAAA,EACF;AACF,GAnEwB;;;AC1FxB,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,aAAAC,YAAW,aAAAC,kBAAiB;AAErC,SAAS,MAAAC,WAAU;AAEnB,SAAS,kBAAkB;AAE3B,SAAS,WAAAC,gBAAe;AA+CjB,IAAM,YAAY,wBAAC,UAA4C;AACpE,QAAM,EAAE,KAAK,IAAI;AAEjB,UAAQ,MAAM;AAAA,IACZ,KAAK,WAAW,MAAM;AACpB,aAAO;AAAA,QACL,MAAM,WAAW;AAAA,QACjB,IAAIC,SAAQ,MAAM,EAAE;AAAA,QACpB,QAAQC,IAAG,MAAM,MAAM;AAAA,QACvB,SAASD,SAAQ,MAAM,OAAO;AAAA,MAChC;AAAA,IACF;AAAA,IACA,KAAK,WAAW,UAAU;AACxB,aAAO;AAAA,QACL,MAAM,WAAW;AAAA,QACjB,YAAY,MAAM;AAAA,QAClB,aAAaE;AAAA,QACb,WAAWA;AAAA,MACb;AAAA,IACF;AAAA,IACA,KAAK,WAAW,QAAQ;AACtB,aAAO;AAAA,QACL,MAAM,WAAW;AAAA,QACjB,IAAIF,SAAQ,MAAM,EAAE;AAAA,QACpB,QAAQC,IAAG,CAAC;AAAA,QACZ,SAASD,SAAQ,MAAM,OAAO;AAAA,MAChC;AAAA,IACF;AAAA,IACA,KAAK,WAAW,UAAU;AACxB,aAAO;AAAA,QACL,MAAM,WAAW;AAAA,QACjB,IAAIA,SAAQ,MAAM,MAAME,YAAW;AAAA,QACnC,QAAQD,IAAG,MAAM,MAAM;AAAA,QACvB,SAASD,SAAQ,MAAM,WAAWE,YAAW;AAAA,MAC/C;AAAA,IACF;AAAA,IACA,KAAK,WAAW,iBAAiB;AAC/B,aAAO;AAAA,QACL,MAAM,WAAW;AAAA,QACjB,YAAYF,SAAQ,MAAM,UAAU;AAAA,QACpC,WAAWA,SAAQ,MAAM,SAAS;AAAA,MACpC;AAAA,IACF;AAAA,IACA,SAAS;AACP,YAAM,IAAIG;AAAA,QACRC,WAAU;AAAA,QACV,oCAAoC,IAAI;AAAA,MAC1C;AAAA,IACF;AAAA,EACF;AACF,GAlDyB;;;ACtDzB,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,SAAS,kBAAkB;AAEpC,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,mBAAmB;AAC5B,SAAS,aAAAC,mBAAiB;AAE1B,SAAS,MAAAC,WAAU;AASnB;AAAA,EACE;AAAA,EACA;AAAA,EACA,aAAAC;AAAA,EACA,cAAAC;AAAA,EACA,mBAAAC;AAAA,OACK;AAEP,SAAS,QAAQ,WAAAC,UAAS,aAAAC,kBAAiB;;;ACmDpC,IAAM,gBAAgB,wBAAC,YAC5B,EAAE,UAAU,UADe;;;ACtCtB,IAAM,YAAY,wBAAC,aAA+C,YAAY,UAA5D;AAElB,IAAM,eAAe,wBAAC,aAC3B,eAAe,UADW;AAGrB,IAAM,SAAS,wBAAC,aAAyC,QAAQ,UAAlD;AAEf,IAAM,YAAY,wBAAC,aAAgD,eAAe,UAAhE;;;AC3CzB,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,yCAAyC;;;ACFlD,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,aAAAC,YAAW,aAAAC,kBAAiB;AACrC,SAAS,MAAAC,WAAU;AAiBnB;AAAA,EACE;AAAA,EACA;AAAA,EACA,aAAAC;AAAA,EACA,cAAAC;AAAA,EACA;AAAA,OACK;AACP,SAAS,WAAAC,UAAS,YAAAC,WAAU,yBAAyB;AAuD9C,IAAM,mBAAmB,wBAAC,UAAoC;AACnE,QAAM,EAAE,MAAM,UAAU,qBAAqB,YAAY,IAAI;AAE7D,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,SAAO;AAAA,IACL;AAAA,IACA,iBAAiBC,IAAG,QAAQ;AAAA,IAC5B,qBAAqB;AAAA,MACnB;AAAA,MACA,SAASA,IAAG,OAAO;AAAA,MACnB;AAAA,MACA,eAAe;AAAA,QACb,SAAS,UAAU;AAAA,QACnB,YAAYA,IAAG,UAAU,UAAU;AAAA,QACnC,gBAAgBA,IAAG,UAAU,cAAc;AAAA,MAC7C;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS,eAAe;AAAA,QACxB,iBAAiBA,IAAG,eAAe,eAAe;AAAA,QAClD,iBAAiBA,IAAG,eAAe,eAAe;AAAA,MACpD;AAAA,MACA,cAAc;AAAA,QACZ,SAAS,SAAS;AAAA,QAClB,WAAWA,IAAG,SAAS,SAAS;AAAA,QAChC,YAAYA,IAAG,SAAS,UAAU;AAAA,QAClC,cAAcA,IAAG,SAAS,YAAY;AAAA,QACtC,aAAaA,IAAG,SAAS,WAAW;AAAA,QACpC,SAASA,IAAG,SAAS,OAAO;AAAA,QAC5B,wBAAwBA,IAAG,SAAS,sBAAsB;AAAA,MAC5D;AAAA,MACA,qBAAqB;AAAA,QACnB,SAAS,gBAAgB;AAAA,QACzB,oBAAoBA,IAAG,gBAAgB,kBAAkB;AAAA,QACzD,wBAAwBA,IAAG,gBAAgB,sBAAsB;AAAA,QACjE,oBAAoBA,IAAG,gBAAgB,kBAAkB;AAAA,QACzD,sBAAsBA,IAAG,gBAAgB,oBAAoB;AAAA,MAC/D;AAAA,MACA,kBAAkB;AAAA,QAChB,SAAS,aAAa;AAAA,QACtB,iBAAiBA,IAAG,aAAa,eAAe;AAAA,QAChD,qBAAqBA,IAAG,aAAa,mBAAmB;AAAA,MAC1D;AAAA,MACA;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF,GAzDgC;AA4DzB,IAAM,iBAAiB,wBAAC,UAAoC;AACjE,QAAM,EAAE,MAAM,iBAAiB,qBAAqB,YAAY,IAAI;AAEpE,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,SAAO;AAAA,IACL;AAAA,IACA,UAAU,gBAAgB,SAAS;AAAA,IACnC,qBAAqB;AAAA,MACnB;AAAA,MACA,SAAS,QAAQ,SAAS;AAAA,MAC1B;AAAA,MACA,WAAW;AAAA,QACT,SAAS,cAAc;AAAA,QACvB,YAAY,cAAc,WAAW,SAAS;AAAA,QAC9C,gBAAgB,cAAc,eAAe,SAAS;AAAA,MACxD;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS,mBAAmB;AAAA,QAC5B,iBAAiB,mBAAmB,gBAAgB,SAAS;AAAA,QAC7D,iBAAiB,mBAAmB,gBAAgB,SAAS;AAAA,MAC/D;AAAA,MACA,UAAU;AAAA,QACR,SAAS,aAAa;AAAA,QACtB,WAAW,aAAa,UAAU,SAAS;AAAA,QAC3C,YAAY,aAAa,WAAW,SAAS;AAAA,QAC7C,cAAc,aAAa,aAAa,SAAS;AAAA,QACjD,aAAa,aAAa,YAAY,SAAS;AAAA,QAC/C,SAAS,aAAa,QAAQ,SAAS;AAAA,QACvC,wBAAwB,aAAa,uBAAuB,SAAS;AAAA,MACvE;AAAA,MACA,iBAAiB;AAAA,QACf,SAAS,oBAAoB;AAAA,QAC7B,oBAAoB,oBAAoB,mBAAmB,SAAS;AAAA,QACpE,wBAAwB,oBAAoB,uBAAuB,SAAS;AAAA,QAC5E,oBAAoB,oBAAoB,mBAAmB,SAAS;AAAA,QACpE,sBAAsB,oBAAoB,qBAAqB,SAAS;AAAA,MAC1E;AAAA,MACA,cAAc;AAAA,QACZ,SAAS,iBAAiB;AAAA,QAC1B,iBAAiB,iBAAiB,gBAAgB,SAAS;AAAA,QAC3D,qBAAqB,iBAAiB,oBAAoB,SAAS;AAAA,MACrE;AAAA,MACA;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF,GAzD8B;AA4DvB,IAAM,sBAAsB,wBAAC,aAAqC;AACvE,QAAM,EAAE,UAAU,OAAO,aAAa,gBAAgB,aAAa,WAAW,IAAI;AAElF,SAAO;AAAA,IACL,UAAUA,IAAG,QAAQ;AAAA,IACrB,OAAOA,IAAG,KAAK;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF,GAXmC;AAc5B,IAAM,oBAAoB,wBAAC,aAAqC;AACrE,QAAM,EAAE,UAAU,OAAO,aAAa,gBAAgB,aAAa,WAAW,IAAI;AAElF,SAAO;AAAA,IACL,UAAU,SAAS,SAAS;AAAA,IAC5B,OAAO,MAAM,SAAS;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF,GAXiC;AAc1B,IAAM,2BAA2B,wBAACC,YAA6C;AAAA,EACpF,8BAA8BA,OAAM;AAAA,EACpC,OAAO,iBAAiBA,OAAM,KAAK;AAAA,EACnC,UAAU,oBAAoBA,OAAM,QAAQ;AAC9C,IAJwC;AAOjC,IAAM,yBAAyB,8BAAO,cAAoD;AAAA,EAC/F,8BAA8B,SAAS;AAAA,EACvC,OAAO,eAAe,MAAM,SAAS,SAAS,CAAC;AAAA,EAC/C,UAAU,kBAAkB,MAAM,SAAS,QAAQ,CAAC;AACtD,IAJsC;AAMtC,IAAM,YAAY,wBAAC,QAAwB,OAAOC,cAAhC;AAGX,IAAM,qBAAqB,wBAAC,YAA8D;AAC/F,QAAM,EAAE,YAAY,IAAI;AAExB,UAAQ,aAAa;AAAA,IACnB,wBAA0B;AACxB,YAAM,KAAK,UAAU,QAAQ,MAAM,QAAQ,UAAU;AACrD,YAAM,cAA2B;AAAA,QAC/B,MAAM,YAAY;AAAA,QAClB;AAAA,QACA,IAAI,UAAU,SAAS,EAAE;AAAA,QACzB,QAAQF,IAAG,QAAQ,MAAM;AAAA,QACzB,SAAS,UAAU,QAAQ,OAAO;AAAA,QAClC,KAAKA,IAAG,QAAQ,GAAG;AAAA,QACnB,QAAQA,IAAG,QAAQ,MAAM;AAAA,QACzB,QAAQA,IAAG,QAAQ,MAAM;AAAA,QACzB,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,4BAA4B;AAC1B,YAAM,gBAA+B;AAAA,QACnC,MAAM,YAAY;AAAA,QAClB,IAAI,UAAU,QAAQ,MAAM,QAAQ,UAAU;AAAA,QAC9C,KAAKA,IAAG,QAAQ,GAAG;AAAA,QACnB,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,qCAAgC;AAC9B,YAAM,oBAAuC;AAAA,QAC3C,MAAM,YAAY;AAAA,QAClB,IAAI,UAAU,QAAQ,MAAM,QAAQ,UAAU;AAAA,QAC9C,KAAKA,IAAG,QAAQ,GAAG;AAAA,QACnB,KAAKA,IAAG,QAAQ,GAAG;AAAA,QACnB,QAAQ,UAAU,QAAQ,MAAM;AAAA,QAChC,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,MAAM,UAAU,QAAQ,IAAI;AAAA,QAC5B,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,0BAA2B;AACzB,YAAM,eAA6B;AAAA,QACjC,MAAM,YAAY;AAAA,QAClB,IAAI,UAAU,QAAQ,EAAE;AAAA,QACxB,QAAQA,IAAG,QAAQ,MAAM;AAAA,QACzB,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,YAAY,UAAU,QAAQ,UAAU;AAAA,MAC1C;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,4BAA4B;AAC1B,YAAM,gBAA+B;AAAA,QACnC,MAAM,YAAY;AAAA,QAClB,IAAI,UAAU,QAAQ,MAAM,QAAQ,UAAU;AAAA,QAC9C,KAAKA,IAAG,QAAQ,EAAE;AAAA,QAClB,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AACA,aAAO;AAAA,IACT;AAAA,IAEA,sBAAyB;AACvB,YAAM,KAAKA,IAAG,QAAQ,EAAE;AACxB,YAAM,KAAKA,IAAG,QAAQ,EAAE;AACxB,YAAM,KAAKA,IAAG,QAAQ,EAAE;AACxB,YAAM,KAAKA,IAAG,QAAQ,EAAE;AAExB,YAAM,aAAyB;AAAA,QAC7B,MAAM,YAAY;AAAA,QAClB,IAAI,UAAU,QAAQ,MAAM,QAAQ,UAAU;AAAA,QAC9C;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,+BAA6B;AAC3B,YAAM,KAAKA,IAAG,QAAQ,EAAE;AACxB,YAAM,KAAKA,IAAG,QAAQ,EAAE;AACxB,YAAM,iBAAiC;AAAA,QACrC,MAAM,YAAY;AAAA,QAClB,IAAI,UAAU,QAAQ,MAAM,QAAQ,UAAU;AAAA,QAC9C;AAAA,QACA;AAAA,QACA,KAAKA,IAAG,QAAQ,GAAG;AAAA,QACnB,KAAKA,IAAG,QAAQ,GAAG;AAAA,QACnB,QAAQ,UAAU,QAAQ,MAAM;AAAA,QAChC,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,MAAM,UAAU,QAAQ,IAAI;AAAA,QAC5B,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AACA,aAAO;AAAA,IACT;AAAA,IAEA,gCAA8B;AAC5B,YAAM,KAAK,UAAU,QAAQ,MAAM,QAAQ,UAAU;AACrD,YAAM,kBAAmC;AAAA,QACvC,MAAM,YAAY;AAAA,QAClB;AAAA,QACA,IAAI,UAAU,QAAQ,aAAa,SAAS,EAAE;AAAA,QAC9C,QAAQA,IAAG,QAAQ,MAAM;AAAA,QACzB,SAAS,UAAU,QAAQ,OAAO;AAAA,QAClC,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,uCAAiC;AAC/B,YAAM,KAAK,UAAU,QAAQ,MAAM,QAAQ,UAAU;AACrD,YAAM,qBAAyC;AAAA,QAC7C,MAAM,YAAY;AAAA,QAClB;AAAA,QACA,IAAI,UAAU,QAAQ,aAAa,QAAQ,EAAE;AAAA,QAC7C,QAAQA,IAAG,QAAQ,MAAM;AAAA,QACzB,SAAS,UAAU,QAAQ,OAAO;AAAA,QAClC,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AACA,aAAO;AAAA,IACT;AAAA,IAEA,yCAAkC;AAChC,YAAM,sBAA2C;AAAA,QAC/C,MAAM,YAAY;AAAA,QAClB,QAAQA,IAAG,QAAQ,MAAM;AAAA,QACzB,SAASA,IAAG,QAAQ,OAAO;AAAA,MAC7B;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,qCAAgC;AAC9B,YAAM,SAAS,UAAU,QAAQ,MAAM;AACvC,YAAM,YAAY,UAAU,QAAQ,SAAS;AAC7C,YAAM,QAAQ,UAAU,QAAQ,KAAK;AACrC,YAAM,SAASA,IAAG,QAAQ,MAAM;AAChC,YAAM,OAAO,QAAQ,OAAOG,UAAS,QAAQ,IAAI,IAAI,WAAW,KAAK,CAAC,CAAC;AACvE,YAAM,SAAS,UAAU,QAAQ,MAAM;AACvC,YAAM,MAAMH,IAAG,QAAQ,GAAG,EAAE,SAAS;AAErC,YAAM,YAAY,kBAAkB,aAAa;AAAA,QAC/C;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,MAAMI,SAAQ,IAAI;AAAA,MACpB,CAAC;AAED,YAAM,oBAAuC;AAAA,QAC3C,MAAM,YAAY;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,wBAA0B;AACxB,YAAM,aAAa,UAAU,QAAQ,MAAM,QAAQ,UAAU;AAC7D,YAAM,QAAQ,UAAU,QAAQ,KAAK;AACrC,YAAM,UAAU,iBAAiB,YAAY,KAAK;AAElD,YAAM,cAA2B;AAAA,QAC/B,MAAM,YAAY;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA,KAAKJ,IAAG,QAAQ,GAAG;AAAA,QACnB,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,wBAA0B;AACxB,YAAM,aAAa,UAAU,QAAQ,MAAM,QAAQ,UAAU;AAC7D,YAAM,QAAQ,UAAU,QAAQ,KAAK;AACrC,YAAM,UAAU,iBAAiB,YAAY,KAAK;AAElD,YAAM,cAA2B;AAAA,QAC/B,MAAM,YAAY;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA,KAAKA,IAAG,QAAQ,GAAG;AAAA,QACnB,IAAIA,IAAG,QAAQ,EAAE;AAAA,QACjB,IAAIA,IAAG,QAAQ,EAAE;AAAA,MACnB;AAEA,aAAO;AAAA,IACT;AAAA,IAEA;AACE,YAAM,IAAIK,WAAUC,WAAU,sBAAsB,yBAAyB,WAAW,GAAG;AAAA,EAC/F;AACF,GA7NkC;AA+N3B,IAAM,mBAAmB,wBAAC,UAAqB;AACpD,MAAI;AAEJ,UAAQ,MAAM,MAAM;AAAA,IAClB,KAAK;AACH,oBAAc;AAAA,QACZ,MAAMC,WAAU;AAAA,QAChB,IAAI,MAAM;AAAA,QACV,QAAQP,IAAG,MAAM,MAAM;AAAA,QACvB,SAAS,MAAM;AAAA,QACf,OAAO,MAAM;AAAA,QACb,WAAW,KAAK,MAAM,SAAS;AAAA,QAC/B,cAAc,OAAO,MAAM,gBAAgB;AAAA,QAC3C,WAAW,MAAM;AAAA,QACjB,eAAe,MAAM;AAAA,QACrB,kBAAkBA,IAAG,MAAM,gBAAgB;AAAA,MAC7C;AACA;AAAA,IAEF,KAAK;AACH,oBAAc;AAAA,QACZ,MAAMO,WAAU;AAAA,QAChB,OAAO,MAAM;AAAA,QACb,QAAQP,IAAG,MAAM,MAAM;AAAA,QACvB,WAAW,MAAM;AAAA,QACjB,QAAQ,MAAM;AAAA,QACd,MAAM,MAAM;AAAA,QACZ,cAAc,OAAO,MAAM,mBAAmB;AAAA,QAC9C,WAAW,MAAM;AAAA,QACjB,eAAe,MAAM;AAAA,QACrB,kBAAkBA,IAAG,MAAM,gBAAgB;AAAA,MAC7C;AACA;AAAA,IAEF,KAAK;AACH,oBAAc;AAAA,QACZ,MAAMO,WAAU;AAAA,QAChB,YAAY,MAAM;AAAA,QAClB,WAAW,KAAK,MAAM,SAAS;AAAA,QAC/B,MAAMH,SAAQD,UAAS,MAAM,MAAM,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,MACnD;AACA;AAAA,IAEF;AACE,wBAAkB,KAAK;AAAA,EAC3B;AAEA,SAAO;AACT,GAhDgC;AAkDzB,IAAM,oBAAoB,wBAAC,WAAuB;AACvD,MAAI;AAEJ,UAAQ,OAAO,MAAM;AAAA,IACnB,KAAK;AACH,qBAAe;AAAA,QACb,MAAMK,YAAW;AAAA,QACjB,QAAQR,IAAG,OAAO,MAAM;AAAA,QACxB,SAAS,OAAO;AAAA,QAChB,IAAI,OAAO;AAAA,MACb;AACA;AAAA,IAEF,KAAK;AACH,qBAAe;AAAA,QACb,MAAMQ,YAAW;AAAA,QACjB,YAAY,OAAO,OAAO,UAAU;AAAA,MACtC;AACA;AAAA,IAEF,KAAK;AACH,qBAAe;AAAA,QACb,MAAMA,YAAW;AAAA,QACjB,SAAS,OAAO;AAAA,QAChB,IAAI,OAAO;AAAA,MACb;AACA;AAAA,IAEF,KAAK;AACH,qBAAe;AAAA,QACb,MAAMA,YAAW;AAAA,QACjB,WAAW,OAAO;AAAA,QAClB,YAAY,OAAO;AAAA,MACrB;AACA;AAAA,IAEF,KAAK;AACH,qBAAe;AAAA,QACb,MAAMA,YAAW;AAAA,QACjB,QAAQR,IAAG,OAAO,MAAM;AAAA,QACxB,SAAS,OAAO;AAAA,QAChB,IAAI,OAAO;AAAA,MACb;AACA;AAAA,IAEF;AACE,wBAAkB,MAAM;AAAA,EAC5B;AAEA,SAAO;AACT,GAlDiC;AAoD1B,IAAM,+BAA+B,wBAAC,WAAuB;AAClE,MAAI;AAEJ,UAAQ,OAAO,MAAM;AAAA,IACnB,KAAK;AACH,qBAAe;AAAA,QACb,MAAMQ,YAAW;AAAA,QACjB,QAAQR,IAAG,OAAO,MAAM;AAAA,QACxB,SAAS,OAAO;AAAA,QAChB,IAAI,OAAO;AAAA,MACb;AACA;AAAA,IAEF,KAAK;AACH,qBAAe;AAAA,QACb,MAAMQ,YAAW;AAAA,QACjB,YAAY,OAAO,OAAO,UAAU;AAAA,QACpC,aAAa,OAAO;AAAA,QACpB,WAAW,OAAO;AAAA,MACpB;AACA;AAAA,IAEF,KAAK;AACH,qBAAe;AAAA,QACb,MAAMA,YAAW;AAAA,QACjB,SAAS,OAAO;AAAA,QAChB,IAAI,OAAO;AAAA,QACX,QAAQR,IAAG,OAAO,MAAM;AAAA,MAC1B;AACA;AAAA,IAEF,KAAK;AACH,qBAAe;AAAA,QACb,MAAMQ,YAAW;AAAA,QACjB,WAAW,OAAO;AAAA,QAClB,YAAY,OAAO;AAAA,MACrB;AACA;AAAA,IAEF,KAAK;AACH,qBAAe;AAAA,QACb,MAAMA,YAAW;AAAA,QACjB,QAAQR,IAAG,OAAO,MAAM;AAAA,QACxB,SAAS,OAAO;AAAA,QAChB,IAAI,OAAO;AAAA,MACb;AACA;AAAA,IAEF;AACE,wBAAkB,MAAM;AAAA,EAC5B;AAEA,SAAO;AACT,GArD4C;;;ADhjB5C,IAAM,wCAAwC,wBAC5C,YAEA,QAAQ,SAASS,aAAY,UAC7B,QAAQ,IAAI,SAAS,KAAK,MAAM,mCAJY;AAO9C,IAAM,mCAAmC,wBACvC,YAEA,QAAQ,SAASA,aAAY,SAC7B,QAAQ,eAAe,sEAJgB;AAOlC,IAAM,6BAA6B,wBAAC,aACzC,SAAS;AAAA,EAIP,CAAC,MAAM,YAAY;AACjB,QAAI,sCAAsC,OAAO,GAAG;AAClD,WAAK,uBAAuB,KAAK,OAAO;AAAA,IAC1C;AACA,QAAI,iCAAiC,OAAO,GAAG;AAC7C,WAAK,yBAAyB,KAAK,OAAO;AAAA,IAC5C;AACA,WAAO;AAAA,EACT;AAAA,EACA;AAAA,IACE,wBAAwB,CAAC;AAAA,IACzB,0BAA0B,CAAC;AAAA,EAC7B;AACF,GAlBwC;AAqBnC,IAAM,wBAAwB,wBACnC,eAC6B,mBAAmB,UAAU,GAFvB;;;AE7CrC,SAAS,aAAAC,YAAW,aAAAC,kBAAiB;AAErC,IAAM,6BAA6B;AAGnC,IAAM,mBAAmB,wBACvB,KACA,UACG;AACH,QAAM,UAAU;AAAA,IACd,SAAS;AAAA,IACT,MAAM;AAAA,IACN,aAAa;AAAA,EACf;AACA,QAAM,OAAO,QAAQ,GAAG,KAAK;AAC7B,SAAO,GAAG,IAAI,IAAI,KAAK;AACzB,GAXyB;AAoBlB,IAAM,wBAAwB,wBACnC,UAOI,CAAC,MACF;AACH,QAAM,EAAE,kBAAkB,MAAM,aAAa,SAAS,MAAM,YAAY,IAAI;AAC5E,QAAM,cAAc,oBAAoB;AAGxC,QAAM,oBAAoB;AAAA,IACxB;AAAA,MACE,KAAK;AAAA,MACL,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,KAAK;AAAA,MACL,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,KAAK;AAAA,MACL,OAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,gBAAgB,kBACnB,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,EAC/B,IAAI,CAAC,EAAE,KAAK,MAAM,OAAO;AAAA,IACxB;AAAA,IACA;AAAA,EACF,EAAE;AAEJ,QAAM,sBAAsB,cAAc,SAAS;AAEnD,MAAI,cAAc,SAAS,GAAG;AAC5B,UAAM,IAAIC;AAAA,MACRC,WAAU;AAAA,MACV,wEAAwE,kBACrE,IAAI,CAAC,UAAU,MAAM,GAAG,EACxB,KAAK,IAAI,CAAC;AAAA,IACf;AAAA,EACF;AAEA,MAAI,QAAQ,cAAc,SAAS,GAAG;AACpC,UAAM,YAAY,kBAAkB,IAAI,CAAC,EAAE,IAAI,MAAM,GAAG,EAAE,KAAK,IAAI;AACnE,UAAM,IAAID;AAAA,MACRC,WAAU;AAAA,MACV,yFAAyF,SAAS;AAAA,IACpG;AAAA,EACF;AAEA,QAAM,+BAA+B,sBACjC;AAAA,IACE,cAAc,CAAC,EAAE;AAAA,IACjB,cAAc,CAAC,EAAE;AAAA,EACnB,IACA;AAGJ,QAAM,cAAc;AACpB,QAAM,YAAY,OAAO,KAAK,QAAQ,aAAa,EAAE,IAAI;AACzD,QAAM,wBAAwB,YAAY,QAAQ,aAAa,EAAE;AACjE,QAAM,mBAAmB,aAAa,QAAQ,aAAa,EAAE;AAC7D,QAAM,qBAAqB,mBAAmB,mBAAmB,gBAAgB,IAAI;AAGrF,QAAM,WAAW,sBAAsB,MAAM,cAAc,IAAI,KAAK;AACpE,QAAM,sBAAsB,kBAAkB,MAAM,cAAc,IAAI,KAAK;AAE3E,QAAM,MAAM,GAAG,QAAQ,GAAG,qBAAqB,IAAI,SAAS,GAC1D,qBAAqB,gBAAgB,mBAAmB,GAAG,kBAAkB,KAAK,EACpF;AAEA,SAAO;AACT,GA9EqC;;;ACzBrC,SAAS,MAAAC,WAAU;AAEnB,SAAS,eAAAC,oBAA+B;AACxC,SAAS,YAAAC,iBAAgB;AAelB,IAAM,yBAAyB,wBAAC,aAAkD;AACvF,QAAM,eAAe,SAAS;AAAA,IAC5B,CAAC,YAAY,QAAQ,SAASC,aAAY;AAAA,EAC5C;AAEA,QAAM,UAAU,aAAa,OAAO,CAAC,MAAM,YAAY,KAAK,IAAI,QAAQ,OAAO,GAAGC,IAAG,CAAC,CAAC;AAEvF,SAAO;AACT,GARsC;AAU/B,SAAS,yBAAyB,UAAmB,kBAAoC;AAC9F,QAAM,OAAOA,IAAG,iBAAiB,IAAI;AACrC,MAAI,iBAAiBA,IAAG,CAAC;AACzB,MAAI,iBAAiB,kBAAkB;AACrC,qBAAiBA,IAAG,QAAQ,EAAE,IAAIA,IAAuB,iBAAkB,WAAW,CAAC;AAAA,EACzF,OAAO;AACL,qBAAiBA,IAAG,QAAQ,EAAE,IAAIA,IAAuB,iBAAkB,UAAU,CAAC;AAAA,EACxF;AACA,SAAO,KAAK,IAAI,cAAc;AAChC;AATgB;AAWT,SAAS,gBACd,QACA,aACA,UACA;AACA,QAAM,eAA8B,CAAC;AAErC,QAAM,mBAAmB,OAAO,OAAO,CAAC,UAAU;AAChD,UAAM,kBAAkB,WAAW,SAAS,YAAY;AACxD,QAAI,iBAAiB;AACnB,UAAI,eAAe,SAAS,MAAM,aAAa,MAAM,cAAc,MAAM;AACvE,eAAO;AAAA,MACT;AAEA,UAAI,CAAC,aAAa,SAAS,MAAM,YAAY,GAAG;AAE9C,qBAAa,KAAK,MAAM,YAAY;AACpC,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT,CAAC;AAED,QAAM,uBAAuB,yBAAyB,aAAa,SAAS,gBAAgB;AAE5F,QAAM,WAAW,iBAAiB,OAAO,CAAC,OAAO,UAAU;AACzD,QAAI,eAAe,SAAS,MAAM,aAAa,MAAM,cAAc,MAAM;AACvE,aAAO,MAAM;AAAA,QACX,qBACG,IAAI,yBAAyBC,UAAS,MAAM,SAAS,EAAE,QAAQ,SAAS,YAAY,CAAC,EACrF,IAAID,IAAG,MAAM,gBAAgB,CAAC;AAAA,MACnC;AAAA,IACF;AAEA,WAAO,MAAM,IAAI,SAAS,IAAI;AAAA,EAChC,GAAGA,IAAG,CAAC,CAAC;AAER,SAAO;AACT;AAtCgB;AAgDT,SAAS,UAAU,QAA0B;AAClD,QAAM,EAAE,UAAU,YAAY,QAAQ,aAAa,YAAY,IAAI;AAEnE,QAAM,YAAY,yBAAyB,aAAa,SAAS,gBAAgB;AACjF,QAAM,WAAWA,IAAG,WAAW,EAAE,IAAI,UAAU;AAC/C,QAAM,YAAY,gBAAgB,QAAQ,aAAa,QAAQ;AAE/D,QAAM,SAAS,UAAU,IAAI,QAAQ,EAAE,IAAI,SAAS,EAAE,IAAI,WAAW,EAAE,OAAO;AAE9E,SAAO;AACT;AAVgB;AAsBT,SAAS,UAAU,QAA0B;AAClD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAWA,IAAG,CAAC;AAAA,IACf;AAAA,EACF,IAAI;AAEJ,MAAI,6BAA6BA,IAAG,CAAC;AAErC,MAAI,cAAc,GAAG,CAAC,KAAK,aAAa,IAAI,eAAe,GAAG;AAC5D,iCAA6BA,IAAG,YAAY,EAAE,IAAI,eAAe,EAAE,IAAI,UAAU;AAAA,EACnF;AAEA,QAAM,SAAS,2BAA2B,IAAI,MAAM,EAAE,IAAI,QAAQ;AAElE,SAAO,OAAO,IAAI,WAAW,IAAI,cAAc;AACjD;AAnBgB;AAqBT,SAAS,gCAAgC;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKG;AACD,QAAM,kBAAkB,yBAAyB,mBAAmB,SAAS,YAAY;AACzF,QAAM,eAAe,yBAAyB,eAAe,SAAS,SAAS;AAC/E,QAAM,UAAU,yBAAyB,aAAa,SAAS,IAAI;AAEnE,QAAM,sBAAsBA,IAAG,IAAI,KAAK,KAAK,EAAE;AAC/C,QAAM,gBAAgB,yBAAyB,qBAAqB,SAAS,IAAI;AACjF,QAAM,cAAc,gBAAgB,IAAI,YAAY,EAAE,IAAI,OAAO,EAAE,IAAI,aAAa;AACpF,SAAO,YAAY,OAAO;AAC5B;AAnBgB;AAqBT,SAAS,gCAAgC;AAAA,EAC9C;AAAA,EACA;AACF,GAGG;AACD,SAAO,yBAAyB,aAAa,SAAS,IAAI;AAC5D;AARgB;AAUT,SAAS,8BAA8B;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,QAAM,OAAO,yBAAyB,aAAa,SAAS,IAAI;AAChE,QAAM,UAAU,yBAAyB,kBAAkB,SAAS,IAAI;AACxE,SAAO,KAAK,IAAI,OAAO;AACzB;AAZgB;AAcT,SAAS,iCAAiC;AAAA,EAC/C;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,QAAM,OAAO,yBAAyB,aAAa,SAAS,IAAI;AAEhE,MAAI,eAAe;AACjB,UAAM,eAAe,yBAAyB,eAAe,SAAS,IAAI;AAC1E,SAAK,IAAI,YAAY;AAAA,EACvB;AAEA,SAAO;AACT;AAjBgB;AAmBT,SAAS,gCAAgC;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKG;AACD,QAAM,OAAO,yBAAyB,aAAa,SAAS,IAAI;AAEhE,QAAM,gBAAgB,yBAAyB,gBAAgB,SAAS,IAAI;AAC5E,OAAK,IAAI,aAAa;AAEtB,QAAM,iBAAiB,yBAAyB,iBAAiB,SAAS,SAAS;AACnF,OAAK,IAAI,cAAc;AAEvB,SAAO;AACT;AApBgB;AAsBT,SAAS,2BAA2B;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AACF,GAIG;AAKD,QAAM,2BAA2BA,IAAG,SAAS,iBAAiB,EAAE,IAAI,cAAc;AAClF,SAAOA,IAAG,UAAU,EAAE,IAAI,wBAAwB;AACpD;AAfgB;AAwBT,IAAM,kBAAkB,wBAAC,WAAkC;AAChE,QAAM,EAAE,KAAK,UAAU,aAAa,IAAI,IAAI;AAC5C,SAAO,IAAI,IAAI,QAAQ,EAAE,IAAI,WAAW,EAAE,IAAIA,IAAG,GAAG,CAAC;AACvD,GAH+B;;;AC9O/B,SAAS,WAAAE,gBAAe;AACxB,SAAS,aAAa;AAOtB,SAAS,UAAU,QAAa;AAC9B,SAAO,KAAK,MAAM,EAAE,QAAQ,CAAC,QAAQ;AACnC,YAAQ,OAAO,GAAG,GAAG,YAAY,MAAM;AAAA,MACrC,KAAK;AACH,eAAO,GAAG,IAAIC,SAAQ,OAAO,GAAG,CAAC;AACjC;AAAA,MACF,KAAK;AACH,eAAO,GAAG,IAAI,UAAU,OAAO,GAAG,CAAC;AACnC;AAAA,MACF,KAAK;AACH,eAAO,GAAG,IAAI,OAAO,GAAG,EAAE,MAAM;AAChC;AAAA,MACF,KAAK;AACH,eAAO,GAAG,IAAI,OAAO,GAAG,EAAE,OAAO;AACjC;AAAA,MACF,KAAK;AACH,eAAO,GAAG,IAAI,UAAU,OAAO,GAAG,CAAC;AACnC;AAAA,MACF;AACE;AAAA,IACJ;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAvBS;AA8BF,SAAS,cAAc,MAAW;AAIvC,SAAO,UAAU,MAAM,IAAI,CAAC;AAC9B;AALgB;;;ACxChB,SAAS,aAAAC,YAAW,aAAAC,kBAAiB;AACrC,SAAS,MAAAC,WAAU;AAEnB,SAAS,eAAAC,oBAAmB;AAC5B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,qCAAAC;AAAA,EACA;AAAA,EACA;AAAA,OACK;AASA,IAAM,qBAAqB,wBAChC,cACA,aACc;AACd,MAAI,eAAe,0CAA0C,YAAY;AAEzE,MAAI,cAAc,SAAS,YAAY,GAAG;AACxC,mBAAe,GAAG,YAAY;AAAA;AAAA;AAAA;AAAA,EAAiD,aAAa,YAAY,YAAY;AAAA,EACtH;AAEA,SAAO,IAAIC,WAAUC,WAAU,iBAAiB,cAAc;AAAA,IAC5D,GAAG;AAAA,IACH,QAAQ;AAAA,EACV,CAAC;AACH,GAdkC;AAiBlC,IAAM,YAAY,wBAAC,QAAiB,KAAK,UAAU,KAAK,MAAM,CAAC,GAA7C;AAQX,IAAM,sBAAsB,wBACjC,UACA,MACA,aACc;AACd,MAAI,eAAe;AAEnB,QAAM,gBAAgB,SAAS,KAAK,CAAC,EAAE,KAAK,MAAM,SAASC,aAAY,MAAM;AAC7E,MAAI,SAAS;AAEb,MAAI,eAAe;AACjB,UAAM,YAAYC,IAAG,cAAc,GAAG,EAAE,MAAM;AAC9C,UAAM,UAAU,KAAK,KAAK,SAAS,CAAC;AACpC,UAAM,gBAAgB,KAAK,KAAK,SAAS,CAAC;AAE1C,YAAQ,WAAW;AAAA,MACjB,KAAK,uBAAuB;AAC1B,iBAAS;AACT,uBAAe,qEACb,KAAK,SAAS,UAAU,OAAO,IAAI,WACrC;AACA;AAAA,MACF;AAAA,MAEA,KAAK,yBAAyB;AAC5B,cAAM,SACJ,KAAK,UAAU,IACX,cAAc,UAAU,OAAO,CAAC,QAAQ,UAAU,aAAa,CAAC,MAChE;AAEN,iBAAS;AACT,uBAAe,+DAA+D,MAAM;AACpF;AAAA,MACF;AAAA,MAEA,KAAK,yBAAyB;AAC5B,cAAM,SACJ,KAAK,UAAU,IACX,cAAc,UAAU,aAAa,CAAC,QAAQ,UAAU,OAAO,CAAC,MAChE;AAEN,iBAAS;AACT,uBAAe,+DAA+D,MAAM;AACpF;AAAA,MACF;AAAA,MAEA,KAAK;AACH,iBAAS;AACT,uBAAe;AACf;AAAA,MAEF,KAAKC;AACH,iBAAS;AACT,uBAAe;AACf;AAAA,MAEF;AACE,cAAM,IAAIJ;AAAA,UACRC,WAAU;AAAA,UACV,oDAAoD,cAAc,GAAG;AAAA,UACrE;AAAA,YACE,GAAG;AAAA,YACH,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,IACJ;AAAA,EACF;AAEA,SAAO,IAAID,WAAUC,WAAU,iBAAiB,cAAc;AAAA,IAC5D,GAAG;AAAA,IACH;AAAA,EACF,CAAC;AACH,GAxEmC;AAsF5B,IAAM,iBAAiB,wBAAC,WAAuC;AACpE,QAAM,EAAE,UAAU,cAAc,MAAM,YAAY,IAAI;AAEtD,QAAM,UAAU,SAAS,KAAK,CAAC,EAAE,KAAK,MAAM,SAASC,aAAY,KAAK;AACtE,QAAM,WAAW,SAAS,KAAK,CAAC,EAAE,KAAK,MAAM,SAASA,aAAY,MAAM;AACxE,QAAM,WAAW;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAEA,MAAI,SAAS;AACX,WAAO,mBAAmB,cAAc,QAAQ;AAAA,EAClD;AACA,SAAO,oBAAoB,UAAU,MAAM,QAAQ;AACrD,GAlB8B;;;AChIvB,IAAM,kBAAkB,2BAAI,mBAAqD;AACtF,QAAM,YAAmC,CAAC;AAE1C,WAAS,SAAS,EAAE,QAAQ,QAAQ,GAAiB;AACnD,QAAI,UAAU,OAAO,GAAG;AACtB,gBAAU,OAAO,IAAI,UAAU,OAAO,EAAE,IAAI,MAAM;AAAA,IACpD,OAAO;AACL,gBAAU,OAAO,IAAI;AAAA,IACvB;AAAA,EACF;AANS;AAQT,iBAAe,QAAQ,CAAC,QAAQ,IAAI,QAAQ,QAAQ,CAAC;AAGrD,SAAO,OAAO,QAAQ,SAAS,EAAE,IAAI,CAAC,CAAC,SAAS,MAAM,OAAO,EAAE,SAAS,OAAO,EAAE;AACnF,GAf+B;;;ACExB,IAAM,6BAAN,cAAyC,MAAM;AAAA,EANtD,OAMsD;AAAA;AAAA;AAAA,EAC3C,OAAO;AAAA,EACP,UACP;AACJ;AAKO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAE/C,YAA4B,OAAe;AACzC,UAAM;AADoB;AAE1B,SAAK,UAAU,qBAAqB,KAAK;AAAA,EAC3C;AAAA,EApBF,OAeiD;AAAA;AAAA;AAAA,EACtC,OAAO;AAKlB;AAKO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAE/C,YAA4B,OAAgB;AAC1C,UAAM;AADoB;AAE1B,SAAK,UAAU,kCAAkC,KAAK;AAAA,EACxD;AAAA,EA/BF,OA0BiD;AAAA;AAAA;AAAA,EACtC,OAAO;AAKlB;;;AC/BA,SAAS,aAAAG,YAAW,aAAAC,kBAAiB;AACrC,SAAS,MAAAC,WAAU;AACnB,SAAS,aAAAC,YAAW,cAAAC,mBAAkB;AACtC,SAAS,WAAAC,gBAAe;AAWjB,IAAM,qBAAqB,wBAChC,UACyC,MAAM,SAASC,WAAU,MAFlC;AAI3B,IAAM,wBAAwB,wBACnC,UAC4C,MAAM,SAASA,WAAU,SAFlC;AAI9B,IAAM,mCAAmC,wBAC9C,UAEA,MAAM,SAASA,WAAU,WAAWC,IAAG,MAAM,IAAI,EAAE,OAAO,GAHZ;AAKzC,IAAM,8BAA8B,wBACzC,UAEA,mBAAmB,KAAK,KAAK,sBAAsB,KAAK,GAHf;AAKpC,IAAM,yBAAyB,wBACpC,UAEA,mBAAmB,KAAK,KAAK,iCAAiC,KAAK,GAH/B;AAK/B,IAAM,+BAA+B,wBAC1C,UACI,mBAAmB,KAAK,IAAI,MAAM,QAAQ,MAAM,WAFV;AAIrC,IAAM,kCAAkC,wBAC7C,OACA,UACG,6BAA6B,KAAK,MAAM,MAAM,OAAO,GAHX;AAaxC,IAAM,cAAc,wBACzB,UAEA,4BAA4B,KAAK,KAAK,CAAC,CAAC,MAAM,aAAaC,SAAQ,MAAM,SAAS,MAAM,MAH/D;AAKpB,IAAM,gCAAgC,wBAC3C,QACA,SACA,cAEA,OAAO,OAAO,sBAAsB,EAAE,OAAO,CAAC,KAAK,UAAU;AAC3D,MAAI,mBAAmB,KAAK,KAAK,MAAM,YAAY,SAAS;AAC1D,WAAO,IAAI,IAAI,MAAM,MAAM;AAAA,EAC7B;AAEA,MAAI,sBAAsB,KAAK,KAAK,YAAY,WAAW;AACzD,WAAO,IAAI,IAAI,MAAM,MAAM;AAAA,EAC7B;AAEA,SAAO;AACT,GAAGD,IAAG,CAAC,CAAC,GAfmC;AAiBtC,IAAM,8BAA8B,wBAAC,WAC1C,OAAO,OAAO,sBAAsB,EAAE;AAAA,EACpC,CAACE,QAAO,UAAU;AAChB,QAAI,mBAAmB,KAAK,GAAG;AAC7B,MAAAA,OAAM,MAAM,KAAK,MAAM,EAAE;AAAA,IAC3B,OAAO;AACL,MAAAA,OAAM,SAAS,KAAK,MAAM,KAAK;AAAA,IACjC;AACA,WAAOA;AAAA,EACT;AAAA,EACA;AAAA,IACE,OAAO,CAAC;AAAA,IACR,UAAU,CAAC;AAAA,EACb;AACF,GAdyC;AAgBpC,IAAM,uCAAuC,wBAClD,QACA,UAEA,OAAO;AAAA,EACL,CAAC,KAAK,UAAU;AACd,QAAI,mBAAmB,KAAK,KAAK,MAAM,UAAU,MAAM,OAAO,GAAG;AAC/D,UAAI,MAAM,KAAK,MAAM,EAAE;AAAA,IACzB,WAAW,sBAAsB,KAAK,KAAK,MAAM,cAAc,MAAM,OAAO,GAAG;AAC7E,UAAI,SAAS,KAAK,MAAM,KAAK;AAAA,IAC/B;AACA,WAAO;AAAA,EACT;AAAA,EACA;AAAA,IACE,OAAO,CAAC;AAAA,IACR,UAAU,CAAC;AAAA,EACb;AACF,GAjBkD;AA4B7C,IAAM,wBAAwB,wBACnC,aACA,uBACG;AACH,QAAM,EAAE,QAAQ,QAAQ,IAAI;AAC5B,QAAM,aAAa,IAAI,IAAI,OAAO,OAAO,kBAAkB,EAAE,IAAI,CAAC,UAAU,MAAM,OAAO,CAAC;AAE1F,MAAI,OAAO,KAAK,CAAC,MAAM,sBAAsB,CAAC,KAAKF,IAAG,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG;AACtE,eAAW,IAAI,WAAW;AAAA,EAC5B;AACA,QAAM,gBAAgB,IAAI;AAAA,IACxB,QAAQ,OAAO,CAAC,WAAW,OAAO,SAASG,YAAW,MAAM,EAAE,IAAI,CAAC,WAAW,OAAO,OAAO;AAAA,EAC9F;AACA,QAAM,aAAa,IAAI,IAAI,CAAC,GAAG,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC;AAC/E,SAAO,WAAW;AACpB,GAfqC;AA2B9B,IAAM,kCAAkC,wBAC7C,aACA,oBACA,kBAA2B,UACxB;AAEH,MAAI,oBAAoB,MAAM;AAC5B;AAAA,EACF;AAGA,MAAI,sBAAsB,aAAa,kBAAkB,KAAK,GAAG;AAC/D;AAAA,EACF;AAEA,QAAM,UAAU;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,EACF,EAAE,KAAK,IAAI;AACX,QAAM,IAAIC,WAAUC,WAAU,qBAAqB,OAAO;AAC5D,GArB+C;;;AClJ/C,SAAS,YAAAC,WAAU,WAAAC,gBAAe;AAI3B,IAAM,aAAa,wBAAC,UAA8C;AACvE,QAAM,OAAOC,UAAS,KAAK;AAE3B,SAAO;AAAA,IACL,MAAMC,SAAQ,IAAI;AAAA,IAClB,YAAY,KAAK;AAAA,EACnB;AACF,GAP0B;;;AZ+GnB,IAAe,yBAAf,MAAe,wBAA6D;AAAA,EArHnF,OAqHmF;AAAA;AAAA;AAAA;AAAA,EAIjF;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA,SAAoC,CAAC;AAAA;AAAA,EAErC,UAAsC,CAAC;AAAA;AAAA,EAEvC,YAAyC,CAAC;AAAA;AAAA;AAAA;AAAA,EAK1C,OAA6B,EAAE,OAAO,QAAW,eAAe,QAAW,SAAS,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9F,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAgC,CAAC,GAAG;AAClC,SAAK,MAAM,MAAMC,IAAG,GAAG,IAAI;AAC3B,SAAK,WAAW,YAAY,WAAW,IAAI,WAAW;AACtD,SAAK,aAAa,cAAc,aAAa,IAAI,aAAa;AAC9D,SAAK,eAAeC,WAAU,YAAY,IAAID,IAAG,YAAY,IAAI;AACjE,SAAK,SAASA,IAAG,MAAM;AACvB,SAAK,SAAS,UAAU,CAAC;AACzB,SAAK,UAAU,WAAW,CAAC;AAC3B,SAAK,YAAY,aAAa,CAAC;AAC/B,SAAK,OAAO,QAAQ,EAAE,OAAO,QAAW,eAAe,QAAW,SAAS,OAAU;AAAA,EACvF;AAAA,EAEA,OAAO,cAAc,KAA6B;AAChD,QAAI,cAAc;AAClB,UAAM,WAAqB,CAAC;AAE5B,UAAM,EAAE,KAAK,cAAc,UAAU,WAAW,IAAI;AAEpD,QAAIA,IAAG,GAAG,EAAE,GAAG,CAAC,GAAG;AACjB,qBAAe,WAAW;AAC1B,eAAS,KAAK,EAAE,MAAMA,IAAG,GAAG,GAAG,MAAM,WAAW,IAAI,CAAC;AAAA,IACvD;AACA,QAAIC,WAAU,YAAY,KAAKD,IAAG,YAAY,EAAE,IAAI,CAAC,GAAG;AACtD,qBAAe,WAAW;AAC1B,eAAS,KAAK,EAAE,MAAMA,IAAG,YAAY,GAAG,MAAM,WAAW,aAAa,CAAC;AAAA,IACzE;AACA,QAAI,YAAY,WAAW,GAAG;AAC5B,qBAAe,WAAW;AAC1B,eAAS,KAAK,EAAE,MAAM,UAAU,MAAM,WAAW,SAAS,CAAC;AAAA,IAC7D;AAEA,mBAAe,WAAW;AAC1B,aAAS,KAAK,EAAE,MAAM,IAAI,QAAQ,MAAM,WAAW,OAAO,CAAC;AAE3D,QAAI,cAAc,aAAa,GAAG;AAChC,qBAAe,WAAW;AAC1B,eAAS,KAAK,EAAE,MAAM,YAAY,MAAM,WAAW,WAAW,CAAC;AAAA,IACjE;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQU,qBAAgD;AACxD,UAAM,SAAS,KAAK,QAAQ,IAAI,QAAQ,KAAK,CAAC;AAC9C,UAAM,UAAU,KAAK,SAAS,IAAI,SAAS,KAAK,CAAC;AACjD,UAAM,YAAY,KAAK,WAAW,IAAI,UAAU,KAAK,CAAC;AAEtD,UAAM,EAAE,aAAa,SAAS,IAAI,wBAAuB,cAAc,IAAI;AAE3E,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAa,OAAO;AAAA,MACpB,cAAc,QAAQ;AAAA,MACtB,gBAAgB,UAAU;AAAA,IAC5B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,qBAAiC;AAC/B,WAAO,IAAI,iBAAiB,EAAE,OAAO,KAAK,cAAc,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,UAAU,OAAwC;AAC1D,SAAK,OAAO,KAAK,KAAK;AACtB,WAAO,KAAK,OAAO,SAAS;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,WAAW,QAA0C;AAC7D,SAAK,QAAQ,KAAK,MAAM;AACxB,WAAO,KAAK,QAAQ,SAAS;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,WAAsB;AAC/B,SAAK,UAAU,KAAK,SAAS;AAC7B,WAAO,KAAK,UAAU,SAAS;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kBAA0B;AAExB,WAAO,KAAK,WAAW,OAAO,CAACE,cAAaA,YAAW,CAAC,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,SAAuB,WAAsB;AAChE,UAAM,eAAe,IAAI,QAAQ,OAAO;AACxC,UAAM,eAAe,KAAK,gCAAgC,YAAY;AACtE,QAAI,OAAO,iBAAiB,UAAU;AACpC,WAAK,cAAc,cAAc,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,OAAe,SAAoC;AAC/D,QAAI,CAAC,KAAK,UAAU,KAAK,GAAG;AAC1B,YAAM,IAAI,sBAAsB,KAAK;AAAA,IACvC;AACA,SAAK,UAAU,KAAK,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,oBAAoB,SAA8B;AACtD,UAAM,WAAW,MAAM,QAAQ,OAAO,IAAI,UAAU,CAAC,OAAO;AAC5D,UAAM,QAAQ;AAAA,MACZ,SAAS,IAAI,OAAO,QAAQ;AAC1B,aAAK,WAAW,MAAM,IAAI,gBAAwC,IAAI,CAAC;AAAA,MACzE,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAA+C;AAC7C,WAAO,KAAK,OAAO;AAAA,MACjB,CAAC,UAAgD,MAAM,SAASC,WAAU;AAAA,IAC5E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiD;AAC/C,WAAO,KAAK,QAAQ;AAAA,MAClB,CAAC,WAAmD,OAAO,SAASC,YAAW;AAAA,IACjF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAqD;AACnD,WAAO,KAAK,QAAQ;AAAA,MAClB,CAAC,WAAqD,OAAO,SAASA,YAAW;AAAA,IACnF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gCAAgC,OAAwC;AACtE,UAAM,eAAe,WAAW,KAAK;AAErC,UAAM,QAAQ,KAAK,OAAO,KAAK,CAAC,UAAU;AACxC,cAAQ,MAAM,MAAM;AAAA,QAClB,KAAKD,WAAU;AACb,iBAAOE,SAAsC,MAAO,KAAK,MAAM,aAAa,OAAO;AAAA,QACrF,KAAKF,WAAU;AACb,iBACEE,SAAyC,MAAO,SAAS,MAAM,aAAa,OAAO;AAAA,QAEvF;AACE,iBAAO;AAAA,MACX;AAAA,IACF,CAAC;AAED,WAAqC,OAAQ;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,MAAY;AACvB,UAAM,EAAE,SAAS,OAAO,QAAQ,IAAI,WAAW,cAAc,IAAI;AAEjE,QAAI;AAEJ,QAAI,KAAK,WAAW;AAClB,qBAAe;AAAA,IACjB,OAAO;AACL,qBAAe,KAAK,gCAAgC,KAAK;AAGzD,UAAI,OAAO,iBAAiB,UAAU;AACpC,uBAAe,KAAK,gBAAgB;AAAA,MACtC;AAAA,IACF;AAEA,UAAM,QAAqC;AAAA,MACzC;AAAA,MACA,MAAMF,WAAU;AAAA,MAChB,OAAO,MAAM,OAAO;AAAA,MACpB;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAGA,SAAK,UAAU,KAAK;AAGpB,SAAK,gBAAgB,OAAO,OAAO;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,SAAgC;AAC9C,UAAM,EAAE,WAAW,QAAQ,QAAQ,WAAW,OAAO,cAAc,IAAI;AAEvE,QAAI;AAEJ,QAAI,QAAQ,WAAW;AACrB,qBAAe;AAAA,IACjB,OAAO;AACL,qBAAe,KAAK,gCAAgC,SAAS;AAG7D,UAAI,OAAO,iBAAiB,UAAU;AACpC,uBAAe,KAAK,gBAAgB;AAAA,MACtC;AAAA,IACF;AAEA,UAAM,QAAwC;AAAA,MAC5C;AAAA,MACA,MAAMA,WAAU;AAAA,MAChB,QAAQ,OAAO,OAAO;AAAA,MACtB,WAAW,UAAU,OAAO;AAAA,MAC5B,MAAM,cAAc,OAAO,IAAI,OAAO,QAAQ;AAAA,MAC9C;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAGA,SAAK,UAAU,KAAK;AAGpB,QAAI,cAAc,OAAO,GAAG;AAC1B,WAAK,gBAAgB,WAAW,QAAQ,OAAO;AAAA,IACjD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,UAAoB;AAC9B,QAAI,OAAO,QAAQ,GAAG;AACpB,WAAK,aAAa,QAAQ;AAAA,IAC5B,OAAO;AACL,WAAK,gBAAgB,QAAQ;AAAA,IAC/B;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,WAAoC;AAC/C,cAAU,QAAQ,CAAC,aAAa,KAAK,YAAY,QAAQ,CAAC;AAE1D,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,IAAiB,QAAsB,SAAoB;AACvE,SAAK,WAAW;AAAA,MACd,MAAMC,YAAW;AAAA,MACjB,IAAI,WAAW,EAAE,EAAE,OAAO;AAAA,MAC1B;AAAA,MACA;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAe,IAAiB,YAAgC;AAC9D,eAAW,IAAI,cAAc,EAAE,QAAQ,CAAC,aAAa;AACnD,WAAK,WAAW;AAAA,QACd,MAAMA,YAAW;AAAA,QACjB,IAAI,WAAW,EAAE,EAAE,OAAO;AAAA,QAC1B,QAAQ,SAAS;AAAA,QACjB,SAAS,SAAS;AAAA,MACpB,CAAC;AAAA,IACH,CAAC;AAED,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,IAAiB,SAAoB;AAEnD,UAAM,eAAe,KAAK,iBAAiB,EAAE;AAAA,MAC3C,CAAC,WAAWC,SAAQ,OAAO,OAAO,MAAM;AAAA,IAC1C;AAGA,QAAI,CAAC,cAAc;AACjB,WAAK,WAAW;AAAA,QACd,MAAMD,YAAW;AAAA,QACjB,IAAI,WAAW,EAAE,EAAE,OAAO;AAAA,QAC1B;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACT,WAAO,KAAK,mBAAmB,EAAE;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,WAAyB;AACnC,UAAM,IAAIE,YAAUA,YAAU,MAAM,iBAAiB,iBAAiB;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,WAA0B;AACxC,UAAM,EAAE,oBAAoB,IAAI;AAChC,UAAM;AAAA,MACJ;AAAA,MACA,eAAe,EAAE,WAAW;AAAA,IAC9B,IAAI;AACJ,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA,QAAQ,KAAK;AAAA,MACb,aAAa,KAAK,SAAS;AAAA,MAC3B,aAAa,KAAK,YAAY,QAAQ;AAAA,IACxC,CAAC;AAAA,EACH;AAAA,EAEA,gBAAgB,WAAsB,QAAgB;AACpD,UAAM,EAAE,oBAAoB,IAAI;AAChC,UAAM;AAAA,MACJ,eAAe,EAAE,WAAW;AAAA,MAC5B,cAAc,EAAE,YAAY;AAAA,IAC9B,IAAI;AAEJ,UAAM,kBAAkB,KAAK,cAAc,EAAE,UAAU;AAAA,MACrD,CAAC,KAAK,QAAQ,MAAM,IAAI;AAAA,MACxB;AAAA,IACF;AACA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,cAAc,KAAK;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,kBAAkB,YAA4B,aAAqB,gBAA0B;AAC3F,UAAM,iBAAiB,wBAAC,YACtB,KAAK,OAAO,KAAK,CAAC,UAAU;AAC1B,UAAI,aAAa,OAAO;AACtB,eAAO,MAAM,YAAY;AAAA,MAC3B;AACA,aAAO;AAAA,IACT,CAAC,GANoB;AAQvB,UAAM,mBAAmB,wBAAC,SAAiB,aAAiB;AAC1D,YAAM,aAAa,eAAe,OAAO;AAEzC,UAAI,eAAe;AAEnB,UAAI,YAAY,aAAa;AAC3B,uBAAeN,IAAG,qBAAqB;AAAA,MACzC;AAEA,UAAI,cAAc,aAAa,YAAY;AACzC,mBAAW,KAAKK,SAAQ,YAAYE,YAAW,CAAC;AAChD,mBAAW,SAAS;AAAA,MACtB,OAAO;AACL,aAAK,aAAa;AAAA,UAChB;AAAA,YACE,IAAIF,SAAQ,YAAYE,YAAW,CAAC;AAAA,YACpC,QAAQ;AAAA,YACR;AAAA,YACA,OAAO,kBAAkB,QAAQ,WAAW;AAAA,YAC5C,cAAcP,IAAG,CAAC;AAAA,YAClB,cAAcA,IAAG,CAAC;AAAA,UACpB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,GAxByB;AA0BzB,qBAAiB,aAAaA,IAAG,IAAe,CAAC;AACjD,eAAW,QAAQ,CAAC,MAAM,iBAAiB,EAAE,SAAS,EAAE,MAAM,CAAC;AAE/D,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,2BAA2C;AACzC,UAAM,kBAAkB,KAAK,eAAe,EAAE,IAAI,CAAC,EAAE,QAAQ,QAAQ,OAAO;AAAA,MAC1E,QAAQA,IAAG,MAAM;AAAA,MACjB,SAAS,QAAQ,SAAS;AAAA,IAC5B,EAAE;AAEF,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,SAAS;AACP,WAAO,cAAc,IAAI;AAAA,EAC3B;AAAA,EAEA,cAAc,OAAe;AAC3B,SAAK,UAAU,OAAO,OAAO,CAAC;AAC9B,SAAK,qBAAqB,KAAK;AAAA,EACjC;AAAA,EAEQ,qBAAqB,cAAsB;AACjD,SAAK,OAAO,OAAO,sBAAsB,EAAE,QAAQ,CAAC,UAAU;AAC5D,UAAI,MAAM,eAAe,cAAc;AAErC,cAAM,gBAAgB;AAAA,MACxB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,uBAAuB,QAAmC;AACxD,UAAM,yBAAyB,OAAO,OAAO,2BAA2B;AAExE,SAAK,OAAO,OAAO,sBAAsB,EAAE,QAAQ,CAAC,MAAM;AACxD,YAAM,QAAQ,6BAA6B,CAAC;AAC5C,YAAM,qBAAqB,uBAAuB;AAAA,QAAK,CAAC,MACtD,gCAAgC,GAAG,IAAI,QAAQ,OAAO,KAAK,CAAC,CAAC;AAAA,MAC/D;AAEA,UACE,sBACA,sBAAsB,sBACtBA,IAAG,mBAAmB,gBAAgB,EAAE,GAAG,CAAC,GAC5C;AAEA,UAAE,mBAAmB,mBAAmB;AAAA,MAC1C;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,aAAqB;AACnB,WAAO,KAAK,mBAAmB,EAAE;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,YACL,SACA,OACA,SACA;AACA,QAAI,CAAC,OAAO;AACV,WAAK,OAAO,EAAE,OAAO,QAAW,eAAe,QAAW,SAAS,OAAU;AAC7E;AAAA,IACF;AAEA,UAAM,gBAAgB,KAAK,iBAAiB,OAAO;AACnD,SAAK,OAAO,EAAE,OAAO,eAAe,QAAQ;AAAA,EAC9C;AACF;;;AanvBA,SAAS,SAAAQ,cAAa;;;ACFtB,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,iBAAiB,cAAc;AACxC,SAAS,MAAAC,YAAU;AACnB,SAAS,mBAAAC,kBAAiB,aAAAC,YAAW,cAAAC,aAAY,oBAAAC,yBAAwB;AACzE,SAAS,UAAAC,eAAc;AACvB,SAAS,SAAAC,cAAa;AAUf,SAAS,gBAAgB,oBAAwC,SAAiB;AACvF,QAAM,cAAc,mBAAmB,cAAc;AAErD,MAAI,YAAY,SAASC,iBAAgB,QAAQ;AAC/C,gBAAY,eAAeC;AAAA,EAC7B;AAGA,cAAY,SAAS,YAAY,OAAO,IAAI,CAAC,UAAU;AACrD,UAAM,aAAaC,OAAM,KAAK;AAE9B,YAAQ,WAAW,MAAM;AAAA;AAAA,MAEvB,KAAKC,WAAU,MAAM;AACnB,mBAAW,YAAY;AAAA,UACrB,aAAa;AAAA,UACb,SAAS;AAAA,QACX;AACA,mBAAW,mBAAmBC,KAAG,CAAC;AAClC,eAAO;AAAA,MACT;AAAA;AAAA,MAEA,KAAKD,WAAU,SAAS;AACtB,mBAAW,mBAAmBC,KAAG,CAAC;AAClC,eAAO;AAAA,MACT;AAAA;AAAA,MAEA,KAAKD,WAAU,UAAU;AACvB,mBAAW,YAAY;AAAA,UACrB,aAAa;AAAA,UACb,SAAS;AAAA,QACX;AACA,mBAAW,OAAOF;AAClB,mBAAW,cAAc;AACzB,mBAAW,cAAcA;AACzB,mBAAW,YAAYA;AACvB,eAAO;AAAA,MACT;AAAA,MACA;AACE,eAAO;AAAA,IACX;AAAA,EACF,CAAC;AAED,cAAY,UAAU,YAAY,QAAQ,IAAI,CAAC,WAAW;AACxD,UAAM,cAAcC,OAAM,MAAM;AAEhC,YAAQ,YAAY,MAAM;AAAA;AAAA,MAExB,KAAKG,YAAW,UAAU;AACxB,oBAAY,cAAcJ;AAC1B,oBAAY,YAAYA;AACxB,eAAO;AAAA,MACT;AAAA;AAAA,MAEA,KAAKI,YAAW,QAAQ;AACtB,oBAAY,SAASD,KAAG,CAAC;AACzB,eAAO;AAAA,MACT;AAAA;AAAA,MAEA,KAAKC,YAAW,UAAU;AACxB,oBAAY,KAAKJ;AACjB,oBAAY,SAASG,KAAG,CAAC;AACzB,oBAAY,UAAUH;AACtB,eAAO;AAAA,MACT;AAAA,MACA;AACE,eAAO;AAAA,IACX;AAAA,EACF,CAAC;AACD,cAAY,iBAAiB;AAC7B,cAAY,YAAY,CAAC;AAEzB,QAAM,eAAe,gBAAgB,OAAO;AAC5C,QAAM,mBAAmBK,QAAO,CAAC,cAAc,IAAIC,kBAAiB,EAAE,OAAO,WAAW,CAAC,CAAC;AAC1F,SAAO,OAAO,gBAAgB;AAChC;AA3EgB;;;ADGT,IAAM,yBAAN,cAAqC,uBAAuB;AAAA,EAlBnE,OAkBmE;AAAA;AAAA;AAAA,EACjE,OAAO,KAAK,KAAiC;AAC3C,WAAO,IAAI,KAAKC,OAAM,GAAG,CAAC;AAAA,EAC5B;AAAA;AAAA,EAGA,OAAOC,iBAAgB;AAAA;AAAA,EAEvB;AAAA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,EAAE,cAAc,QAAQ,GAAG,KAAK,GAA+B;AACzE,UAAM,IAAI;AACV,SAAK,SAAS;AACd,SAAK,eAAe,gBAAgB;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAiC;AAC/B,UAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAM,EAAE,cAAc,OAAO,IAAI;AACjC,WAAO;AAAA,MACL,MAAMA,iBAAgB;AAAA,MACtB,GAAG;AAAA,MACH;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB,SAAyB;AACxC,WAAO,gBAAgB,MAAM,OAAO;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQS,YAAY,UAAwB;AAC3C,WAAO,8BAA8B;AAAA,MACnC;AAAA,MACA,aAAa,KAAK,SAAS;AAAA,MAC3B,kBAAkB,KAAK,UAAU,KAAK,YAAY,EAAE;AAAA,IACtD,CAAC;AAAA,EACH;AACF;;;AEjFA,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,MAAAC,YAAmB;AAE5B,SAAS,mBAAAC,kBAAiB,cAAAC,mBAAkB;AAE5C,SAAS,YAAAC,WAAU,WAAAC,iBAAe;AAClC,SAAS,SAAAC,cAAa;;;ACJtB,SAAS,YAAAC,WAAU,WAAAC,iBAAe;AAYlC,IAAM,kBAAkB,wBAAC,UAAiC;AACxD,QAAM,IAAI,IAAI,WAAW,EAAE;AAC3B,IAAE,IAAIC,UAAS,KAAK,CAAC;AACrB,SAAO;AACT,GAJwB;AAMjB,IAAM,iBAAiB,wBAAC,gBAA4D;AACzF,MAAI;AACJ,MAAI;AAEJ,MAAI,MAAM,QAAQ,WAAW,GAAG;AAC9B,UAAM,YAAY,CAAC;AACnB,YAAQ,YAAY,CAAC;AAAA,EACvB,OAAO;AACL,UAAM,YAAY;AAClB,YAAQ,YAAY;AAAA,EACtB;AAEA,SAAO;AAAA,IACL,KAAKC,UAAQ,GAAG;AAAA,IAChB,OAAOA,UAAQ,gBAAgB,KAAK,CAAC;AAAA,EACvC;AACF,GAhB8B;;;ADavB,IAAM,2BAAN,cAAuC,uBAAuB;AAAA,EAjCrE,OAiCqE;AAAA;AAAA;AAAA,EACnE,OAAO,KAAK,KAAmC;AAC7C,WAAO,IAAI,KAAKC,OAAM,GAAG,CAAC;AAAA,EAC5B;AAAA;AAAA,EAGA,OAAOC,iBAAgB;AAAA;AAAA,EAEvB;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,EAAE,sBAAsB,MAAM,cAAc,GAAG,KAAK,GAAiC;AAC/F,UAAM,IAAI;AACV,SAAK,uBAAuB,wBAAwB;AACpD,SAAK,OAAOC,UAAQ,QAAQC,YAAW;AACvC,SAAK,eAAe,CAAC,GAAI,gBAAgB,CAAC,CAAE;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAmC;AACjC,UAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAM,uBAAuB,KAAK;AAClC,UAAM,eAAe,KAAK,cAAc,IAAI,cAAc,KAAK,CAAC;AAChE,WAAO;AAAA,MACL,MAAMF,iBAAgB;AAAA,MACtB,GAAG;AAAA,MACH;AAAA,MACA,mBAAmBG,KAAG,aAAa,MAAM;AAAA,MACzC,MAAM,KAAK,OAAOF,UAAQ,KAAK,IAAI,IAAIC;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,4BAAuE;AACrE,WAAO,KAAK,QAAQ;AAAA,MAClB,CAAC,WACC,OAAO,SAASE,YAAW;AAAA,IAC/B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB,SAAyB;AACxC,WAAO,gBAAgB,MAAM,OAAO;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,yBAEE,YAEA,WACA;AACA,SAAK,WAAW;AAAA,MACd,MAAMA,YAAW;AAAA,MACjB;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAES,YAAY,UAAwB;AAC3C,WAAO,gCAAgC;AAAA,MACrC,mBAAmBD,KAAGE,UAAS,KAAK,UAAU,KAAK,oBAAoB,KAAK,IAAI,EAAE,MAAM;AAAA,MACxF;AAAA,MACA,eAAe,KAAK,aAAa;AAAA,MACjC,aAAa,KAAK,SAAS;AAAA,IAC7B,CAAC;AAAA,EACH;AACF;;;AE/HA,SAAS,iBAAiB;AAC1B,SAAS,cAAAC,mBAAkB;AAE3B,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,MAAAC,YAAU;AAGnB,SAAS,aAAAC,YAAW,cAAAC,aAAY,mBAAAC,wBAAuB;AAEvD,SAAS,YAAAC,WAAU,WAAAC,iBAAe;AAClC,SAAS,SAAAC,cAAa;;;ACXtB,SAAS,YAAAC,iBAAgB;AAOlB,IAAM,mBAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM3D,OAAOC,UAAS,YAAY;AAAA,EAC5B,kBAAkB,6BAAM,IAAI,WAAW,CAAC,GAAtB;AACpB;AAGO,IAAM,iBAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWzD,OAAOA,UAAS,oCAAoC;AAAA,EACpD,kBAAkB,6BAAM,IAAI,WAAW,CAAC,GAAtB;AACpB;;;ADWO,IAAM,2BAAN,cAAuC,uBAAuB;AAAA,EA1CrE,OA0CqE;AAAA;AAAA;AAAA,EACnE,OAAO,KAAK,KAAmC;AAC7C,WAAO,IAAI,KAAKC,OAAM,GAAG,CAAC;AAAA,EAC5B;AAAA;AAAA,EAGA,OAAOC,iBAAgB;AAAA;AAAA,EAEvB;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,EAAE,QAAQ,YAAY,UAAU,GAAG,KAAK,IAAkC,CAAC,GAAG;AACxF,UAAM,IAAI;AACV,SAAK,WAAWC,KAAG,QAAQ;AAC3B,SAAK,SAASC,UAAS,UAAU,iBAAiB,KAAK;AACvD,SAAK,aAAaA,UAAS,cAAc,iBAAiB,iBAAiB,CAAC;AAC5E,SAAK,OAAO,KAAK;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,gBACJ,SACA,EAAE,mBAAmB,aAAa,CAAC,EAAE,IAA2B,CAAC,GAC9B;AACnC,UAAM,SAAS,MAAM,QAAQ,mBAAmB,MAAM,EAAE,mBAAmB,WAAW,CAAC;AAEvF,SAAK,SAAS,OAAO;AACrB,SAAK,WAAW,OAAO;AAEvB,UAAM,QAAQ,KAAK,MAAM,MAAM;AAE/B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAmC;AACjC,UAAM,SAASA,UAAS,KAAK,UAAU,IAAI;AAC3C,UAAM,aAAaA,UAAS,KAAK,cAAc,IAAI;AACnD,WAAO;AAAA,MACL,MAAMF,iBAAgB;AAAA,MACtB,gBAAgB,KAAK;AAAA,MACrB,GAAG,MAAM,mBAAmB;AAAA,MAC5B,cAAcC,KAAG,OAAO,MAAM;AAAA,MAC9B,kBAAkBA,KAAG,WAAW,MAAM;AAAA,MACtC,cAAcE;AAAA,MACd,QAAQC,UAAQ,MAAM;AAAA,MACtB,YAAYA,UAAQ,UAAU;AAAA,IAChC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAuD;AACrD,WAAO,KAAK,OAAO;AAAA,MACjB,CAAC,UAAoD,MAAM,SAASC,WAAU;AAAA,IAChF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAyD;AACvD,WAAO,KAAK,QAAQ;AAAA,MAClB,CAAC,WAAuD,OAAO,SAASC,YAAW;AAAA,IACrF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAyD;AACvD,WAAO,KAAK,QAAQ;AAAA,MAClB,CAAC,WAAuD,OAAO,SAASA,YAAW;AAAA,IACrF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAa,QAAkC,MAAS;AACtD,SAAK,aAAa,OAAO,iBAAiB,IAAI;AAC9C,SAAK,SAAS,OAAO;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,oBAA4B,GAAG;AAChD,QAAI,gBAAgB;AAEpB,WAAO,eAAe;AACpB,WAAK,WAAW;AAAA,QACd,MAAMA,YAAW;AAAA,MACnB,CAAC;AACD,uBAAiB;AAAA,IACnB;AAEA,WAAO,KAAK,QAAQ,SAAS;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kBAAkB,IAAgB,QAAuB,SAAqB;AAC5E,SAAK,WAAW;AAAA,MACd,MAAMA,YAAW;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,gBAAgB,WAAsB,QAAgB;AAC7D,UAAM,EAAE,oBAAoB,IAAI;AAChC,UAAM;AAAA,MACJ,eAAe,EAAE,WAAW;AAAA,MAC5B,cAAc,EAAE,YAAY;AAAA,IAC9B,IAAI;AAEJ,UAAM,kBAAkB,KAAK,cAAc,EAAE,UAAU;AAAA,MACrD,CAAC,KAAK,QAAQ,MAAM,IAAI;AAAA,MACxB;AAAA,IACF;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,cAAc,KAAK;AAAA,MACnB,UAAU,KAAK;AAAA,MACf;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,0BAA0B,UAAoD;AAC5E,UAAM,kBAAkBC,YAAW,QAAQ;AAG3C,QAAI,KAAK,kBAAkB,EAAE,KAAK,CAAC,MAAM,EAAE,eAAe,gBAAgB,OAAO,CAAC,GAAG;AACnF,aAAO;AAAA,IACT;AAEA,UAAM,aAAa,MAAM,UAAU;AAAA,MACjC,MAAMF,WAAU;AAAA,MAChB,YAAY,gBAAgB,OAAO;AAAA,MACnC,WAAW;AAAA,IACb,CAAC;AAED,SAAK,WAAW;AAAA,MACd,MAAMC,YAAW;AAAA,MACjB;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB,SAAyB;AACxC,WAAO,gBAAgB,MAAM,OAAO;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,KAAc,MAA8C;AAClE,UAAM,eAAe,IAAI,UAAU,GAAG;AACtC,SAAK,aAAa,aAAa,UAAU,KAAK,gBAAgB,IAAI;AAClE,WAAO;AAAA,EACT;AAAA,EAES,YAAY,UAAwB;AAC3C,WAAO,gCAAgC;AAAA,MACrC;AAAA,MACA,aAAa,KAAK,SAAS;AAAA,IAC7B,CAAC;AAAA,EACH;AACF;;;AEzRA,SAAS,aAAAE,mBAAiB;AAC1B,SAAS,YAAY;AAErB;AAAA,EACE,mBAAAC;AAAA,EAGA;AAAA,OACK;AAEP,SAAS,WAAAC,iBAAe;AACxB,SAAS,SAAAC,cAAa;AAgCf,IAAM,4BAAN,MAAM,mCAAkC,uBAAuB;AAAA,EA3CtE,OA2CsE;AAAA;AAAA;AAAA,EACpE,OAAO,KAAK,KAAoC;AAC9C,QAAI,eAAe,4BAA2B;AAC5C,aAAO;AAAA,IACT;AACA,WAAO,IAAI,KAAKC,OAAM,GAAG,CAAC;AAAA,EAC5B;AAAA;AAAA,EAGA,OAAOC,iBAAgB;AAAA;AAAA,EAEvB;AAAA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,IAAmC,CAAC,GAAG;AACrC,UAAM,IAAI;AACV,SAAK,uBAAuB,wBAAwB;AACpD,SAAK,iBAAiB,kBAAkB;AAAA,MACtC,MAAM,uBAAuB;AAAA,MAC7B,UAAU;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,qCAAqC,WAAsB;AACzD,SAAK,uBAAuB,KAAK,WAAW,SAAS;AACrD,SAAK,iBAAiB;AAAA,MACpB,MAAM,uBAAuB;AAAA,MAC7B,UAAU,KAAK,SAAS;AAAA,IAC1B;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iCAAiC,cAAyB;AACxD,SAAK,iBAAiB;AAAA,MACpB,MAAM,uBAAuB;AAAA,MAC7B,MAAMC,UAAQ,YAAY;AAAA,IAC5B;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,kBAAkB,MAA8B,MAAiB;AAC/D,QAAI,SAAS,uBAAuB,qBAAqB;AACvD,WAAK,qCAAqC,IAAI;AAAA,IAChD;AAEA,QAAI,SAAS,uBAAuB,iBAAiB;AACnD,WAAK,iCAAiC,IAAI;AAAA,IAC5C;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAoC;AAClC,QAAI;AAEJ,QAAI,KAAK,eAAe,SAAS,uBAAuB,qBAAqB;AAC3E,uBAAiB;AAAA,QACf,MAAM,uBAAuB;AAAA,QAC7B,MAAM;AAAA,UACJ,cAAc,KAAK;AAAA,UACnB,UAAU,KAAK,eAAe;AAAA,QAChC;AAAA,MACF;AAAA,IACF,WAAW,KAAK,eAAe,SAAS,uBAAuB,iBAAiB;AAC9E,uBAAiB;AAAA,QACf,MAAM,uBAAuB;AAAA,QAC7B,MAAM;AAAA,UACJ,cAAcA,UAAQ,KAAK,eAAe,IAAI;AAAA,QAChD;AAAA,MACF;AAAA,IACF,OAAO;AACL,YAAM,IAAIC,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,IAChF;AAEA,WAAO;AAAA,MACL,MAAMF,iBAAgB;AAAA,MACtB,GAAG,MAAM,mBAAmB;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB,SAAyB;AACxC,WAAO,gBAAgB,MAAM,OAAO;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,YAAY,UAAwB;AAC3C,UAAM,cAAc,KAAK,SAAS;AAElC,QAAI,KAAK,eAAe,SAAS,uBAAuB,qBAAqB;AAC3E,YAAM,eAAe,KAAK;AAC1B,YAAM,gBAAgB,KAAK,UAAU,YAAY,EAAE;AACnD,aAAO,iCAAiC;AAAA,QACtC;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAEA,QAAI,KAAK,eAAe,SAAS,uBAAuB,iBAAiB;AACvE,aAAO,iCAAiC;AAAA,QACtC;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,IAAIE,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AACF;;;ACzMA,SAAS,eAAAC,oBAAmB;AAE5B,SAAiC,mBAAAC,wBAAuB;AAExD,SAAS,YAAAC,WAAU,WAAAC,iBAAe;AAClC,SAAS,SAAAC,cAAa;AAuCf,IAAM,2BAAN,MAAM,kCAAiC,uBAAuB;AAAA,EA5CrE,OA4CqE;AAAA;AAAA;AAAA,EACnE,OAAO,KAAK,KAA6D;AACvE,QAAI,eAAe,2BAA0B;AAC3C,aAAO;AAAA,IACT;AACA,WAAO,IAAI,KAAKC,OAAM,GAAG,CAAC;AAAA,EAC5B;AAAA;AAAA,EAGA,OAAOC,iBAAgB;AAAA;AAAA,EAEvB;AAAA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,EAAE,cAAc,YAAY,GAAG,KAAK,IAAkC,CAAC,GAAG;AACpF,UAAM,IAAI;AACV,SAAK,eAAe,gBAAgB;AACpC,SAAK,aAAa,cAAc;AAAA,MAC9B,UAAU,CAAC;AAAA,MACX,MAAMC;AAAA,MACN,iBAAiB;AAAA,MACjB,mBAAmB;AAAA,IACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,YAAqC;AACjD,UAAM,EAAE,YAAY,oBAAoB,GAAG,KAAK,IAAI;AACpD,SAAK,aAAa;AAClB,SAAK,eAAe,KAAK,WAAW,kBAAkB;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB,SAAyB;AACxC,WAAO,gBAAgB,MAAM,OAAO;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAmC;AACjC,UAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAM,EAAE,iBAAiB,mBAAmB,MAAM,SAAS,IAAI,KAAK;AACpE,WAAO;AAAA,MACL,MAAMD,iBAAgB;AAAA,MACtB,GAAG;AAAA,MACH;AAAA,MACA;AAAA,MACA,MAAME,UAAQ,IAAI;AAAA,MAClB,UAAU,SAAS,IAAIA,SAAO;AAAA,MAC9B,cAAc,KAAK;AAAA,MACnB,eAAe,SAAS;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,YAAY,UAAwB;AAC3C,WAAO,gCAAgC;AAAA,MACrC;AAAA,MACA,aAAa,KAAK,SAAS;AAAA,MAC3B,gBAAgBC,UAAS,KAAK,UAAU,KAAK,YAAY,CAAC,EAAE;AAAA,MAC5D,iBAAiB,KAAK,WAAW;AAAA,IACnC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASS,gBAAgB,WAA0B;AACjD,UAAM,SAAS,MAAM,gBAAgB,SAAS;AAC9C,UAAM,EAAE,SAAS,IAAI,UAAU;AAC/B,UAAM,WAAW,KAAK,UAAU,KAAK,YAAY,KAAKF;AACtD,WAAO,2BAA2B;AAAA,MAChC;AAAA,MACA,YAAY,OAAO,SAAS;AAAA,MAC5B,gBAAgBE,UAAS,QAAQ,EAAE;AAAA,IACrC,CAAC;AAAA,EACH;AACF;;;ACzGO,IAAe,wBAAf,MAAwC;AAAA,EA7C/C,OA6C+C;AAAA;AAAA;AAG/C;;;AChDA,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,mBAAAC,wBAAuB;AAUzB,IAAM,wBAAwB,wBAAC,QAAoD;AACxF,MACE,eAAe,4BACf,eAAe,4BACf,eAAe,0BACf,eAAe,6BACf,eAAe,0BACf;AACA,WAAO;AAAA,EACT;AAEA,QAAM,EAAE,KAAK,IAAI;AAEjB,UAAQ,IAAI,MAAM;AAAA,IAChB,KAAKC,iBAAgB,QAAQ;AAC3B,aAAO,yBAAyB,KAAK,GAAG;AAAA,IAC1C;AAAA,IACA,KAAKA,iBAAgB,QAAQ;AAC3B,aAAO,yBAAyB,KAAK,GAAG;AAAA,IAC1C;AAAA,IACA,KAAKA,iBAAgB,MAAM;AACzB,aAAO,uBAAuB,KAAK,GAAG;AAAA,IACxC;AAAA,IACA,KAAKA,iBAAgB,SAAS;AAC5B,aAAO,0BAA0B,KAAK,GAAG;AAAA,IAC3C;AAAA,IACA,KAAKA,iBAAgB,QAAQ;AAC3B,aAAO,yBAAyB,KAAK,GAAG;AAAA,IAC1C;AAAA,IACA,SAAS;AACP,YAAM,IAAIC;AAAA,QACRC,YAAU;AAAA,QACV,iCAAiC,IAAI;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AACF,GApCqC;AAuC9B,IAAM,0BAA0B,wBACrCC,aACwCA,SAAQ,SAASH,iBAAgB,QAFpC;AAKhC,IAAM,0BAA0B,wBACrCG,aACwCA,SAAQ,SAASH,iBAAgB,QAFpC;AAKhC,IAAM,wBAAwB,wBACnCG,aACsCA,SAAQ,SAASH,iBAAgB,MAFpC;AAK9B,IAAM,2BAA2B,wBACtCG,aACyCA,SAAQ,SAASH,iBAAgB,SAFpC;AAKjC,IAAM,0BAA0B,wBACrCG,aACwCA,SAAQ,SAASH,iBAAgB,QAFpC;;;AzBrDvC,IAAM,QAAQ,oBAAI,IAAuC;AAElD,IAAM,gBAAN,MAAoB;AAAA,EAnB3B,OAmB2B;AAAA;AAAA;AAAA,EAChB;AAAA,EAET,YAAY,KAAa;AACvB,SAAK,MAAM;AAEX,QAAI,OAAO,QAAQ,YAAY,KAAK,OAAO,GAAG;AAC5C,YAAM,IAAII;AAAA,QACRC,YAAU;AAAA,QACV,gBAAgB,KAAK,GAAG;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,IAAI,eAAuB,QAAyC;AAClE,UAAM,2BAA2B,KAAK,oBAAoB,MAAM;AAChE,UAAM,IAAI,eAAe,wBAAwB;AAAA,EACnD;AAAA,EAEA,MAAM,eAA6B;AACjC,UAAM,OAAO,aAAa;AAAA,EAC5B;AAAA,EAEA,cAAc,OAAe;AAC3B,UAAM,aAAsD,EAAE,OAAO,CAAC,GAAG,UAAU,CAAC,EAAE;AACtF,UAAM,cAAc,KAAK,IAAI;AAC7B,UAAM,UAAoB,CAAC;AAE3B,UAAM,QAAQ,CAAC,UAAU,kBAAkB;AACzC,YAAM,WAAW,cAAc,SAAS,YAAY,KAAK;AAEzD,UAAI,UAAU;AACZ,cAAM,qBAAqB,SAAS,OAAO,IAAI,KAAK;AACpD,YAAI,oBAAoB;AACtB,qBAAW,MAAM,KAAK,GAAG,mBAAmB,KAAK;AACjD,qBAAW,SAAS,KAAK,GAAG,mBAAmB,QAAQ;AAAA,QACzD;AAAA,MACF,OAAO;AACL,gBAAQ,KAAK,aAAa;AAAA,MAC5B;AAAA,IACF,CAAC;AAED,YAAQ,QAAQ,KAAK,KAAK;AAE1B,eAAW,MAAM,QAAQ;AACzB,eAAW,SAAS,QAAQ;AAE5B,WAAO;AAAA,EACT;AAAA,EAEA,SAAS,OAAe,KAAsB;AAC5C,UAAM,cAAc,KAAK,IAAI;AAC7B,QAAI,SAAS;AACb,UAAM,UAAoB,CAAC;AAE3B,eAAW,CAAC,eAAe,YAAY,KAAK,MAAM,QAAQ,GAAG;AAC3D,YAAM,WAAW,cAAc,aAAa,YAAY,KAAK;AAC7D,UAAI,UAAU;AACZ,cAAM,qBAAqB,aAAa,OAAO,IAAI,KAAK;AAExD,YAAI,oBAAoB,MAAM,IAAI,GAAG,KAAK,oBAAoB,SAAS,IAAI,GAAG,GAAG;AAC/E,mBAAS;AACT;AAAA,QACF;AAAA,MACF,OAAO;AACL,gBAAQ,KAAK,aAAa;AAAA,MAC5B;AAAA,IACF;AAEA,YAAQ,QAAQ,KAAK,KAAK;AAE1B,WAAO;AAAA,EACT;AAAA,EAEA,QAAQ;AACN,UAAM,MAAM;AAAA,EACd;AAAA,EAEQ,oBAAoB,QAAmC;AAC7D,UAAM,cAAc,KAAK,IAAI;AAE7B,UAAM,4BAAuD;AAAA,MAC3D,QAAQ,oBAAI,IAAI;AAAA,MAChB,WAAW;AAAA,IACb;AAEA,WAAO,OAAO,2BAA2B,EAAE,QAAQ,CAAC,UAAU;AAC5D,YAAM,EAAE,OAAO,KAAK,KAAK,IAAI,KAAK,oBAAoB,KAAK;AAE3D,UAAI,CAAC,0BAA0B,OAAO,IAAI,KAAK,GAAG;AAChD,kCAA0B,OAAO,IAAI,OAAO,EAAE,OAAO,oBAAI,IAAI,GAAG,UAAU,oBAAI,IAAI,EAAE,CAAC;AAAA,MACvF;AAEA,UAAI,SAAS,QAAQ;AACnB,kCAA0B,OAAO,IAAI,KAAK,GAAG,MAAM,IAAI,GAAG;AAAA,MAC5D,OAAO;AACL,kCAA0B,OAAO,IAAI,KAAK,GAAG,SAAS,IAAI,GAAG;AAAA,MAC/D;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEQ,oBAAoB,OAAqE;AAC/F,QAAI,mBAAmB,KAAK,GAAG;AAC7B,aAAO,EAAE,OAAOC,UAAQ,MAAM,KAAK,GAAG,KAAKA,UAAQ,MAAM,EAAE,GAAG,MAAM,OAAgB;AAAA,IACtF;AACA,WAAO,EAAE,OAAOA,UAAQ,MAAM,SAAS,GAAG,KAAKA,UAAQ,MAAM,KAAK,GAAG,MAAM,UAAmB;AAAA,EAChG;AACF;;;A0BjIA,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAErC,SAAS,MAAAC,YAAU;AAmBnB,SAAS,oBAAAC,mBAAkB,sBAAsB;AACjD,SAAS,YAAAC,kBAAgB;;;ACtBzB,SAAS,MAAAC,YAAmB;AAC5B,SAAS,cAAAC,aAAY,oBAAAC,yBAA0C;AAC/D,SAAS,UAAU,WAAAC,iBAAe;;;ACDlC,SAAS,MAAAC,YAAU;AAEnB,SAAS,cAAAC,aAAY,oBAAAC,mBAAkB,mBAAAC,wBAAuB;AAC9D,SAAS,YAAAC,kBAAgB;AA6BlB,IAAM,2BAA2B,wBAAC,WAA+C;AACtF,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,qBAAqB,EAAE,UAAU,WAAW,YAAY;AAAA,EAC1D,IAAI;AAEJ,QAAM,aAAaC,KAAG,UAAU,UAAU;AAC1C,QAAM,iBAAiBA,KAAG,UAAU,cAAc;AAElD,QAAM,mBAAmBC,WAAS,UAAU;AAE5C,QAAM,CAAC,WAAW,IAAI,IAAIC,kBAAiB,EAAE,OAAO,kBAAkB,CAAC;AAEvE,QAAM,EAAE,MAAM,WAAW,QAAQ,SAAS,IAAI;AAI9C,MAAI,cAAcF,KAAG,CAAC;AACtB,MAAI,WAAWA,KAAG,CAAC;AAEnB,MAAI,SAASG,iBAAgB,UAAU,SAASA,iBAAgB,QAAQ;AACtE,WAAOH,KAAG,CAAC;AAAA,EACb;AAEA,MAAI,SAASG,iBAAgB,QAAQ;AACnC,UAAM,EAAE,sBAAsB,aAAa,IAAI;AAE/C,UAAM,oBAAoBH,KAAGC,WAAS,UAAU,oBAAoB,EAAE,IAAI,EAAE,MAAM;AAElF,kBAAc,gCAAgC;AAAA,MAC5C;AAAA,MACA;AAAA,MACA,eAAe,aAAa,UAAU;AAAA,MACtC,aAAa,iBAAiB;AAAA,IAChC,CAAC;AAAA,EACH,OAAO;AACL,UAAM,EAAE,eAAe,IAAI;AAE3B,QAAI,gBAAgB;AAClB,iBAAW;AAAA,IACb;AAEA,kBAAc,gCAAgC;AAAA,MAC5C;AAAA,MACA,aAAa,iBAAiB;AAAA,IAChC,CAAC;AAAA,EACH;AAEA,QAAM,SAAS,UAAU;AAAA,IACvB;AAAA,IACA,YAAYD,KAAG,UAAU;AAAA,IACzB;AAAA,IACA;AAAA,IACA,aAAa,iBAAiB;AAAA,EAChC,CAAC;AAED,QAAM,eAAe,SAAS,KAAK,CAAC,WAAW,OAAO,SAASI,YAAW,YAAY,GAAG;AAIzF,QAAM,kBAAkB,UAAU,OAAO,CAAC,KAAK,QAAQ,MAAM,IAAI,YAAY,CAAC;AAE9E,QAAM,SAAS,UAAU;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,SAAS,gBAAgB;AAAA,IAC7B;AAAA,IACA,KAAK;AAAA,IACL,aAAa;AAAA,IACb;AAAA,EACF,CAAC;AAED,SAAO;AACT,GAjFwC;;;ACjCxC,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAErC,SAAS,MAAAC,YAAU;AACnB,SAAS,eAAAC,cAAa,mBAAAC,yBAAuB;;;ACJ7C,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,UAAU;AAEnB,SAAS,aAAAC,kBAAiB;AAGnB,SAAS,iBAA4B,QAAiB,OAAyB;AACpF,SAAO,OAAO,OAAO,CAAC,MAAM,MAAM,SAAS,EAAE,IAAI,CAAC;AACpD;AAFgB;AAKT,SAAS,gBAA2B,QAAiB,MAAiB;AAC3E,SAAO,OAAO,OAAO,CAAC,MAAM,EAAE,SAAS,IAAI;AAC7C;AAFgB;AAKT,SAAS,cAAc,QAA8B;AAC1D,SAAO,gBAA2B,QAAQC,WAAU,IAAI;AAC1D;AAFgB;AAKT,SAAS,iBAAiB,QAAiB;AAChD,SAAO,gBAA8B,QAAQA,WAAU,OAAO;AAChE;AAFgB;AAKT,SAAS,wBAAwB,QAAiB;AACvD,SAAO,iBAA2C,QAAQ,CAACA,WAAU,MAAMA,WAAU,OAAO,CAAC;AAC/F;AAFgB;AAKT,SAAS,YAAY,OAAkC;AAC5D,SAAO,MAAM,SAASA,WAAU;AAClC;AAFgB;AAKT,SAAS,kBAAkB,QAAiB;AACjD,SAAO,gBAA+B,QAAQA,WAAU,QAAQ;AAClE;AAFgB;AAKhB,SAAS,cAAc,QAAiB,SAAwC;AAC9E,QAAM,aAAa,cAAc,MAAM;AACvC,SAAO,WAAW,KAAK,CAAC,MAAM,EAAE,YAAY,OAAO;AACrD;AAHS;AAMF,SAAS,sCACd,QACA,aAC8B;AAC9B,QAAM,aAAa,oBAAI,IAA6B;AAEpD,0BAAwB,MAAM,EAAE,QAAQ,CAAC,UAAU;AACjD,UAAM,UAAU,YAAY,KAAK,IAAI,MAAM,UAAU;AACrD,UAAM,QAAQ,YAAY,KAAK,IAAI,MAAM,QAAQ,MAAM;AAGvD,QAAI,YAAY,WAAW,IAAI,OAAO;AACtC,QAAI,CAAC,WAAW;AACd,kBAAY,oBAAI,IAAgB;AAChC,iBAAW,IAAI,SAAS,SAAS;AAAA,IACnC;AAGA,QAAI,eAAe,UAAU,IAAI,KAAK;AACtC,QAAI,CAAC,cAAc;AACjB,qBAAe,IAAI,GAAG,CAAC;AACvB,gBAAU,IAAI,OAAO,YAAY;AAAA,IACnC;AAGA,cAAU,IAAI,OAAO,aAAa,IAAI,MAAM,MAAM,CAAC;AAAA,EACrD,CAAC;AAED,SAAO;AACT;AA7BgB;AAgChB,SAAS,iBAAiB,QAA2C;AACnE,SAAO,iBAAiB,MAAM,IAAI,CAAC;AACrC;AAFS;AAIF,SAAS,oBACd,QACA,SACA,cAAc,OACwB;AACtC,QAAM,YAAY,cAAc,QAAQ,OAAO;AAC/C,MAAI,WAAW;AACb,WAAO;AAAA,EACT;AAEA,MAAI,aAAa;AACf,WAAO,iBAAiB,MAAM;AAAA,EAChC;AAGA,SAAO;AACT;AAhBgB;AAmBT,SAAS,0BACd,QACA,YAC2B;AAC3B,MAAI,cAAc,MAAM;AACtB,WAAO;AAAA,EACT;AAEA,QAAM,gBAAgB,SAAS,UAAU;AAEzC,MAAI,CAAC,eAAe;AAClB,WAAO;AAAA,EACT;AACA,MAAI,cAAc,SAASA,WAAU,UAAU;AAC7C,UAAM,IAAIC;AAAA,MACRC,YAAU;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AArBgB;AAwBT,SAAS,uBAAuB,OAAc;AACnD,MAAI,MAAM,SAASF,WAAU,MAAM;AACjC,WAAO,MAAM,MAAM,SAAS;AAAA,EAC9B;AAEA,MAAI,MAAM,SAASA,WAAU,SAAS;AACpC,WAAO,MAAM,UAAU,SAAS;AAAA,EAClC;AAEA,SAAO;AACT;AAVgB;;;ACtHhB,SAAS,cAAAG,mBAAkB;AAGpB,SAAS,iBAA6B,SAAmB,MAAkB;AAChF,SAAO,QAAQ,OAAO,CAAC,MAAM,EAAE,SAAS,IAAI;AAC9C;AAFgB;AAKT,SAAS,0BAA0B,SAAmB;AAC3D,SAAO,iBAAwC,SAASC,YAAW,eAAe;AACpF;AAFgB;AAKT,SAAS,eAAe,SAAmB;AAChD,SAAO,iBAA6B,SAASA,YAAW,IAAI;AAC9D;AAFgB;AAKT,SAAS,iBAAiB,SAAmB;AAClD,SAAO,iBAA+B,SAASA,YAAW,MAAM;AAClE;AAFgB;AAKT,SAAS,mBAAmB,SAAmB;AACpD,SAAO,iBAAiC,SAASA,YAAW,QAAQ;AACtE;AAFgB;AAKT,SAAS,mBAAmB,SAAmB;AACpD,SAAO,iBAAiC,SAASA,YAAW,QAAQ;AACtE;AAFgB;;;ACyET,IAAK,sBAAL,kBAAKC,yBAAL;AACL,EAAAA,qBAAA,YAAS;AACT,EAAAA,qBAAA,UAAO;AACP,EAAAA,qBAAA,YAAS;AACT,EAAAA,qBAAA,aAAU;AACV,EAAAA,qBAAA,YAAS;AACT,EAAAA,qBAAA,UAAO;AANG,SAAAA;AAAA,GAAA;AAYL,IAAK,oBAAL,kBAAKC,uBAAL;AACL,EAAAA,mBAAA,eAAY;AACZ,EAAAA,mBAAA,aAAU;AACV,EAAAA,mBAAA,iBAAc;AACd,EAAAA,mBAAA,aAAU;AACV,EAAAA,mBAAA,4BAAyB;AACzB,EAAAA,mBAAA,4BAAyB;AANf,SAAAA;AAAA,GAAA;AAuBL,IAAK,gBAAL,kBAAKC,mBAAL;AACL,EAAAA,eAAA,sBAAmB;AACnB,EAAAA,eAAA,qBAAkB;AAClB,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,aAAU;AACV,EAAAA,eAAA,sBAAmB;AANT,SAAAA;AAAA,GAAA;AAgCL,IAAK,cAAL,kBAAKC,iBAAL;AACL,EAAAA,0BAAA;AACA,EAAAA,0BAAA;AAFU,SAAAA;AAAA,GAAA;AAQL,IAAK,YAAL,kBAAKC,eAAL;AACL,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,UAAO;AAFG,SAAAA;AAAA,GAAA;;;AHtIL,SAAS,kBACd,UACA,MACA;AACA,UAAQ,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,SAAS,IAAI;AACvD;AALgB;AAaT,SAAS,uBAAuB,iBAAuD;AAC5F,UAAQ,iBAAiB;AAAA,IACvB,KAAKC,kBAAgB;AACnB;AAAA,IACF,KAAKA,kBAAgB;AACnB;AAAA,IACF,KAAKA,kBAAgB;AACnB;AAAA,IACF,KAAKA,kBAAgB;AACnB;AAAA,IACF,KAAKA,kBAAgB;AACnB;AAAA,IACF,KAAKA,kBAAgB;AACnB;AAAA,IACF;AACE,YAAM,IAAIC;AAAA,QACRC,YAAU;AAAA,QACV,iCAAiC,eAAe;AAAA,MAClD;AAAA,EACJ;AACF;AApBgB;AAuBT,SAAS,OAAO,iBAAkC,MAA2B;AAClF,QAAM,SAAS,uBAAuB,eAAe;AAErD,SAAO,WAAW;AACpB;AAJgB;AAOT,SAAS,WAAW,iBAAkC;AAC3D,SAAO,OAAO,kCAAyC;AACzD;AAFgB;AAKT,SAAS,aAAa,iBAAkC;AAC7D,SAAO,OAAO,sCAA2C;AAC3D;AAFgB;AAKT,SAAS,aAAa,iBAAkC;AAC7D,SAAO,OAAO,sCAA2C;AAC3D;AAFgB;AAKT,SAAS,cAAc,iBAAkC;AAC9D,SAAO,OAAO,wCAA4C;AAC5D;AAFgB;AAKT,SAAS,aAAa,iBAAkC;AAC7D,SAAO,OAAO,sCAA2C;AAC3D;AAFgB;AAKT,SAAS,WAAW,iBAAkC;AAC3D,SAAO,OAAO,kCAAyC;AACzD;AAFgB;AAKT,SAAS,eAAe,GAAkB;AAC/C,SAAO,CAAC,MAAqB,EAAE,YAAY,EAAE;AAC/C;AAFgB;AAKT,SAAS,gBAAgB,UAAsC;AACpE,SAAO,kBAAgD,UAAUC,aAAY,IAAI;AACnF;AAFgB;AAKT,SAAS,sBAAsB,UAAsC;AAC1E,SAAO,kBAAsD,UAAUA,aAAY,UAAU;AAC/F;AAFgB;AAKhB,SAAS,YAAY,KAAgB,KAAiC;AACpE,QAAM,UAAU,IAAI,cAAc,CAAC;AACnC,QAAM,UAAU,IAAI,cAAc,CAAC;AAEnC,QAAM,WAAW,oBAAI,IAA2B;AAGhD,UAAQ,QAAQ,CAAC,UAAU;AACzB,aAAS,IAAI,MAAM,SAAS,EAAE,GAAG,MAAM,CAAC;AAAA,EAC1C,CAAC;AAGD,UAAQ,QAAQ,CAAC,UAAU;AACzB,UAAM,gBAAgB,SAAS,IAAI,MAAM,OAAO;AAChD,QAAI,eAAe;AACjB,oBAAc,SAASC,KAAG,cAAc,MAAM,EAAE,IAAI,MAAM,MAAM;AAAA,IAClE,OAAO;AACL,eAAS,IAAI,MAAM,SAAS,EAAE,GAAG,MAAM,CAAC;AAAA,IAC1C;AAAA,EACF,CAAC;AAED,SAAO,MAAM,KAAK,SAAS,OAAO,CAAC;AACrC;AAtBS;AAyBT,SAAS,gBAAgB,GAAc,GAAc;AACnD,SACE,EAAE,SAAS,EAAE,QACb,EAAE,MAAM,YAAY,EAAE,MAAM,WAC5B,EAAE,IAAI,YAAY,EAAE,IAAI,WACxB,EAAE,MAAM,SAAS,EAAE,MAAM,QACzB,EAAE,IAAI,SAAS,EAAE,IAAI;AAEzB;AARS;AAWT,SAAS,gBAAgB,UAAqB,OAA2C;AACvF,MAAI,CAAC,MAAM,YAAY,QAAQ;AAC7B,WAAO,SAAS;AAAA,EAClB;AAEA,SAAO,SAAS,YAAY,SAAS,YAAY,UAAU,KAAK,IAAI,MAAM;AAC5E;AANS;AAST,SAAS,WAAW,UAAqB,OAAsC;AAC7E,MAAI,CAAC,MAAM,OAAO,QAAQ;AACxB,WAAO,SAAS;AAAA,EAClB;AAEA,SAAO,CAAC,GAAI,SAAS,SAAS,CAAC,GAAI,GAAG,MAAM,KAAK;AACnD;AANS;AAST,SAAS,gBAAgB,UAAqB,OAA6B;AACzE,SAAO;AAAA,IACL,GAAG;AAAA,IACH,YAAY,gBAAgB,UAAU,KAAK;AAAA,IAC3C,OAAO,WAAW,UAAU,KAAK;AAAA,IACjC,UAAU;AAAA,MACR,GAAI,SAAS,YAAY,CAAC;AAAA,MAC1B,GAAI,MAAM,UAAU,OAAO,CAAC,MAAM,CAAC,SAAS,UAAU,KAAK,CAAC,OAAO,OAAO,CAAC,CAAC,KAAK,CAAC;AAAA,IACpF;AAAA,EACF;AACF;AAVS;AAaF,SAAS,aAAa,YAAyB,OAA+B;AACnF,QAAM,gBAAgB,WAAW,UAAU,CAAC,OAAO,gBAAgB,IAAI,KAAK,CAAC;AAE7E,MAAI,kBAAkB,IAAI;AACxB,WAAO,CAAC,GAAG,YAAY,KAAK;AAAA,EAC9B;AAEA,SAAO,WAAW,IAAI,CAAC,IAAI,UAAW,UAAU,gBAAgB,gBAAgB,IAAI,KAAK,IAAI,EAAG;AAClG;AARgB;AAWT,SAAS,uBAAuB,UAAsC;AAC3E,SAAO,kBAAuD,UAAUD,aAAY,WAAW;AACjG;AAFgB;AAYT,SAAS,8BAA8B;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AACF,GAAqE;AACnE,QAAM,qBAAqB,sBAAsB,QAAQ;AAEzD,QAAM,6BAA6B,mBAAmB;AAAA,IACpD,CAAC,yBAAyB,YAAY;AACpC,YAAM,QAAQ,oBAAoB,QAAQ,aAAa,IAAI;AAC3D,UAAI,OAAO;AACT,cAAM,eAAe,uBAAuB,KAAK;AACjD,cAAM,yBAAyB,aAAa,yBAAyB;AAAA,UACnE;AAAA,UACA,MAAM;AAAA,YACJ;AAAA,YACA,SAAS;AAAA,UACX;AAAA,UACA,IAAI;AAAA,YACF;AAAA,YACA,SAAS,QAAQ,UAAU,SAAS;AAAA,YACpC;AAAA,UACF;AAAA,UACA,YAAY;AAAA,YACV;AAAA,cACE,QAAQ,QAAQ;AAAA,cAChB,SAAS;AAAA,YACX;AAAA,UACF;AAAA,UACA,UAAU,CAAC,OAAO;AAAA,QACpB,CAAC;AAED,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAzCgB;AA4ChB,SAAS,iBACP,eACA,QACA,UACA,aACA,YACgB;AAChB,QAAM,MAAM,SAAS,cAAc,UAAU;AAC7C,MAAI,CAAC,KAAK;AACR,WAAO,CAAC;AAAA,EACV;AAKA,SAAO,CAAC;AAEV;AAjBS;AAoBT,SAAS,cAAc,SAAoE;AACzF,SAAO,QAAQ,QAAQ,OAAO,IAC1B,SACA;AAAA,IACE;AAAA,MACE,QAAQ,QAAQ;AAAA,MAChB,SAAS,QAAQ;AAAA,IACnB;AAAA,EACF;AACN;AATS;AAYT,SAAS,mBACP,SACA,eACA,QACA,QACA,YACA,WACA,aACa;AACb,QAAM,UAAU,QAAQ,YAAYE,eAAc,cAAc,QAAQ;AACxE,QAAM,QAAQ,oBAAoB,QAAQ,SAAS,YAAY,WAAW;AAC1E,MAAI,CAAC,OAAO;AACV,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,eAAe,uBAAuB,KAAK;AACjD,QAAM,QAAQ,iBAAiB,eAAe,QAAQ,SAAS,YAAY,SAAS;AAEpF,SAAO;AAAA,IACL;AAAA,MACE;AAAA,MACA,MAAM;AAAA,QACJ;AAAA,QACA,SAAS;AAAA,MACX;AAAA,MACA,IAAI;AAAA,QACF;AAAA,QACA,SAAS,QAAQ;AAAA,MACnB;AAAA,MACA,YAAY,cAAc,OAAO;AAAA,MACjC;AAAA,MACA,UAAU,CAAC,OAAO;AAAA,IACpB;AAAA,EACF;AACF;AAlCS;AAqCF,SAAS,0BAA0B;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAGgC;AAC9B,QAAM,uBAAuB,gBAAgB,QAAQ;AACrD,QAAM,kBAAkB,mBAAmB,OAAO;AAElD,SAAO,gBAAgB,QAAQ,CAAC,WAAW;AACzC,UAAM,gBAAgB,0BAA0B,QAAQ,OAAO,UAAU;AACzE,QAAI,CAAC,eAAe;AAClB,aAAO,CAAC;AAAA,IACV;AAEA,WAAO,qBACJ,OAAO,CAAC,YAAY,QAAQ,OAAO,cAAc,UAAU,EAC3D;AAAA,MAAQ,CAAC,YACR;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACJ,CAAC;AACH;AAnCgB;AA8ChB,SAAS,oCACP,SACA,gBACA,eACA;AACA,QAAM,EAAE,IAAI,WAAW,SAAS,OAAO,IAAI;AAC3C,MAAI,EAAE,IAAI,YAAY,IAAI;AAE1B,QAAM,SAAS,eAAe,KAAK,CAAC,UAAU,MAAM,eAAe,SAAS;AAI5E,MAAIA,iBAAgB,aAAa;AAC/B,UAAM,SAAS,cAAc,KAAK,CAAC,WAAW,OAAO,YAAY,OAAO;AAExE,kBAAc,QAAQ,MAAM;AAAA,EAC9B;AAEA,QAAM,WAAW,eAAe,KAAK,CAAC,UAAU,MAAM,eAAe,WAAW;AAIhF,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,IAAI;AAAA,MACF,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,SAAS,QAAQ,SAAS;AAAA,QAC1B;AAAA,MACF;AAAA,IACF;AAAA,IACA,UAAU,CAAC,OAAO;AAAA,EACpB;AACF;AAxCS;AA2CF,SAAS,sBAAsB;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA6C;AAC3C,MAAI,aAA0B,CAAC;AAE/B,QAAM,cAAc,eAAe,OAAO;AAC1C,QAAM,iBAAiB,kBAAkB,MAAM;AAC/C,QAAM,gBAAgB,iBAAiB,OAAO;AAE9C,QAAM,aAAa,sCAAsC,QAAQ,WAAW;AAK5E,cAAY,QAAQ,CAAC,EAAE,QAAQ,SAAS,GAAG,MAAM;AAC/C,UAAM,WAAW,WAAW,IAAI,OAAO,KAAK,oBAAI,IAAgB;AAChE,QAAI;AACJ,QAAI;AAEJ,eAAW,CAAC,SAAS,WAAW,KAAK,UAAU;AAC7C,UAAI,CAAC,eAAe;AAClB,wBAAgB;AAAA,MAClB;AAEA,UAAI,YAAY,IAAI,MAAM,GAAG;AAC3B,wBAAgB;AAChB;AAAA,MACF;AAAA,IACF;AAGA,oBAAgB,iBAAiB;AAEjC,QAAI,eAAe;AACjB,mBAAa,aAAa,YAAY;AAAA,QACpC;AAAA,QACA,MAAM;AAAA,UACJ;AAAA,UACA,SAAS;AAAA,QACX;AAAA,QACA,IAAI;AAAA,UACF;AAAA,UACA,SAAS;AAAA,QACX;AAAA,QACA,YAAY,CAAC,EAAE,SAAS,OAAO,CAAC;AAAA,MAClC,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAOD,QAAM,mBAAmB;AAAA,IACvB;AAAA,IACAF,aAAY;AAAA,EACd;AAMA,QAAM,sBAAsB;AAAA,IAC1B;AAAA,IACAA,aAAY;AAAA,EACd;AAEA,GAAC,GAAG,kBAAkB,GAAG,mBAAmB,EAAE,QAAQ,CAAC,YAAY;AACjE,UAAM,YAAY,oCAAoC,SAAS,gBAAgB,aAAa;AAE5F,iBAAa,aAAa,YAAY,SAAS;AAAA,EACjD,CAAC;AAED,SAAO;AACT;AA9EgB;AAiFT,SAAS,yBAAyB,SAAgC;AACvE,QAAM,cAAc,eAAe,OAAO;AAC1C,QAAM,wBAAwB,YAAY,OAAO,CAAC,MAAM,WAAW;AACjE,UAAM,aAAa,aAAa,MAAM;AAAA,MACpC;AAAA,MACA,MAAM;AAAA,QACJ;AAAA,QACA,SAAS;AAAA,MACX;AAAA,MACA,IAAI;AAAA,QACF;AAAA,QACA,SAAS,OAAO,GAAG,SAAS;AAAA,MAC9B;AAAA,MACA,YAAY;AAAA,QACV;AAAA,UACE,SAAS,OAAO,QAAQ,SAAS;AAAA,UACjC,QAAQ,OAAO;AAAA,QACjB;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT,GAAG,CAAC,CAAgB;AAEpB,SAAO;AACT;AAzBgB;AA4BT,SAAS,6BAA6B,EAAE,QAAQ,QAAQ,GAAkC;AAC/F,QAAM,yBAAyB,0BAA0B,OAAO;AAChE,QAAM,QAAQ,wBAAwB,MAAM,EAAE,CAAC;AAC/C,QAAM,cAAc,uBAAuB,KAAK;AAChD,QAAM,4BAA4B,uBAAuB,OAAO,CAAC,MAAM,0BAA0B;AAC/F,UAAM,aAAa,aAAa,MAAM;AAAA,MACpC;AAAA,MACA,MAAM;AAAA,QACJ;AAAA,QACA,SAAS;AAAA,MACX;AAAA,MACA,IAAI;AAAA,QACF;AAAA,QACA,SAAS,uBAAuB,cAAc;AAAA,MAChD;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT,GAAG,CAAC,CAAgB;AAEpB,SAAO;AACT;AArBgB;AAwBT,SAAS,cAAc;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAoC;AAClC,MAAI,aAAa,eAAe,GAAG;AACjC,WAAO,CAAC,GAAG,6BAA6B,EAAE,QAAQ,QAAQ,CAAC,CAAC;AAAA,EAC9D;AAEA,MAAI,aAAa,eAAe,GAAG;AACjC,WAAO;AAAA,MACL,GAAG,sBAAsB,EAAE,QAAQ,SAAS,UAAU,YAAY,CAAC;AAAA,MACnE,GAAG,0BAA0B;AAAA,QAC3B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,MACD,GAAG,8BAA8B,EAAE,QAAQ,UAAU,YAAY,CAAC;AAAA,IACpE;AAAA,EACF;AAEA,SAAO,CAAC,GAAG,yBAAyB,OAAO,CAAC;AAC9C;AA/BgB;;;AInjBhB,SAAS,eAAAG,oBAAmB;AASrB,IAAM,oBAAoB,wBAAC,eAChC,mBAAmB,UAAU,GADE;AAG1B,IAAM,kCAAkC,wBAC7C,aACkB;AAClB,QAAM,eAA8B,CAAC;AAErC,WAAS,QAAQ,CAAC,YAAY;AAC5B,QAAI,QAAQ,SAASC,aAAY,MAAM;AACrC,mBAAa,KAAK;AAAA,QAChB,OAAO,QAAQ;AAAA,QACf,YAAY,QAAQ;AAAA,QACpB,SAAS,QAAQ;AAAA,QACjB,QAAQ,QAAQ;AAAA,MAClB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,SAAO;AACT,GAjB+C;AAmBxC,IAAM,kCAAkC,wBAC7C,aACkB;AAClB,QAAM,eAA8B,CAAC;AAErC,WAAS,QAAQ,CAAC,YAAY;AAC5B,QAAI,QAAQ,SAASA,aAAY,MAAM;AACrC,mBAAa,KAAK;AAAA,QAChB,OAAO,QAAQ;AAAA,QACf,YAAY,QAAQ;AAAA,QACpB,SAAS,QAAQ;AAAA,QACjB,QAAQ,QAAQ;AAAA,MAClB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,SAAO;AACT,GAjB+C;;;AC/B/C,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAErC,SAAS,MAAAC,YAAU;AAiBZ,IAAM,2BAA2B,wBAAC,cAA2C;AAClF,UAAQ,WAAW;AAAA,IACjB,KAAK;AACH;AAAA,IACF,KAAK;AACH;AAAA,IACF,KAAK;AACH;AAAA,IACF,KAAK;AACH;AAAA,IACF,KAAK;AACH;AAAA,IACF,KAAK;AACH;AAAA,IACF;AACE,YAAM,IAAIC;AAAA,QACRC,YAAU;AAAA,QACV,+BAA+B,SAAS;AAAA,MAC1C;AAAA,EACJ;AACF,GApBwC;AAuBjC,IAAM,yBAAyB,wBACpC,sBACqB;AACrB,QAAM,kBAAoC,CAAC;AAC3C,qBAAmB;AAAA,IAAQ,CAAC,EAAE,QAAQ,OAAO,MAC3C,gBAAgB,KAAK;AAAA,MACnB;AAAA,MACA,QAAQ,6BAA6B,MAAM;AAAA,IAC7C,CAAC;AAAA,EACH;AACA,SAAO;AACT,GAXsC;AA8B/B,IAAM,uBAAuB,wBAAC,yBAAoD;AACvF,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI,kBAAoC,CAAC;AACzC,MAAI;AAEJ,MAAI,kBAAkB;AACtB,MAAI,kBAAkB;AACtB,MAAI,kBAAkB;AACtB,MAAI,iCAAiC;AACrC,MAAI,iCAAiC;AAErC,MAAI,sBAAsB,MAAM;AAC9B,aAAS,yBAAyB,qBAAqB,IAAI;AAE3D,YAAQ,qBAAqB,MAAM;AAAA,MACjC,KAAK;AACH,eAAO,qBAAqB;AAC5B,kBAAU,qBAAqB,OAAO;AACtC,0BAAkB;AAClB,mBAAW,qBAAqB,UAAU,IAAI,kBAAkB;AAChE,mBAAWC,KAAG,qBAAqB,QAAQ;AAC3C,mBAAWA,KAAG,qBAAqB,QAAQ;AAC3C;AAAA,MAEF,KAAK;AACH,eAAO,qBAAqB;AAC5B,kBAAU,qBAAqB,OAAO;AACtC,0BAAkB;AAClB,mBAAWA,KAAG,qBAAqB,QAAQ;AAC3C,mBAAW,qBAAqB,UAAU,IAAI,kBAAkB;AAChE,mBAAWA,KAAG,qBAAqB,QAAQ;AAC3C;AAAA,MAEF,KAAK;AACH,eAAO,qBAAqB;AAC5B,0BAAkB;AAClB;AAAA,MAEF,KAAK;AACH,yCAAiC;AACjC,mBAAWA,KAAG,qBAAqB,QAAQ;AAC3C,mBAAWA,KAAG,qBAAqB,QAAQ;AAC3C,mBAAW,qBAAqB,yBAAyB,IAAI,kBAAkB;AAC/E,0BAAkB,uBAAuB,qBAAqB,eAAe;AAC7E;AAAA,MAEF,KAAK;AACH,yCAAiC;AACjC,mBAAWA,KAAG,qBAAqB,QAAQ;AAC3C,mBAAWA,KAAG,qBAAqB,QAAQ;AAC3C,mBAAW,qBAAqB,yBAAyB,IAAI,kBAAkB;AAC/E,0BAAkB,uBAAuB,qBAAqB,eAAe;AAC7E,sBAAc,qBAAqB;AACnC;AAAA,MAEF;AAAA,IACF;AAAA,EACF;AAEA,QAAM,yBAAwD;AAAA,IAC5D;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AACT,GAjFoC;AAyF7B,IAAM,wBAAwB,wBAAC,WACpC,UAAU,cAAc,SAASA,KAAG,OAAO,QAAQ,IAAI,QADpB;;;AP/G9B,SAAS,2BACd,QACA;AACA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS,CAAC;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,QAAM,UAAU,uBAAuB,QAAQ;AAE/C,QAAM,aAAaC,UAAQ,gBAAgB;AAE3C,QAAM,aAAa,cAAc;AAAA,IAC/B,iBAAiB,YAAY;AAAA,IAC7B,QAAQ,YAAY,UAAU,CAAC;AAAA,IAC/B,SAAS,YAAY,WAAW,CAAC;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,WAAW,uBAAuB,YAAY,IAAI;AAExD,QAAM,MAAMC,KAAG,YAAY,UAAU,KAAK,CAAC,WAAW,OAAO,SAASC,YAAW,GAAG,GAAG,IAAI;AAE3F,QAAM,EAAE,iBAAiB,iBAAiB,iBAAiB,SAAS,QAAQ,MAAM,SAAS,IACzF,qBAAqB,oBAAoB;AAE3C,QAAM,MACJ,YACA,yBAAyB;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA,qBAAqB;AAAA,MACnB;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAEH,QAAM,eAAe,gCAAgC,QAAQ;AAC7D,QAAM,eAAe,gCAAgC,QAAQ;AAE7D,MAAI;AAEJ,MAAI,MAAM;AACR,WAAO,SAAS,UAAU,IAAI;AAAA,EAChC;AAEA,QAAM,qBAA2D;AAAA,IAC/D;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY,WAAW,YAAY,IAAI;AAAA,IACvC,cAAc,aAAa,YAAY,IAAI;AAAA,IAC3C,cAAc,aAAa,YAAY,IAAI;AAAA,IAC3C,eAAe,cAAc,YAAY,IAAI;AAAA,IAC7C,cAAc,aAAa,YAAY,IAAI;AAAA,IAC3C,YAAY,WAAW,YAAY,IAAI;AAAA,IACvC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AACT;AA7FgB;AAyGT,SAAS,0CACd,QACA;AACA,QAAM,EAAE,IAAI,sBAAsB,oBAAoB,aAAa,WAAW,OAAO,IAAI;AAEzF,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,qBAAqB,oBAAoB;AAE7C,MAAI,UAAU;AACZ,cAAU,uBAAuB,QAAQ;AACzC,mBAAe,gCAAgC,QAAQ;AACvD,mBAAe,gCAAgC,QAAQ;AAAA,EACzD;AAEA,MAAI,oBAAoB;AACtB,kBAAc,mBAAmB,cAAc;AAC/C,WAAO,uBAAuB,YAAY,IAAI;AAC9C,UAAMD,KAAG,YAAY,UAAU,KAAK,CAAC,WAAW,OAAO,SAASC,YAAW,GAAG,GAAG,IAAI;AAErF,QAAI,UAAU;AACZ,YAAM,aAAaF,UAAQ,IAAIG,kBAAiB,EAAE,OAAO,WAAW,CAAC;AAErE,mBAAa,cAAc;AAAA,QACzB,iBAAiB,YAAY;AAAA,QAC7B,QAAQ,YAAY,UAAU,CAAC;AAAA,QAC/B,SAAS,YAAY,WAAW,CAAC;AAAA,QACjC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAEA,QAAM,qBAAwD;AAAA,IAC5D;AAAA,IACA,KAAK;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAI,eAAe;AAAA,MACjB,YAAY,WAAW,YAAY,IAAI;AAAA,MACvC,cAAc,aAAa,YAAY,IAAI;AAAA,MAC3C,cAAc,aAAa,YAAY,IAAI;AAAA,MAC3C,eAAe,cAAc,YAAY,IAAI;AAAA,MAC7C,cAAc,aAAa,YAAY,IAAI;AAAA,MAC3C,YAAY,WAAW,YAAY,IAAI;AAAA,IACzC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AACT;AAnFgB;;;AQ1JhB,SAAS,aAAAC,YAAW,sBAAsB;AAC1C,SAAS,eAAAC,qBAAmB;AAC5B,SAAS,eAAAC,oBAAmB;AA8BrB,SAAS,kBAA+B,MAI5B;AACjB,QAAM,EAAE,UAAU,SAAS,eAAe,CAAC,EAAE,IAAI;AAEjD,MAAI,eAAe;AACnB,MAAI,QAAQ,gBAAgB,YAAY;AACtC,UAAM,mBAAmB,SAAS;AAAA,MAChC,CAAC,MAAM,EAAE,SAASC,aAAY,QAAQ,EAAE,OAAOC;AAAA,IACjD;AAEA,QAAI,kBAAkB;AACpB,qBAAe,iBAAiB;AAAA,IAClC;AAAA,EACF;AAEA,SAAO,SAAS;AAAA,IACd,CAAC,EAAE,MAAM,YAAY,GAAG,YAAY;AAClC,UAAI,QAAQ,SAASD,aAAY,WAAW,QAAQ,SAASA,aAAY,KAAK;AAC5E,cAAM,mBAAmB,QAAQ,OAAOC,iBAAe,iBAAiB,QAAQ;AAChF,cAAM,cAAc,oBAAoB,aAAa,QAAQ,EAAE;AAE/D,YAAI,aAAa;AACf,gBAAM,iBAAiB,mBACnB,IAAIC,WAAU,OAAO,IACrB,IAAIA,WAAU,aAAa,QAAQ,EAAE,CAAC;AAE1C,gBAAM,OACJ,QAAQ,SAASF,aAAY,MACzB,IAAI,eAAe,KAAK,EAAE,OAAO,QAAQ,EAAE,IAC3C,QAAQ;AAEd,gBAAM,CAAC,UAAU,IAAI,eAAe,UAAU,MAAM,QAAQ,GAAG,SAAS,CAAC;AACzE,eAAK,KAAK,UAAU;AAEpB,sBAAY,QAAQ,EAAE,IAAI,CAAC,GAAI,YAAY,QAAQ,EAAE,KAAK,CAAC,GAAI,UAAU;AAAA,QAC3E;AAAA,MACF;AAEA,aAAO,EAAE,MAAM,YAAY;AAAA,IAC7B;AAAA,IACA,EAAE,MAAM,CAAC,GAAG,aAAa,CAAC,EAAE;AAAA,EAC9B;AACF;AA7CgB;;;ATuFT,IAAM,sBAAN,MAAM,qBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuB/B,YACE,IACA,UACA,SACA,MACQ,sBACR;AADQ;AAGR,QAAI,OAAO,OAAO,UAAU;AAC1B,WAAK,KAAK;AAAA,IACZ,OAAO;AAEL,WAAK,KAAK,GAAG,iBAAiB,OAAO;AACrC,WAAK,UAAU;AAAA,IACjB;AAEA,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,yBAAyB,KAAK,uBAAuB,KAAK,IAAI;AAAA,EACrE;AAAA,EAnKF,OAwHiC;AAAA;AAAA;AAAA;AAAA,EAE/B;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA,UAAcG,KAAG,CAAC;AAAA;AAAA,EAElB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEQ,uBAAuB;AAAA,EACvB,kBAAmD,oBAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCnE,aAAa,OACX,IACA,UACA,MAC8B;AAC9B,UAAM,UAAU,MAAM,SAAS,WAAW;AAC1C,UAAM,WAAW,IAAI,qBAAoB,IAAI,UAAU,SAAS,IAAI;AACpE,UAAM,SAAS,MAAM;AACrB,WAAO;AAAA,EACT;AAAA,EAEQ,iCACN,aACA;AACA,UAAM,SAAS,KAAK;AACpB,QAAI,CAAC,QAAQ;AACX;AAAA,IACF;AAEA,UAAM,KAAK;AAEX,QAAI,OAAO,SAAS,mBAAmB,OAAO,SAAS,iBAAiB;AACtE,SAAG,SAAS,GAAG,OAAO,IAAI,CAAC,OAAO,QAAQ;AACxC,YAAI,eAAe,OAAO;AACxB,gBAAM,qBAAqB,OAAO,YAAY,SAAS,GAAG;AAC1D,iBAAO;AAAA,YACL,GAAG;AAAA,YACH,WAAW,eAAe,oBAAoB,mBAAmB,SAAS;AAAA,UAC5E;AAAA,QACF;AACA,eAAO;AAAA,MACT,CAAC;AAED,SAAG,UAAU,OAAO,YAAY,QAAQ,IAAI,4BAA4B;AAExE,UAAI,OAAO,YAAY,cAAc;AACnC,QAAC,GAA2C,eAAe,OAAO,YAAY;AAAA,MAChF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,iBAGX;AACD,QAAI,KAAK,SAAS;AAChB,YAAMC,MAAK,KAAK,QAAQ,cAAc;AACtC,WAAK,iCAAiCA,GAAE;AACxC,aAAO;AAAA,QACL,IAAAA;AAAA,QACA,OAAO,KAAK,QAAQ,mBAAmB;AAAA,MACzC;AAAA,IACF;AAEA,UAAM,iBAAiB,KAAK,kBAAmB,MAAM,KAAK,MAAM;AAEhE,UAAM,EAAE,WAAW,IAAI;AACvB,UAAM,QAAQC,WAAS,UAAU;AACjC,UAAM,CAAC,EAAE,IAAI,IAAIC,kBAAiB,EAAE,OAAO,OAAO,CAAC;AAEnD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,cAA0C;AAChD,UAAM,SAAS,KAAK,qBAAqB;AAEzC,YAAQ,QAAQ,MAAM;AAAA,MACpB,KAAK;AAAA,MACL,KAAK;AACH,eAAO,OAAO,SAAS,IAAI,kBAAkB;AAAA,MAC/C;AACE,eAAO,CAAC;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,QAAiC;AACrC,UAAM,WAAW,MAAM,KAAK,SAAS,WAAW,2BAA2B;AAAA,MACzE,eAAe,KAAK;AAAA,IACtB,CAAC;AAOD,QAAI,CAAC,SAAS,aAAa;AACzB,YAAM,eAAe,MAAM,KAAK,SAAS,WAAW,aAAa;AAAA,QAC/D,eAAe,KAAK;AAAA,MACtB,CAAC;AAED,uBAAiB,EAAE,aAAa,KAAK,cAAc;AACjD,YAAI,cAAc;AAChB,eAAK,SAAS;AACd;AAAA,QACF;AAAA,MACF;AAGA,aAAO,KAAK,MAAM;AAAA,IACpB;AAEA,SAAK,iBAAiB,SAAS;AAE/B,WAAO,SAAS;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,sBACJ,iBAC+C;AAC/C,UAAM,EAAE,IAAI,aAAa,OAAO,iBAAiB,IAC/C,MAAM,KAAK,eAAiC;AAE9C,UAAM,EAAE,YAAY,gBAAgB,UAAU,YAAY,IACxD,MAAM,KAAK,SAAS,aAAa;AAGnC,UAAM,oBAAoB,KAAK,qBAAqB;AACpD,UAAM,WAAW,sBAAsB,iBAAiB;AACxD,UAAM,WAAW,WAAWH,KAAG,CAAC,IAAI,MAAM,KAAK,SAAS,kBAAkB;AAE1E,UAAM,aAAa,MAAM,KAAK,SAAS,SAAS,GAAG,oBAAoB,aAAa;AACpF,UAAM,cAAc,MAAM,KAAK,SAAS,eAAe;AAEvD,UAAM,qBAAqB,2BAA6C;AAAA,MACtE,IAAI,KAAK;AAAA,MACT,UAAU,KAAK,YAAY;AAAA,MAC3B;AAAA,MACA;AAAA,MACA,sBAAsB;AAAA,MACtB;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,qCACJ,iBAC4C;AAC5C,UAAM,cAAc,MAAM,KAAK,SAAS,eAAe;AACvD,UAAM,aAAa,MAAM,KAAK,SAAS,SAAS,GAAG,oBAAoB,aAAa;AAEpF,UAAM,qBAAqB,0CAA0C;AAAA,MACnE,IAAI,KAAK;AAAA,MACT,sBAAsB,KAAK,yBAAyB,KAAK;AAAA,MACzD;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,oBAAoB,KAAK;AAAA,IAC3B,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEQ,cAAc,MAAkB;AACtC,UAAM,YAAY,KAAK,gBAAgB,IAAI,IAAI,KAAK,CAAC;AAErD,cAAU,QAAQ,CAAC,YAAY,QAAQ,CAAC;AACxC,SAAK,gBAAgB,OAAO,IAAI;AAAA,EAClC;AAAA,EAEA,MAAc,cAAc,MAAiC;AAC3D,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,YAAY,KAAK,gBAAgB,IAAI,IAAI,KAAK,CAAC;AACrD,gBAAU,KAAK,MAAM;AACnB,gBAAQ;AAAA,MACV,CAAC;AACD,WAAK,gBAAgB,IAAI,MAAM,SAAS;AAExC,WAAK,oBAAoB,EAAE,MAAM,MAAM;AAAA,IACzC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,sBAAsB;AAClC,UAAM,OAAO,KAAK,QAAQ;AAG1B,QAAI,SAAS,SAAS,mBAAmB,SAAS,kBAAkB;AAElE,WAAK,cAAc,iBAAiB;AACpC,WAAK,cAAc,cAAc;AACjC;AAAA,IACF;AAEA,QAAI,KAAK,sBAAsB;AAC7B;AAAA,IACF;AAEA,SAAK,uBAAuB;AAE5B,UAAM,eACJ,KAAK,wBACJ,MAAM,KAAK,SAAS,WAAW,aAAa;AAAA,MAC3C,eAAe,KAAK;AAAA,MACpB,wBAAwB;AAAA,IAC1B,CAAC;AAEH,qBAAiBI,QAAO,cAAc;AAEpC,YAAM,eAAe,kBAAkBA,OAAMA,KAAI,eAAeA,KAAI;AACpE,WAAK,SAAS;AAGd,UAAI,aAAa,SAAS,qBAAqB;AAC7C,cAAM,IAAIC;AAAA,UACRC,YAAU;AAAA,UACV,yCAAyC,aAAa,MAAM;AAAA,QAC9D;AAAA,MACF;AAEA,UACE,aAAa,SAAS,kCACtB,aAAa,SAAS,gCACtB;AACA,aAAK,wBAAwB;AAC7B,aAAK,cAAc,iBAAiB;AAAA,MACtC;AAEA,UAAI,aAAa,SAAS,mBAAmB,aAAa,SAAS,iBAAiB;AAClF,aAAK,cAAc,cAAc;AAMjC,aAAK,cAAc,iBAAiB;AACpC,aAAK,uBAAuB;AAC5B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,8BAA8B;AAC1C,QAAI;AACF,YAAM,KAAK,cAAc,cAAc;AAAA,IACzC,SAAS,OAAO;AACd,WAAK,mBAAmB;AACxB,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAc,iCAAiC;AAC7C,QAAI;AACF,YAAM,KAAK,cAAc,iBAAiB;AAAA,IAC5C,SAAS,OAAO;AACd,WAAK,mBAAmB;AACxB,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,eACJ,iBAC8C;AAC9C,UAAM,qBAAqB,MAAM,KAAK,sBAAwC,eAAe;AAE7F,UAAM,oBAAyD;AAAA,MAC7D,GAAG;AAAA,IACL;AAEA,QAAI,EAAE,MAAM,YAAY,IAAiB,EAAE,MAAM,CAAC,GAAG,aAAa,CAAC,EAAE;AAErE,QAAI,KAAK,MAAM;AACb,OAAC,EAAE,MAAM,YAAY,IAAI,kBAAkB;AAAA,QACzC,UAAU,mBAAmB;AAAA,QAC7B,SAAS,KAAK,KAAK;AAAA,QACnB,cAAc,KAAK,KAAK;AAAA,MAC1B,CAAC;AAED,wBAAkB,OAAO;AACzB,wBAAkB,cAAc;AAAA,IAClC;AAEA,UAAM,EAAE,SAAS,IAAI;AAErB,UAAM,SAAS,KAAK,qBAAqB;AAEzC,QAAI,QAAQ,SAAS,iBAAiB;AACpC,YAAM,EAAE,OAAO,IAAI;AACnB,YAAM,eAAe;AAAA,QACnB;AAAA,QACA,cAAc;AAAA,QACd;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,8BAA8B,iBAA0B;AAC5D,UAAM,qBAAqB,MAAM,KAAK,qCAAqC,eAAe;AAE1F,UAAM,oBAAsD;AAAA,MAC1D,GAAG;AAAA,MACH,MAAM,CAAC;AAAA,MACP,aAAa,CAAC;AAAA,IAChB;AAEA,QAAI,EAAE,MAAM,YAAY,IAAiB,EAAE,MAAM,CAAC,GAAG,aAAa,CAAC,EAAE;AAErE,QAAI,KAAK,QAAQ,mBAAmB,UAAU;AAC5C,OAAC,EAAE,MAAM,YAAY,IAAI,kBAAkB;AAAA,QACzC,UAAU,mBAAmB;AAAA,QAC7B,SAAS,KAAK,KAAK;AAAA,QACnB,cAAc,KAAK,KAAK;AAAA,MAC1B,CAAC;AACD,wBAAkB,OAAO;AACzB,wBAAkB,cAAc;AAAA,IAClC;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cACJ,iBAC8C;AAC9C,UAAM,KAAK,4BAA4B;AACvC,SAAK,mBAAmB;AACxB,WAAO,KAAK,eAAiC,eAAe;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,uBACJ,iBAC2C;AAC3C,UAAM,KAAK,+BAA+B;AAC1C,SAAK,mBAAmB;AACxB,WAAO,KAAK,8BAA8B,eAAe;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KACJ,iBAC8C;AAC9C,WAAO,KAAK,cAAgC,eAAe;AAAA,EAC7D;AAAA,EAEQ,qBAAqB;AAC3B,SAAK,SAAS,OAAO,MAAM,KAAK,EAAE;AAAA,EACpC;AAAA,EAEQ,uBAAuB;AAC7B,WAAO,KAAK,UAAU,KAAK,gBAAgB;AAAA,EAC7C;AACF;;;AU/jBA,SAAS,aAAAC,YAAW,kBAAAC,uBAAsB;AAC1C,SAAS,eAAAC,qBAAmB;AAC5B,SAAS,eAAAC,oBAAmB;AA2BrB,SAAS,eACd,UACA,SACA,eAAwC,CAAC,GACpC;AACL,MAAI,eAAe;AACnB,MAAI,QAAQ,gBAAgB,YAAY;AACtC,UAAM,mBAAmB,SAAS;AAAA,MAChC,CAAC,MAAM,EAAE,SAASC,aAAY,QAAQ,EAAE,OAAOC;AAAA,IACjD;AAEA,mBAAe,iBAAiB;AAAA,EAClC;AAEA,SAAO,SAAS,OAAO,CAAC,MAAW,YAAY;AAC7C,QAAI,QAAQ,SAASD,aAAY,WAAW,QAAQ,SAASA,aAAY,KAAK;AAC5E,YAAM,mBAAmB,QAAQ,OAAOC,iBAAe,iBAAiB,QAAQ;AAChF,YAAM,cAAc,oBAAoB,aAAa,QAAQ,EAAE;AAE/D,UAAI,aAAa;AACf,cAAM,iBAAiB,mBACnB,IAAIC,WAAU,OAAO,IACrB,IAAIA,WAAU,aAAa,QAAQ,EAAE,CAAC;AAE1C,cAAM,OACJ,QAAQ,SAASF,aAAY,MACzB,IAAIG,gBAAe,KAAK,EAAE,OAAO,QAAQ,EAAE,IAC3C,QAAQ;AAEd,cAAM,CAAC,UAAU,IAAI,eAAe,UAAU,MAAM,QAAQ,GAAG,SAAS,CAAC;AACzE,aAAK,KAAK,UAAU;AAAA,MACtB;AAAA,IACF;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AACP;AApCgB;;;AC9BhB,SAAS,aAAa;AA8Bf,SAAS,aAAa,SAAuB,iBAAyB;AAC3E,QAAM,WAAW,QAAQ,aAAa;AAEtC,UAAQ,QAAQ,SAAS;AAAA,IACvB,KAAK;AACH,aAAO,WAAW;AAAA,IACpB,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AAAA,IACL;AACE,aAAO,MAAM,kBAAkB,KAAK;AAAA,EACxC;AACF;AAZgB;AAqBT,SAAS,eACd,SACA,SACA,kBAA0B,GACa;AACvC,MAAI,YAAY,QAAW;AACzB,WAAO;AAAA,EACT;AAEA,SAAO,UAAU,SAAS;AACxB,QAAI;AACF,aAAO,MAAM,QAAQ,GAAG,IAAI;AAAA,IAC9B,SAAS,QAAiB;AACxB,YAAM,QAAQ;AAMd,UAAI,MAAM,OAAO,SAAS,gBAAgB;AACxC,cAAM;AAAA,MACR;AACA,YAAM,WAAW,kBAAkB;AAEnC,UAAI,WAAW,QAAQ,YAAY;AACjC,cAAM;AAAA,MACR;AAEA,YAAM,QAAQ,aAAa,SAAS,QAAQ;AAE5C,YAAM,MAAM,KAAK;AAEjB,aAAO,eAAe,SAAS,SAAS,QAAQ,EAAE,GAAG,IAAI;AAAA,IAC3D;AAAA,EACF;AACF;AAnCgB;;;AC1CT,IAAM,uBAAuB,8BAAO,YAGC;AAC1C,QAAM,EAAE,UAAU,eAAe,IAAI;AAErC,MAAI;AAKJ,QAAM,gBAAgB,SAAS,MAAM;AAErC,MAAI,gBAAgB;AAClB,UAAM,SAAS,cAAc,MAAM,UAAU;AAC7C,UAAM,EAAE,MAAM,IAAI,MAAM,sBAAsB,UAAU,MAAM;AAE9D,iBAAa,OAAO;AAAA,EACtB,OAAO;AACL,kBAAc,MAAM,cAAc,KAAK,GAAG;AAAA,EAC5C;AAEA,SAAO;AAAA,IACL;AAAA,EACF;AACF,GAzBoC;;;ACTpC,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAO9B,IAAM,yBAAyB,wBAAC,WAGX;AAC1B,QAAM,EAAE,iBAAiB,YAAY,CAAC,EAAE,IAAI;AAC5C,QAAM,EAAE,OAAO,MAAM,OAAO,OAAO,IAAI;AAEvC,MAAI,SAAS,QAAQ;AACnB,UAAM,IAAIC;AAAA,MACRC,YAAU;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,OAAK,SAAS,KAAK,oBAAoB,QAAQ,KAAK,iBAAiB;AACnE,UAAM,IAAID;AAAA,MACRC,YAAU;AAAA,MACV,iDAAiD,eAAe;AAAA,IAClE;AAAA,EACF;AAEA,MAAI,SAAS,QAAQ;AACnB,UAAM,IAAID;AAAA,MACRC,YAAU;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,MAAI,QAAQ,OAAO;AACjB,UAAM,IAAID;AAAA,MACRC,YAAU;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAGA,MAAI,CAAC,SAAS,CAAC,MAAM;AACnB,cAAU,QAAQ;AAAA,EACpB;AAEA,SAAO;AACT,GAzCsC;;;A5C8EtC,IAAM,cAAc;AAEb,IAAM,4BAA4B;AAClC,IAAM,+BAA+B;AACrC,IAAM,2BAA2B;AACjC,IAAM,8BAA8B;AACpC,IAAM,yBAAyB;AAC/B,IAAM,6BAA6B;AACnC,IAAM,oBAAoB;AA2WjC,IAAM,mBAA+C;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AACF;AAKA,IAAqB,WAArB,MAAqB,UAAS;AAAA,EAjd9B,OAid8B;AAAA;AAAA;AAAA,EAC5B;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,wBAAwB,KAAc;AAC3C,QAAI,KAAK;AACP,aAAO,UAAS,sCAAsC,GAAG;AACzD,aAAO,UAAS,eAAe,GAAG;AAClC,aAAO,UAAS,cAAc,GAAG;AACjC,aAAO,UAAS,wBAAwB,GAAG;AAC3C;AAAA,IACF;AACA,cAAS,wCAAwC,CAAC;AAClD,cAAS,gBAAgB,CAAC;AAC1B,cAAS,iBAAiB,CAAC;AAC3B,cAAS,0BAA0B,CAAC;AAAA,EACtC;AAAA;AAAA,EAGO;AAAA;AAAA,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWR,OAAc,yBAAkC;AAAA;AAAA,EAEhD,OAAe,wCAGX,CAAC;AAAA;AAAA,EAGL,OAAe,iBAAiC,CAAC;AAAA;AAAA,EAEjD,OAAe,gBAA+B,CAAC;AAAA;AAAA,EAE/C,OAAe,0BAAkD,CAAC;AAAA;AAAA,EAElE,OAAe,iCAAyC;AAAA;AAAA,EAGjD;AAAA,EAEP,UAA2B;AAAA,IACzB,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,OAAO;AAAA,IACP,cAAc;AAAA,IACd,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AAAA,EAEA,OAAe,qBAAqB,MAAmC;AACrE,WAAO,MAAM,SAAS,EAAE,MAAM,wBAAwB,IAAI,CAAC;AAAA,EAC7D;AAAA,EAEA,OAAe,iBAAiB,MAAmC;AACjE,WAAO,iBAAiB,SAAS,KAAK,qBAAqB,IAAI,CAAC;AAAA,EAClE;AAAA,EAEA,OAAe,aAAa,KAAa;AACvC,WAAO,IAAI,QAAQ,SAAS,EAAE;AAAA,EAChC;AAAA,EAEA,OAAe,0BAA0B,KAAa;AACpD,WAAOC,WAAU,UAAS,wBAAwB,KAAK,aAAa,GAAG,CAAC,CAAC;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,WAAW,SAAiE;AACzF,UAAM,EAAE,cAAc,SAAS,QAAQ,IAAI;AAE3C,WAAO,eAAe,UAAU,SAAS;AACvC,YAAM,MAAM,KAAK,CAAC;AAClB,YAAMC,WAAU,KAAK,CAAC;AACtB,YAAM,SAAS,UAAU,YAAY,QAAQ,OAAO,IAAI;AAExD,UAAI,cAA2B;AAAA,QAC7B,GAAGA;AAAA,QACH;AAAA,QACA,SAAS,EAAE,GAAGA,UAAS,SAAS,GAAG,QAAQ;AAAA,MAC7C;AAEA,UAAI,QAAQ,mBAAmB;AAC7B,sBAAc,MAAM,QAAQ,kBAAkB,WAAW;AAAA,MAC3D;AAEA,UAAI,UAAS,0BAA0B,UAAS,0BAA0B,GAAG,GAAG;AAC9E,kBAAS,iBAAiB,aAAa,GAAG;AAAA,MAC5C;AAEA,aAAO,UAAS,2BAA2B,KAAK,aAAa,OAAO;AAAA,IACtE,GAAG,YAAY;AAAA,EACjB;AAAA,EAEA,OAAe,iBAAiBA,UAAsB,KAAa;AACjE,UAAM,gBAAgB,KAAK,aAAa,GAAG;AAG3C,UAAM,qBAAqB,UAAS,wBAAwB,aAAa,KAAK;AAC9E,IAAAA,SAAQ,OAAOA,SAAQ,MACnB,SAAS,EACV,QAAQ,MAAM,+CAA+C,kBAAkB,IAAI;AAAA,EACxF;AAAA,EAEA,aAAqB,2BACnB,KACAA,UACA,SACmB;AACnB,UAAM,UAAU,6BACd,QAAQ,QAAQ,QAAQ,MAAM,KAAKA,UAAS,OAAO,IAAI,MAAM,KAAKA,QAAO,GAD3D;AAGhB,UAAM,mBAAmB,UAAS,iBAAiBA,SAAQ,IAAI;AAG/D,QAAI,oBAAoB,CAAC,UAAS,0BAA0B,GAAG,GAAG;AAChE,gBAAS,wBAAwB,UAAS,aAAa,GAAG,CAAC,IAAI;AAAA,IACjE;AAEA,QAAI,WAAqB,MAAM,QAAQ;AAEvC,QAAI,CAAC,UAAS,wBAAwB;AACpC,aAAO;AAAA,IACT;AAEA,UAAM,eAA6B;AAAA,MACjC,YAAY;AAAA,MACZ,WAAW;AAAA,IACb;AAEA,aAAS,cAAc,aAAa,YAAY,cAAc,GAAG,EAAE,aAAa;AAC9E,YAAM,EAAE,WAAW,IAAI,MAAM,qBAAqB;AAAA,QAChD;AAAA,QACA,gBAAgB,IAAI,SAAS,MAAM;AAAA,MACrC,CAAC;AACD,gBAAS,sBAAsB,KAAK,YAAY,yBAAyB;AAEzE,UAAI,CAAC,YAAY,uCAAuC;AACtD;AAAA,MACF;AAEA,YAAM,eAAe,aAAa,aAAa,cAAc;AAC7D,YAAM,YAAY,aAAa,cAAc,YAAY;AACzD,YAAMC,OAAM,SAAS;AAErB,iBAAW,MAAM,QAAQ;AAAA,IAC3B;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAe,sBAAsB,KAAa,QAAiB;AAMjE,UAAM,yBAAyB,UAAS,0BAA0B,GAAG;AACrE,QAAI,CAACF,WAAU,MAAM,KAAK,CAAC,wBAAwB;AACjD;AAAA,IACF;AAEA,UAAM,gBAAgB,UAAS,aAAa,GAAG;AAE/C,QAAI,SAAS,UAAS,wBAAwB,aAAa,GAAG;AAC5D,gBAAS,wBAAwB,aAAa,IAAI;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,KAAa,UAA2B,CAAC,GAAG;AACtD,UAAM,EAAE,KAAK,QAAQ,gBAAgB,SAAS,YAAY,IAAI,UAAS,iBAAiB,GAAG;AAE3F,SAAK,MAAM;AACX,SAAK,iBAAiB;AACtB,SAAK,MAAM;AAEX,UAAM,EAAE,MAAM,IAAI;AAClB,UAAM,UAAU,EAAE,GAAG,aAAa,GAAG,QAAQ,SAAS,QAAQ,UAAU,KAAK,GAAG;AAEhF,SAAK,UAAU;AAAA,MACb,GAAG,KAAK;AAAA,MACR,GAAG;AAAA,MACH;AAAA,IACF;AAEA,SAAK,aAAa,KAAK,iBAAiB;AACxC,UAAM,EAAE,kBAAkB,OAAAG,OAAM,IAAI,KAAK;AAKzC,QAAIA,QAAO;AACT,YAAM,EAAE,8BAA8B,OAAO,SAAS,IAAI,yBAAyBA,MAAK;AACxF,WAAK,+BAA+B;AACpC,gBAAS,eAAe,KAAK,cAAc,IAAI;AAC/C,gBAAS,cAAc,KAAK,cAAc,IAAI;AAAA,IAChD;AAKA,QAAIH,WAAU,gBAAgB,GAAG;AAC/B,UAAI,qBAAqB,IAAI;AAC3B,aAAK,QAAQ,IAAI,cAAc,gBAAgB;AAAA,MACjD,OAAO;AACL,aAAK,QAAQ;AAAA,MACf;AAAA,IACF,OAAO;AACL,WAAK,QAAQ,IAAI,cAAc,0BAA0B;AAAA,IAC3D;AAAA,EACF;AAAA,EAEA,OAAe,iBAAiB,KAI9B;AACA,QAAI;AACJ,QAAI;AACF,kBAAY,IAAI,IAAI,GAAG;AAAA,IACzB,SAAS,OAAO;AACd,YAAM,IAAII,YAAUA,YAAU,MAAM,aAAa,yBAAyB,EAAE,IAAI,GAAG,KAAK;AAAA,IAC1F;AAEA,UAAM,WAAW,UAAU;AAC3B,UAAM,WAAW,UAAU;AAC3B,UAAM,iBAAiB,GAAG,UAAU,MAAM,GAAG,UAAU,QAAQ;AAC/D,QAAI,EAAE,YAAY,WAAW;AAC3B,aAAO,EAAE,KAAK,gBAAgB,KAAK,SAAS,OAAU;AAAA,IACxD;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,SAAS,EAAE,eAAe,SAAS,KAAK,GAAG,QAAQ,IAAI,QAAQ,EAAE,CAAC,GAAG;AAAA,IACvE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAA0B;AAC9B,UAAM,KAAK,sBAAsB;AACjC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAA+B;AACnC,UAAM,KAAK,KAAK;AAChB,WAAO,UAAS,eAAe,KAAK,cAAc;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAA6B;AACjC,UAAM,KAAK,KAAK;AAChB,WAAO,UAAS,cAAc,KAAK,cAAc;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe;AACnB,UAAM,KAAK,KAAK;AAEhB,UAAM;AAAA,MACJ,cAAc,EAAE,YAAY;AAAA,MAC5B,qBAAqB,EAAE,mBAAmB;AAAA,MAC1C,eAAe,EAAE,gBAAgB,WAAW;AAAA,MAC5C;AAAA,IACF,KAAK,MAAM,KAAK,SAAS,GAAG;AAE5B,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,QAAQ,KAAa,SAA0C;AACnE,UAAM,EAAE,KAAK,QAAQ,gBAAgB,QAAQ,IAAI,UAAS,iBAAiB,GAAG;AAE9E,SAAK,MAAM;AACX,SAAK,iBAAiB;AACtB,SAAK,UAAU,WAAW,KAAK;AAC/B,SAAK,UAAU,EAAE,GAAG,KAAK,SAAS,SAAS,EAAE,GAAG,KAAK,QAAQ,SAAS,GAAG,QAAQ,EAAE;AAEnF,SAAK,aAAa,KAAK,iBAAiB;AAExC,UAAM,KAAK,KAAK;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,sBACJ,cAAuB,OAC4B;AACnD,UAAM,WAAiC,UAAS,cAAc,KAAK,cAAc;AACjF,UAAM,QAA+B,UAAS,eAAe,KAAK,cAAc;AAGhF,UAAM,WAAW,YAAY;AAC7B,QAAI,YAAY,CAAC,aAAa;AAC5B,aAAO,EAAE,UAAU,MAAM;AAAA,IAC3B;AAGA,UAAM,kBACJ,UAAS,sCAAsC,KAAK,cAAc;AAGpE,QAAI,iBAAiB;AACnB,aAAO,gBAAgB,KAAK,CAAC,SAAS;AACpC,aAAK,+BAA+B,KAAK;AACzC,eAAO;AAAA,UACL,UAAU,UAAS,cAAc,KAAK,cAAc;AAAA,UACpD,OAAO,UAAS,eAAe,KAAK,cAAc;AAAA,QACpD;AAAA,MACF,CAAC;AAAA,IACH;AAGA,UAAM,iCAAiC,KAAK,WACzC,oBAAoB,EACpB,KAAK,CAAC,UAAU;AAAA,MACf,OAAO,iBAAiB,KAAK,KAAK;AAAA,MAClC,UAAU,oBAAoB,KAAK,QAAQ;AAAA,MAC3C,8BAA8B,KAAK,IAAI;AAAA,IACzC,EAAE,EACD,KAAK,CAAC,SAAS;AACd,gBAAS,kCAAkC,KAAK,QAAQ;AACxD,gBAAS,eAAe,KAAK,cAAc,IAAI,KAAK;AACpD,gBAAS,cAAc,KAAK,cAAc,IAAI,KAAK;AACnD,WAAK,+BAA+B,KAAK;AACzC,aAAO;AAAA,IACT,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,YAAM,QAAQ,IAAIA;AAAA,QAChBA,YAAU,MAAM;AAAA,QAChB;AAAA,QACA,EAAE,KAAK,KAAK,eAAe;AAAA,QAC3B;AAAA,MACF;AACA,YAAM,QAAQ,EAAE,MAAM,eAAe;AAErC,YAAM;AAAA,IACR,CAAC,EACA,QAAQ,MAAM;AACb,aAAO,UAAS,sCAAsC,KAAK,cAAc;AAAA,IAC3E,CAAC;AAGH,cAAS,sCAAsC,KAAK,cAAc,IAChE;AAGF,WAAO,UAAS,sCAAsC,KAAK,cAAc,EAAE,KAAK,CAAC,SAAS;AACxF,WAAK,+BAA+B,KAAK;AACzC,aAAO;AAAA,QACL,UAAU,UAAS,cAAc,KAAK,cAAc;AAAA,QACpD,OAAO,UAAS,eAAe,KAAK,cAAc;AAAA,MACpD;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,kCAAkC,UAAoB;AACnE,UAAM,EAAE,kBAAkB,kBAAkB,iBAAiB,IAC3D,kCAAkC,SAAS,WAAW;AAExD,QAAI,CAAC,oBAAoB,CAAC,kBAAkB;AAC1C,gBAAS,iCAAiC;AAAA,QACxC,8EAA8E,SAAS,WAAW;AAAA,QAClG,mDAAmD,gBAAgB;AAAA,QACnE;AAAA,MACF,EAAE,KAAK,IAAI;AACX,4BAAsB,iCACpB,UAAS;AAAA,IACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,mBAAkC;AACxC,UAAM,UAAU,UAAS,WAAW,KAAK,OAAO;AAChD,UAAM,YAAY,IAAI,cAAc,KAAK,gBAAgB;AAAA,MACvD,OAAO,wBAAC,OAA0B,gBAChC,QAAQ,MAAM,SAAS,GAAG,eAAe,CAAC,GAAG,KAAK,OAAO,GADpD;AAAA,MAEP,oBAAoB,wBAAC,aAAqD;AACxE,YAAI,cAAc,UAAU;AAC1B,gBAAM,kBAAkB,SAAS;AACjC;AAAA,YACE,gBAAgB;AAAA,YAChB,UAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF,GARoB;AAAA,IAStB,CAAC;AAED,UAAM,eAAe,wBAAC,OAAqB,SAAkC;AAC3E,YAAM,eAAe,MAAM,YAAY,KAAK,CAAC,MAAM,EAAE,SAAS,qBAAqB;AAInF,YAAM,iBAAiB,cAAc,cAAc;AAEnD,UAAI,gBAAgB;AAClB,eAAO,sBAAsB,OAAO;AAAA,UAClC,KAAK,KAAK;AAAA,UACV;AAAA,UACA,SAAS,wBAAC,KAAK,gBAAgB,QAAQ,KAAe,aAAa,KAAK,OAAO,GAAtE;AAAA,UACT,WAAW;AAAA,UACX,eAAe,aAAa,KAAK;AAAA,UACjC,SAAS,wBAAC,UAAU;AAClB,sBAAS;AAAA,cACP,KAAK;AAAA,cACL,MAAM,YAAY;AAAA,YACpB;AAAA,UACF,GALS;AAAA,QAMX,CAAC;AAAA,MACH;AACA,aAAO,UAAU,QAAQ,OAAO,IAAI;AAAA,IACtC,GAvBqB;AAyBrB,UAAM,mBAAmB,wBAAC,eAA0B;AAAA,MAClD,SAAS,WAAkC;AACzC,cAAM,cAAc,UAAU,QAAQ,IAAI,CAAC,GAAG,MAAM,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI;AACrF,cAAM,aAAa,UAAU,QAC1B,IAAI,CAAC,GAAG,MAAM,OAAO,CAAC,qBAAqB,CAAC,UAAU,EACtD,KAAK,IAAI;AAEZ,cAAM,mBAAmB,UAAU,QAAQ;AAAA,UACzC,CAAC,KAAK,QAAQ,MAAM;AAClB,gBAAI,SAAS,CAAC,EAAE,IAAI;AACpB,mBAAO;AAAA,UACT;AAAA,UACA,CAAC;AAAA,QACH;AAEA,cAAMC,YAAWC;AAAA,2BACE,WAAW;AAAA,cACxB,UAAU;AAAA;AAAA;AAIhB,eAAO,UAAUD,WAAU,gBAAgB;AAAA,MAC7C;AAAA,IACF,IAvByB;AA0BzB,WAAO,EAAE,GAAG,OAAiB,YAAY,GAAG,GAAG,iBAAiB,YAAY,EAAE;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,aAA8B;AAClC,UAAM;AAAA,MACJ,UAAU,EAAE,YAAY;AAAA,IAC1B,IAAI,MAAM,KAAK,WAAW,WAAW;AACrC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,iBAA8B;AAClC,UAAM;AAAA,MACJ,OAAO;AAAA,QACL,aAAa,EAAE,OAAO;AAAA,MACxB;AAAA,IACF,IAAI,MAAM,KAAK,WAAW,qBAAqB;AAC/C,WAAOE,KAAG,MAAM;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,YAA+B;AACnC,UAAM,EAAE,SAAS,IAAI,MAAM,KAAK,WAAW,YAAY;AAEvD,UAAM,oBAA8B,oBAAoB,QAAQ;AAEhE,cAAS,cAAc,KAAK,cAAc,IAAI;AAE9C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,aAAiC;AACrC,UAAM,EAAE,MAAM,IAAI,MAAM,KAAK,WAAW,SAAS;AAEjD,UAAM,iBAAiB,iBAAiB,KAAK;AAE7C,cAAS,eAAe,KAAK,cAAc,IAAI;AAE/C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,aAAa;AACjB,UAAM;AAAA,MACJ,qBAAqB,EAAE,QAAQ;AAAA,IACjC,IAAI,MAAM,KAAK,SAAS;AACxB,WAAO,QAAQ,SAAS;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,iBAAiB;AACrB,UAAM,MAAM,MAAM,KAAK,SAAS;AAChC,UAAM;AAAA,MACJ,qBAAqB,EAAE,YAAY;AAAA,IACrC,IAAI;AACJ,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,gBAAgB,SAAmD;AACvE,UAAM,EAAE,cAAc,IAAI,MAAM,KAAK,gBAAgB;AAErD,QAAI,CAAC,eAAe;AAClB,YAAM,IAAIH;AAAA,QACRI,YAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAEA,UAAM,EAAE,aAAa,IAAI,MAAM,KAAK,WAAW,gBAAgB,EAAE,QAAQ,CAAC;AAE1E,UAAM,EAAE,YAAY,OAAO,YAAY,IAAI;AAE3C,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,aAAaD,KAAG,WAAW;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAmC,eAA6B;AAC3E,QAAI,CAAC,KAAK,OAAO;AACf;AAAA,IACF;AAEA,SAAK,MAAM,IAAI,eAAe,MAAM;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,oBAAoB,IAAwB;AAChD,UAAM;AAAA,MACJ,qBAAqB;AAAA,QACnB,cAAc,EAAE,WAAW,WAAW;AAAA,MACxC;AAAA,IACF,IAAI,MAAM,KAAK,SAAS;AACxB,QAAIA,KAAG,GAAG,OAAO,MAAM,EAAE,GAAG,SAAS,GAAG;AACtC,YAAM,IAAIH;AAAA,QACRI,YAAU;AAAA,QACV,4EAA4E,GAAG,OAAO,MAAM,iBAAiB,SAAS;AAAA,MACxH;AAAA,IACF;AAEA,QAAID,KAAG,GAAG,QAAQ,MAAM,EAAE,GAAG,UAAU,GAAG;AACxC,YAAM,IAAIH;AAAA,QACRI,YAAU;AAAA,QACV,8EAA8E,GAAG,QAAQ,MAAM,kBAAkB,UAAU;AAAA,MAC7H;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,gBACJ,wBACA;AAAA,IACE;AAAA,IACA,yBAAyB;AAAA,IACzB,wBAAwB,0BAA0B;AAAA,EACpD,IAA0B,CAAC,GACG;AAC9B,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE;AAAA,MACE,MAAM,KAAK,eAAe;AAAA,MAC1B;AAAA,MACA;AAAA,IACF;AAEA,QAAI,wBAAwB;AAC1B,YAAM,KAAK,uBAAuB,kBAAkB;AAAA,IACtD;AAEA,UAAM,KAAK,oBAAoB,kBAAkB;AAEjD,UAAM,qBAAqBC,UAAQ,mBAAmB,mBAAmB,CAAC;AAE1E,QAAI;AAEJ,QAAI,wBAAwB,kBAAkB,GAAG;AAC/C,aAAO,mBAAmB;AAAA,IAC5B;AACA,UAAM,eAAe,MAAM,KAAK,WAAW,qBAAqB;AAAA,MAC9D;AAAA,MACA,wBAAwB;AAAA,IAC1B,CAAC;AAED,SAAK;AAAA,MACH,mBAAmB;AAAA,MACnB,mBAAmB,iBAAiB,MAAM,KAAK,WAAW,CAAC;AAAA,IAC7D;AAEA,UAAM,UAAU,MAAM,KAAK,WAAW;AACtC,WAAO,IAAI,oBAAoB,oBAAoB,MAAM,SAAS,MAAM,YAAY;AAAA,EACtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,OACJ,wBACA,EAAE,gBAAgB,yBAAyB,KAAK,IAAwB,CAAC,GACpD;AACrB,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE,QAAI,wBAAwB;AAC1B,aAAO,KAAK,uBAAuB,kBAAkB;AAAA,IACvD;AACA,UAAM,qBAAqBA,UAAQ,mBAAmB,mBAAmB,CAAC;AAC1E,UAAM,EAAE,QAAQ,eAAe,IAAI,MAAM,KAAK,WAAW,OAAO;AAAA,MAC9D,qBAAqB;AAAA,MACrB,gBAAgB,kBAAkB;AAAA,IACpC,CAAC;AACD,UAAM,CAAC,EAAE,UAAU,aAAa,QAAQ,aAAa,CAAC,IAAI;AAC1D,UAAM,WAAW,YAAY,IAAI,kBAAkB;AAEnD,WAAO,EAAE,UAAU,aAAa;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,mBAAiD,oBAAmC;AACxF,UAAM,2BAA2B,mBAAmB,OAAO;AAAA,MACzD,CAAC,UAAU,YAAY,KAAK,KAAKF,KAAG,MAAM,gBAAgB,EAAE,OAAO;AAAA,IACrE;AAEA,QAAI,CAAC,0BAA0B;AAC7B,aAAO;AAAA,IACT;AAEA,UAAM,qBAAqBE,UAAQ,mBAAmB,mBAAmB,CAAC;AAE1E,UAAM,WAAW,MAAM,KAAK,WAAW,mBAAmB;AAAA,MACxD;AAAA,IACF,CAAC;AAED,UAAM,EAAE,mBAAmB,IAAI;AAG/B,yBAAqB,KAAK;AAAA,MACxB;AAAA,MACA;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,8BACJ,oBACA,cACA;AACA,UAAM,2BAA2B,mBAAmB,OAAO;AAAA,MACzD,CAAC,UAAU,YAAY,KAAK,KAAKF,KAAG,MAAM,gBAAgB,EAAE,OAAO;AAAA,IACrE;AAEA,QAAI,CAAC,0BAA0B;AAC7B,YAAMG,YAAW,MAAM,KAAK,iBAAiB,YAAY;AAEzD,aAAO,EAAE,oBAAoB,UAAAA,UAAS;AAAA,IACxC;AAEA,UAAM;AAAA,MACJ,kBAAkB,EAAE,SAAS;AAAA,MAC7B;AAAA,IACF,IAAI,MAAM,KAAK,WAAW,8BAA8B;AAAA,MACtD,cAAc,OAAO,YAAY;AAAA,MACjC,oBAAoBD,UAAQ,mBAAmB,mBAAmB,CAAC;AAAA,IACrE,CAAC;AAGD,yBAAqB,KAAK;AAAA,MACxB;AAAA,MACA;AAAA,IACF;AAEA,WAAO,EAAE,oBAAoB,UAAUF,KAAG,QAAQ,EAAE;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,uBACJ,oBACA,EAAE,UAAU,cAAc,IAAkC,CAAC,GACrB;AACxC,QAAI,wBAAwB,kBAAkB,GAAG;AAC/C,aAAO;AAAA,QACL,aAAa,CAAC;AAAA,QACd,UAAU,CAAC;AAAA,QACX,iBAAiB;AAAA,QACjB,oBAAoB,CAAC;AAAA,MACvB;AAAA,IACF;AAEA,QAAI,cAAwC,CAAC;AAC7C,QAAI,WAAuC,CAAC;AAC5C,UAAM,qBAA+B,CAAC;AACtC,QAAI,kBAAkB;AACtB,QAAI;AAEJ,UAAM,KAAK,oBAAoB,kBAAkB;AAEjD,UAAM,WAAW,iBAAkB,MAAM,KAAK,iBAAiB,EAAE;AAEjE,aAAS,UAAU,GAAG,UAAU,aAAa,WAAW;AACtD,YAAM;AAAA,QACJ,QAAQ,CAAC,EAAE,UAAU,oBAAoB,OAAO,CAAC;AAAA,MACnD,IAAI,MAAM,KAAK,WAAW,OAAO;AAAA,QAC/B,qBAAqB,CAACE,UAAQ,mBAAmB,mBAAmB,CAAC,CAAC;AAAA,QACtE,gBAAgB;AAAA,QAChB,UAAU,SAAS,SAAS;AAAA,MAC9B,CAAC;AAED,oBAAc;AACd,iBAAW,mBAAmB,IAAI,kBAAkB;AACpD,qBAAe;AAEf,YAAM,EAAE,wBAAwB,yBAAyB,IACvD,2BAA2B,QAAQ;AAErC,YAAM,oBACJ,uBAAuB,WAAW,KAAK,yBAAyB,WAAW;AAE7E,UAAI,qBAAqB,wBAAwB,kBAAkB,GAAG;AACpE,2BAAmB,uBAAuB;AAC1C,2BAAmB,mBAAmB,uBAAuB,MAAM;AACnE,iCAAyB,QAAQ,CAAC,EAAE,WAAW,MAAM;AACnD,6BAAmB,0BAA0B,IAAIE,SAAQ,UAAU,CAAC;AACpE,6BAAmB,KAAK,UAAU;AAAA,QACpC,CAAC;AAED,cAAM,EAAE,OAAO,IAAI,MAAM,KAAK,oBAAoB;AAAA,UAChD;AAAA,UACA;AAAA,QACF,CAAC;AAGD,2BAAmB,SAAS;AAAA,MAC9B,OAAO;AACL;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,+BACJ,qBAC0C;AAC1C,UAAM,UAA2C,oBAAoB,IAAI,OAAO;AAAA,MAC9E,aAAa,CAAC;AAAA,MACd,UAAU,CAAC;AAAA,MACX,iBAAiB;AAAA,MACjB,oBAAoB,CAAC;AAAA,MACrB,cAAc;AAAA,IAChB,EAAE;AAEF,UAAM,cAAcC,OAAM,mBAAmB;AAG7C,UAAM,4BAA4B,oBAAI,IAAI;AAG1C,gBAAY,QAAQ,CAAC,KAAK,UAAU;AAClC,UAAI,wBAAwB,GAAG,GAAG;AAChC,kCAA0B,IAAI,OAAOH,UAAQ,IAAI,mBAAmB,CAAC,CAAC;AAAA,MACxE;AAAA,IACF,CAAC;AAGD,QAAI,wBAAwB,MAAM,KAAK,0BAA0B,KAAK,CAAC;AACvE,QAAI,UAAU;AAEd,WAAO,sBAAsB,SAAS,KAAK,UAAU,aAAa;AAChE,YAAM,sBAAsB,sBAAsB;AAAA,QAAI,CAAC,UACrD,0BAA0B,IAAI,KAAK;AAAA,MACrC;AACA,YAAM,gBAAgB,MAAM,KAAK,WAAW,OAAO;AAAA,QACjD;AAAA,QACA,gBAAgB;AAAA,MAClB,CAAC;AAED,YAAM,wBAAwB,CAAC;AAE/B,eAAS,IAAI,GAAG,IAAI,cAAc,OAAO,QAAQ,KAAK;AACpD,cAAM,aAAa,sBAAsB,CAAC;AAC1C,cAAM,EAAE,UAAU,aAAa,OAAO,IAAI,cAAc,OAAO,CAAC;AAChE,cAAM,SAAS,QAAQ,UAAU;AACjC,eAAO,WAAW,YAAY,IAAI,kBAAkB;AACpD,eAAO,eAAe;AACtB,cAAM,EAAE,wBAAwB,yBAAyB,IAAI;AAAA,UAC3D,OAAO;AAAA,QACT;AACA,cAAM,oBACJ,uBAAuB,SAAS,KAAK,yBAAyB,SAAS;AACzE,cAAMR,WAAU,YAAY,UAAU;AACtC,YAAI,qBAAqB,wBAAwBA,QAAO,GAAG;AACzD,iBAAO,mBAAmB,uBAAuB;AACjD,UAAAA,SAAQ,mBAAmB,uBAAuB,MAAM;AACxD,mCAAyB,QAAQ,CAAC,EAAE,WAAW,MAAM;AACnD,YAAAA,SAAQ,0BAA0B,IAAIU,SAAQ,UAAU,CAAC;AACzD,mBAAO,mBAAmB,KAAK,UAAU;AAAA,UAC3C,CAAC;AACD,gBAAM,EAAE,OAAO,IAAI,MAAM,KAAK,oBAAoB;AAAA,YAChD,oBAAoBV;AAAA,UACtB,CAAC;AACD,UAAAA,SAAQ,SAAS;AAEjB,oCAA0B,IAAI,YAAYQ,UAAQR,SAAQ,mBAAmB,CAAC,CAAC;AAC/E,gCAAsB,KAAK,UAAU;AAAA,QACvC;AAAA,MACF;AAEA,8BAAwB;AACxB,iBAAW;AAAA,IACb;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,2BACJ,qBACA,EAAE,gBAAgB,yBAAyB,KAAK,IAAwB,CAAC,GAClD;AACvB,QAAI,wBAAwB;AAC1B,aAAO,KAAK,+BAA+B,mBAAmB;AAAA,IAChE;AACA,UAAM,sBAAsB,oBAAoB,IAAI,CAAC,OAAOQ,UAAQ,GAAG,mBAAmB,CAAC,CAAC;AAC5F,UAAM,EAAE,QAAQ,eAAe,IAAI,MAAM,KAAK,WAAW,OAAO;AAAA,MAC9D;AAAA,MACA,gBAAgB,kBAAkB;AAAA,IACpC,CAAC;AAED,UAAM,UAAU,eAAe,IAAI,CAAC,EAAE,UAAU,aAAa,OAAO,MAAM;AACxE,YAAM,WAAW,YAAY,IAAI,kBAAkB;AACnD,aAAO,EAAE,UAAU,cAAc,OAAO;AAAA,IAC1C,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,qBAAqB;AAChC,UAAM,MAAM,KAAK,IAAI;AACrB,UAAM,OAAO,OAAO,KAAK,gCAAgC;AAEzD,QAAI,OAAO,KAAO;AAChB;AAAA,IACF;AAGA,QAAI,CAAC,UAAS,iBAAiB,KAAK,cAAc,GAAG;AACnD,YAAM,KAAK,sBAAsB,IAAI;AACrC;AAAA,IACF;AAEA,UAAM,YAAY,UAAS,eAAe,KAAK,cAAc;AAE7D,UAAM;AAAA,MACJ,aAAa;AAAA,QACX,QAAQ,EAAE,4BAA4B,SAAS;AAAA,MACjD;AAAA,IACF,IAAI;AAEJ,UAAM;AAAA,MACJ,OAAO;AAAA,QACL,aAAa;AAAA,UACX,QAAQ,EAAE,4BAA4B,QAAQ;AAAA,QAChD;AAAA,MACF;AAAA,IACF,IAAI,MAAM,KAAK,WAAW,8BAA8B;AAGxD,QAAI,aAAa,SAAS;AAExB,YAAM,KAAK,sBAAsB,IAAI;AAAA,IACvC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,oBAAoB,QAAmC;AAC3D,UAAM,EAAE,oBAAoB,UAAU,cAAc,IAAI;AACxD,QAAI,WAAW;AAEf,UAAM,KAAK,mBAAmB;AAE9B,UAAM,YAAY,MAAM,KAAK,SAAS;AACtC,UAAM,EAAE,gBAAgB,YAAY,IAAI,MAAM,KAAK,aAAa;AAEhE,UAAM,SAAS,mBAAmB,gBAAgB,SAAS;AAC3D,QAAI,CAACT,WAAU,QAAQ,GAAG;AACxB,iBAAW,MAAM,KAAK,iBAAiB,EAAE;AAAA,IAC3C;AAEA,UAAM,SAAS,gBAAgB;AAAA,MAC7B,UAAUO,KAAG,QAAQ;AAAA,MACrB,KAAK;AAAA,MACL,aAAa;AAAA,MACb,KAAK,mBAAmB;AAAA,IAC1B,CAAC,EAAE,IAAI,CAAC;AAER,QAAI,WAAWA,KAAG,CAAC;AAGnB,QAAI,wBAAwB,kBAAkB,GAAG;AAE/C,iBAAW,mBAAmB;AAC9B,UAAI,mBAAmB,SAAS,GAAG,CAAC,GAAG;AACrC,2BAAmB,WAAW;AAc9B,2BAAmB,WAAW,YAAY;AAAA,UACxC,mBAAmB,gBAAgB,WAAW,MAAM;AAAA,QACtD;AAEA,mBAAW,mBAAmB;AAAA,MAChC;AAAA,IACF;AACA,UAAM,SAAS,mBAAmB,gBAAgB,WAAW,MAAM;AACnE,UAAM,SAAS,gBAAgB;AAAA,MAC7B,UAAUA,KAAG,QAAQ;AAAA,MACrB,KAAK;AAAA,MACL,aAAa;AAAA,MACb,KAAK,mBAAmB;AAAA,IAC1B,CAAC,EAAE,IAAI,CAAC;AAER,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,SACJ,wBACA,EAAE,yBAAyB,KAAK,IAA+B,CAAC,GAC3C;AACrB,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE,QAAI,wBAAwB;AAC1B,aAAO,KAAK,uBAAuB,kBAAkB;AAAA,IACvD;AACA,UAAM,sBAAsB,CAACE,UAAQ,mBAAmB,mBAAmB,CAAC,CAAC;AAE7E,UAAM,EAAE,QAAQ,eAAe,IAAI,MAAM,KAAK,WAAW,OAAO;AAAA,MAC9D;AAAA,MACA,gBAAgB;AAAA,IAClB,CAAC;AAED,UAAM,aAAa,eAAe,IAAI,CAAC,iBAAiB;AACtD,YAAM,EAAE,IAAI,UAAU,OAAO,IAAI;AAEjC,YAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,aAAO,EAAE,IAAI,UAAU,mBAAmB,OAAO;AAAA,IACnD,CAAC;AAED,WAAO,EAAE,UAAU,WAAW,CAAC,EAAE,SAAS;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,MAAM,mBACJ,wBACA,EAAE,mBAAmB,UAAU,cAAc,IAA2B,CAAC,GACnB;AACtD,UAAM,iBAAiBG,OAAM,sBAAsB,sBAAsB,CAAC;AAC1E,UAAM,eAAe,eAAe,OAAO,GAAG,CAAC;AAC/C,UAAM,sBAAsB,wBAAwB,cAAc;AAGlE,QAAI,qBAAqB;AACvB,qBAAe,WAAWL,KAAG,CAAC;AAAA,IAChC;AAEA,UAAM,gBAAgBK,OAAM,cAAc;AAC1C,QAAI,kBAAkB;AACtB,QAAI,qBAAqB,wBAAwB,aAAa,GAAG;AAC/D,YAAM,eAAe,cAAc,UAAU;AAC7C,YAAM,kBAAkB,aAAa;AACrC,wBAAkB,cAAc,UAAU,SAAS;AAAA,IACrD;AAEA,QAAI;AAEJ,QAAI,eAAe;AACjB,iBAAW;AACX,YAAM,KAAK,mBAAmB,aAAa;AAAA,IAC7C,OAAO;AACL,OAAC,EAAE,SAAS,IAAI,MAAM,KAAK,8BAA8B,eAAe,EAAE;AAAA,IAC5E;AAEA,mBAAe,uBAAuB,cAAc,MAAM;AAM1D,QAAI,EAAE,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,IAAI,MAAM,KAAK,oBAAoB;AAAA;AAAA,MAEhF,oBAAoB;AAAA,MACpB;AAAA,IACF,CAAC;AAED,QAAI,cAAwC,CAAC;AAC7C,QAAI,WAAuC,CAAC;AAC5C,QAAI;AACJ,QAAI,qBAA+B,CAAC;AACpC,QAAI,kBAAkB;AACtB,QAAI,UAAUL,KAAG,CAAC;AAElB,mBAAe,SAAS;AACxB,QAAI,qBAAqB;AACvB,qBAAe,WAAW;AAC1B,UAAI,mBAAmB;AACrB,cAAM,kBAAkB,cAAc;AAAA,MACxC;AAEA,OAAC,EAAE,aAAa,UAAU,oBAAoB,iBAAiB,aAAa,IAC1E,MAAM,KAAK,uBAAuB,gBAAgB,EAAE,SAAS,CAAC;AAEhE,UAAI,gBAAgB,YAAY,cAAc;AAC5C,cAAM,KAAK,mBAAmB,gBAAgB,UAAU,aAAa,MAAM;AAAA,MAC7E;AAEA,YAAM,EAAE,YAAY,IAAI,MAAM,KAAK,aAAa;AAEhD,YAAM,kBAAkB,uBAAuB,QAAQ;AACvD,gBAAUA,KAAG,gBAAgB,KAAK,iBAAiB,CAAC,EAAE,IAAI,YAAY,IAAI,MAAM,CAAC;AACjF,qBAAe,WAAW;AAE1B,OAAC,EAAE,QAAQ,QAAQ,QAAQ,OAAO,IAAI,MAAM,KAAK,oBAAoB;AAAA,QACnE,oBAAoB;AAAA,QACpB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,qBAAoD;AAAA,MACxD,UAAU,SAAS,SAAS;AAAA,MAC5B,UAAU;AAAA,IACZ;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,qBAAqB,eAAe;AAAA,MACpC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,WACJ,QACgC;AAChC,UAAM;AAAA,MACJ,SAAAN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,wBAAwB,CAAC;AAAA,IAC3B,IAAI;AAMJ,UAAM,eAAe,oBAAI,IAAY;AACrC,UAAM,cAAc,MAAM,KAAK,eAAe;AAK9C,QAAI,gBAAgB;AAKpB,QAAI;AAEJ,UAAM,mBAAmB,sBAAsB,IAAI,CAAC,UAAU,UAAU;AAEtE,YAAM,EAAE,QAAQ,SAAS,UAAU,iBAAiB,oBAAoB,IAAI;AAE5E,YAAM,uBAAuB,sBACzB,oBAAoB,QAAQ,OAAO,IACnC,QAAQ,QAAQ,OAAO;AAE3B,mBAAa,IAAI,QAAQ,QAAQ,OAAO,CAAC;AAEzC,YAAM,eAAe;AAAA,QACnB,QAAQ;AAAA,MACV;AAEA,UAAI,YAAY,aAAa;AAC3B,0BAAkB,aAAa;AAAA,MACjC;AAKA,UAAI,QAAQ,QAAQ,OAAO,gBAAgB,OAAO,GAAG;AACnD,wBAAgB;AAAA,MAClB;AAEA,YAAM,kBAAkB;AAAA,QACtB,SAAS,kCAAkC,OAAO;AAAA,QAClD,QAAQM,KAAG,MAAM,EAAE,SAAS,EAAE;AAAA,QAC9B;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,IACT,CAAC;AAKD,QAAI,kBAAkB,IAAI;AACxB,mBAAa,IAAI,gBAAgB,QAAQ,OAAO,CAAC;AAEjD,YAAM,YAAY,iBAAiB,KAAK;AAAA,QACtC,SAAS,kCAAkC,eAAe;AAAA,QAC1D,QAAQA,KAAG,CAAC,EAAE,SAAS,EAAE;AAAA;AAAA,QACzB,SAAS;AAAA,QACT,cAAc;AAAA,UACZ,QAAQ,mBAAmB,gBAAgB,QAAQ,OAAO;AAAA,QAC5D;AAAA,MACF,CAAC;AAED,sBAAgB,YAAY;AAAA,IAC9B;AAMA,UAAM,eAAe,MAAM,KAAK;AAAA,MAC9B,MAAM,KAAK,YAAY;AAAA,MACvB;AAAA,IACF;AAEA,UAAM;AAAA,MACJ,YAAY,EAAE,QAAQ,aAAa,gBAAgB,SAAS;AAAA,IAC9D,IAAI,MAAM,KAAK,WAAW,WAAW;AAAA,MACnC,IAAIE,UAAQR,SAAQ,mBAAmB,CAAC;AAAA,MACxC,cAAc,OAAO,YAAY;AAAA,MACjC,iBAAiB,OAAO,aAAa;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY,aAAa,WAAW,SAAS,EAAE,IAAI;AAAA,IACrD,CAAC;AAED,QAAI,OAAO,SAAS,uBAAuB;AACzC,YAAM,iBAAiB,OAAO,SAAS,IAAI,kBAAkB;AAE7D,YAAM,KAAK,mBAAmBA,UAAS,gBAAgB,OAAO,MAAM;AAAA,IACtE;AAEA,IAAAA,SAAQ,YAAY,eAAe,aAAaA,SAAQ;AAExD,IAAAA,SAAQ,SAAS,eAAe,QAAQ,IAAI,gBAAgB,KAAKA,SAAQ;AACzE,IAAAA,SAAQ,UAAU,eAAe,SAAS,IAAI,iBAAiB,KAAKA,SAAQ;AAE5E,QAAI,eAAe,UAAU,QAAQ;AACnC,MAAAA,SAAQ,SAASM,KAAG,eAAe,SAAS,MAAM;AAAA,IACpD;AAEA,QAAI,eAAe,gBAAgB;AACjC,MAACN,SAAqC,WAAWM,KAAG,eAAe,cAAc;AAAA,IACnF;AAEA,UAAM,cAAc,OAAO;AAC3B,UAAM,UAAU,MAAM,KAAK,WAAW;AAEtC,IAAAN,SAAQ,YAAY,SAAS,UAAU;AAAA,MACrC,UAAU,SAAS,SAAS;AAAA,MAC5B,UAAU;AAAA,IACZ,CAAC;AAED,WAAO;AAAA,MACL,kBAAkBA;AAAA,MAClB,UAAUM,KAAG,QAAQ;AAAA,MACrB,UAAU,OAAO,SAAS,IAAI,kBAAkB;AAAA,MAChD;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,SACJ,OACA,SACA,gBAC2B;AAC3B,UAAM,eAAe,IAAII,SAAQ,KAAK;AACtC,UAAM;AAAA,MACJ,OAAO,EAAE,OAAO,SAAS;AAAA,IAC3B,IAAI,MAAM,KAAK,WAAW,SAAS;AAAA,MACjC,GAAG,uBAAuB;AAAA,QACxB,iBAAiB;AAAA,QACjB,WAAW;AAAA,MACb,CAAC;AAAA,MACD,QAAQ,EAAE,OAAO,aAAa,OAAO,GAAG,SAAS,WAAWF,UAAQ,OAAO,EAAE;AAAA,IAC/E,CAAC;AAED,UAAM,QAAQ,MAAM,IAAI,CAAC,EAAE,KAAK,OAAO;AAAA,MACrC,IAAI,KAAK;AAAA,MACT,SAAS,KAAK;AAAA,MACd,QAAQF,KAAG,KAAK,MAAM;AAAA,MACtB,OAAO;AAAA,MACP,cAAcA,KAAG,KAAK,YAAY;AAAA,MAClC,cAAcA,KAAG,KAAK,YAAY;AAAA,IACpC,EAAE;AAEF,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,oBACJ,OACA,YACA,sBACqB;AACrB,UAAM,eAAe,IAAII,SAAQ,KAAK;AAEtC,UAAM,cAAc,MAAM,KAAK;AAAA,MAC7B,CAAC,aAAa,WAAW;AAAA,MACzB;AAAA,IACF;AAEA,UAAM,aAAa;AAAA,MACjB,OAAO,aAAa,OAAO;AAAA,MAC3B,eAAe,WACZ,IAAI,cAAc,EAClB,IAAI,CAAC,EAAE,SAAS,QAAQ,KAAK,YAAY,OAAO;AAAA,QAC/C,SAASF,UAAQ,OAAO;AAAA,QACxB,SAAS,OAAO,IAAI,CAAC,IAAIF,KAAG,CAAC,IAAI,QAAQ,SAAS,EAAE;AAAA,QACpD,KAAK,cAAc,YAAY,SAAS,EAAE,IAAI;AAAA,MAChD,EAAE;AAAA,MACJ;AAAA,IACF;AAEA,UAAM,SAAS,MAAM,KAAK,WAAW,gBAAgB,UAAU;AAE/D,UAAM,QAAQ,OAAO,aAClB,KAAK,EACL,IAAI,CAAC,SAAS;AACb,cAAQ,KAAK,MAAM;AAAA,QACjB,KAAK;AACH,iBAAO;AAAA,YACL,QAAQA,KAAG,KAAK,MAAM;AAAA,YACtB,SAAS,KAAK;AAAA,YACd,UAAUA,KAAG,KAAK,QAAQ;AAAA,YAC1B,QAAQ,IAAII,SAAQ,KAAK,MAAM;AAAA,YAC/B,WAAW,IAAIA,SAAQ,KAAK,SAAS;AAAA,YACrC,OAAO,KAAK;AAAA,UACd;AAAA,QACF,KAAK;AACH,iBAAO;AAAA,YACL,IAAI,KAAK;AAAA,YACT,QAAQJ,KAAG,KAAK,MAAM;AAAA,YACtB,SAAS,KAAK;AAAA,YACd,OAAO;AAAA,YACP,cAAcA,KAAG,KAAK,YAAY;AAAA,YAClC,cAAcA,KAAG,KAAK,YAAY;AAAA,UACpC;AAAA,QACF;AACE,iBAAO;AAAA,MACX;AAAA,IACF,CAAC,EACA,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAEpB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,SAAS,SAAsC;AACnD,UAAM,MAAM,MAAM,KAAK,WAAW,SAAS,EAAE,QAAQ,CAAC;AACtD,UAAM,QAA2B,CAAC;AAElC,WAAO,KAAK,GAAG,EAAE,QAAQ,CAAC,QAAQ;AAEhC,YAAM,MAAM,IAAI,GAAG;AACnB,YAAM,KAAK,KAAK,MAAM,IAAI;AAAA,IAC5B,CAAC;AAED,WAAO,MAAM,OAAO,CAAC,MAAM,CAAC;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,SAAS,YAA4D;AACzE,QAAI;AAEJ,QAAI,eAAe,UAAU;AAC3B,YAAM;AAAA,QACJ,OAAO,EAAE,YAAY;AAAA,MACvB,IAAI,MAAM,KAAK,WAAW,eAAe;AACzC,cAAQ;AAAA,IACV,OAAO;AACL,YAAM,YAAY,OAAO,eAAe,YAAY,OAAO,UAAU;AACrE,YAAM,YAAY,YACd,EAAE,SAAS,WAAW,IACtB,EAAE,QAAQA,KAAG,UAAU,EAAE,SAAS,EAAE,EAAE;AAC1C,YAAM,WAAW,MAAM,KAAK,WAAW,SAAS,SAAS;AACzD,cAAQ,SAAS;AAAA,IACnB;AAEA,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,UAAM,EAAE,QAAQ,QAAQ,IAAI,aAAa,IAAI;AAE7C,WAAO;AAAA,MACL;AAAA,MACA,QAAQA,KAAG,MAAM;AAAA,MACjB,MAAM,OAAO;AAAA,MACb,QAAQ;AAAA,QACN,iBAAiB,OAAO;AAAA,QACxB,UAAUA,KAAG,OAAO,QAAQ;AAAA,QAC5B,gBAAgB,OAAO;AAAA,QACvB,mBAAmB,OAAO;AAAA,QAC1B,UAAU,OAAO;AAAA,QACjB,gCAAgC,OAAO;AAAA,QACvC,mBAAmB,OAAO;AAAA,QAC1B,kBAAkB,OAAO;AAAA,MAC3B;AAAA,MACA,gBAAgB,aAAa,IAAI,CAAC,OAAO,GAAG,EAAE;AAAA,IAChD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,UAAU,QAA2D;AACzE,UAAM;AAAA,MACJ,QAAQ,EAAE,OAAO,SAAS;AAAA,IAC5B,IAAI,MAAM,KAAK,WAAW,UAAU;AAAA,MAClC,GAAG,uBAAuB;AAAA,QACxB,iBAAiB;AAAA,QACjB,WAAW;AAAA,MACb,CAAC;AAAA,IACH,CAAC;AAED,UAAM,SAAkB,MAAM,IAAI,CAAC,EAAE,MAAM,MAAM,OAAO;AAAA,MACtD,IAAI,MAAM;AAAA,MACV,QAAQA,KAAG,MAAM,MAAM;AAAA,MACvB,MAAM,MAAM,OAAO;AAAA,MACnB,QAAQ;AAAA,QACN,iBAAiB,MAAM,OAAO;AAAA,QAC9B,UAAUA,KAAG,MAAM,OAAO,QAAQ;AAAA,QAClC,gBAAgB,MAAM,OAAO;AAAA,QAC7B,mBAAmB,MAAM,OAAO;AAAA,QAChC,UAAU,MAAM,OAAO;AAAA,QACvB,gCAAgC,MAAM,OAAO;AAAA,QAC7C,mBAAmB,MAAM,OAAO;AAAA,QAChC,kBAAkB,MAAM,OAAO;AAAA,MACjC;AAAA,MACA,gBAAgB,MAAM,aAAa,IAAI,CAAC,OAAO,GAAG,EAAE;AAAA,IACtD,EAAE;AAEF,WAAO,EAAE,QAAQ,SAAS;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,yBAEJ,YAC2D;AAC3D,QAAI;AACJ,QAAI,OAAO,eAAe,UAAU;AAClC,kBAAY,EAAE,aAAaA,KAAG,UAAU,EAAE,SAAS,EAAE,EAAE;AAAA,IACzD,WAAW,eAAe,UAAU;AAClC,kBAAY,EAAE,cAAc,MAAM,KAAK,eAAe,GAAG,SAAS,EAAE;AAAA,IACtE,WAAW,OAAO,eAAe,YAAY,OAAO,UAAU,GAAG;AAC/D,kBAAY,EAAE,SAAS,WAAW;AAAA,IACpC,OAAO;AACL,kBAAY,EAAE,aAAaA,KAAG,UAAU,EAAE,SAAS,EAAE;AAAA,IACvD;AAEA,UAAM,EAAE,MAAM,IAAI,MAAM,KAAK,WAAW,yBAAyB,SAAS;AAE1E,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,MACL,IAAI,MAAM;AAAA,MACV,QAAQA,KAAG,MAAM,QAAQ,EAAE;AAAA,MAC3B,MAAM,MAAM,OAAO;AAAA,MACnB,QAAQ;AAAA,QACN,iBAAiB,MAAM,OAAO;AAAA,QAC9B,UAAUA,KAAG,MAAM,OAAO,QAAQ;AAAA,QAClC,gBAAgB,MAAM,OAAO;AAAA,QAC7B,mBAAmB,MAAM,OAAO;AAAA,QAChC,UAAU,MAAM,OAAO;AAAA,QACvB,gCAAgC,MAAM,OAAO;AAAA,QAC7C,mBAAmB,MAAM,OAAO;AAAA,QAChC,kBAAkB,MAAM,OAAO;AAAA,MACjC;AAAA,MACA,gBAAgB,MAAM,aAAa,IAAI,CAAC,OAAO,GAAG,EAAE;AAAA,MACpD,cAAc,MAAM,aAAa;AAAA,QAC/B,CAAC,OAAO,IAAIM,kBAAiB,EAAE,OAAOC,WAAS,GAAG,UAAU,GAAG,CAAC,IAAI,CAAC;AAAA,MACvE;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,eACJ,eAC+C;AAC/C,UAAM,EAAE,YAAY,IAAI,MAAM,KAAK,WAAW,eAAe,EAAE,cAAc,CAAC;AAE9E,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA,IACT;AAEA,QAAI;AACF,aAAO,IAAID,kBAAiB,EAAE;AAAA,QAC5BC,WAAS,YAAY,UAAU;AAAA,QAC/B;AAAA,MACF,IAAI,CAAC;AAAA,IACP,SAAS,OAAO;AACd,UAAI,iBAAiBV,eAAa,MAAM,SAASI,YAAU,8BAA8B;AAEvF,gBAAQ,KAAK,0CAA0C;AACvD,eAAO;AAAA,MACT;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,gBAAgB,gBAAyE;AAC7F,UAAM;AAAA,MACJ,cAAc,EAAE,OAAO,SAAS;AAAA,IAClC,IAAI,MAAM,KAAK,WAAW,gBAAgB;AAAA,MACxC,GAAG,uBAAuB;AAAA,QACxB,WAAW;AAAA,QACX,iBAAiB;AAAA,MACnB,CAAC;AAAA,IACH,CAAC;AAED,UAAM,QAAQ,IAAIK,kBAAiB;AACnC,UAAM,eAAe,MAClB,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM;AACjC,UAAI;AACF,eAAO,MAAM,OAAOC,WAAS,UAAU,GAAG,CAAC,EAAE,CAAC;AAAA,MAChD,SAAS,OAAO;AACd,YAAI,iBAAiBV,eAAa,MAAM,SAASI,YAAU,8BAA8B;AAEvF,kBAAQ,KAAK,0CAA0C;AACvD,iBAAO;AAAA,QACT;AACA,cAAM;AAAA,MACR;AAAA,IACF,CAAC,EACA,OAAO,CAAC,OAA0B,OAAO,IAAI;AAEhD,WAAO,EAAE,cAAc,SAAS;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,kBAAkB,QAAgB;AACtC,UAAM,EAAE,kBAAkB,IAAI,MAAM,KAAK,WAAW,kBAAkB;AAAA,MACpE;AAAA,IACF,CAAC;AAED,QAAI,CAAC,mBAAmB;AACtB,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,YAAY,YAAoD;AACpE,UAAM,EAAE,SAAS,IAAI,MAAM,KAAK,WAAW,YAAY,EAAE,WAAW,CAAC;AACrE,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,mBAEJ,YAEA,SACa;AACb,UAAM,EAAE,gBAAgB,IAAI,MAAM,KAAK,WAAW,mBAAmB;AAAA,MACnE,UAAU,IAAIG,SAAQ,UAAU,EAAE,OAAO;AAAA,MACzC,OAAOF,UAAQ,OAAO;AAAA,IACxB,CAAC;AACD,WAAOF,KAAG,gBAAgB,QAAQ,EAAE;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,WAEJ,OAEA,SACa;AACb,UAAM,EAAE,QAAQ,IAAI,MAAM,KAAK,WAAW,aAAa;AAAA,MACrD,OAAO,IAAII,SAAQ,KAAK,EAAE,OAAO;AAAA,MACjC,SAASF,UAAQ,OAAO;AAAA,IAC1B,CAAC;AACD,WAAOF,KAAG,QAAQ,YAAY,EAAE;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,YACJ,OACA,gBAC8B;AAE9B,QAAI,OAA6B,EAAE,OAAO,4BAA4B;AAEtE,UAAM,EAAE,oBAAoB,mBAAmB,IAAI,MAAM,KAAK,gBAAgB;AAE9E,QAAI,oBAAoB;AAEtB,aAAO,uBAAuB;AAAA,QAC5B,WAAW;AAAA,QACX,iBAAiB;AAAA,MACnB,CAAC;AAAA,IACH;AAEA,UAAM;AAAA,MACJ,UAAU,EAAE,OAAO,SAAS;AAAA,IAC9B,IAAI,MAAM,KAAK,WAAW,cAAc;AAAA,MACtC,GAAG;AAAA,MACH,QAAQ,EAAE,OAAO,IAAII,SAAQ,KAAK,EAAE,OAAO,EAAE;AAAA,MAC7C;AAAA,IACF,CAAC;AAED,UAAM,WAAW,MAAM,IAAI,CAAC,EAAE,KAAK,OAAO;AAAA,MACxC,SAAS,KAAK;AAAA,MACd,QAAQJ,KAAG,KAAK,UAAU;AAAA,IAC5B,EAAE;AAEF,WAAO;AAAA,MACL;AAAA,MACA,GAAI,qBAAqB,EAAE,SAAS,IAAI,CAAC;AAAA,IAC3C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,YACJ,SACA,gBAC8B;AAC9B,UAAM;AAAA,MACJ,UAAU,EAAE,OAAO,SAAS;AAAA,IAC9B,IAAI,MAAM,KAAK,WAAW,YAAY;AAAA,MACpC,GAAG,uBAAuB;AAAA,QACxB,WAAW;AAAA,QACX,iBAAiB;AAAA,MACnB,CAAC;AAAA,MACD,OAAO,IAAII,SAAQ,OAAO,EAAE,OAAO;AAAA,IACrC,CAAC;AAED,UAAM,WAAW,MAAM,IAAI,CAAC,EAAE,KAAK,OAAO;AAAA,MACxC,WAAWI,mBAAkB,aAAa;AAAA,QACxC,QAAQ,KAAK;AAAA,QACb,WAAW,KAAK;AAAA,QAChB,OAAO,KAAK;AAAA,QACZ,QAAQR,KAAG,KAAK,MAAM;AAAA,QACtB,MAAM,KAAK;AAAA,MACb,CAAC;AAAA,MACD,QAAQ,IAAII,SAAQ,KAAK,MAAM;AAAA,MAC/B,WAAW,IAAIA,SAAQ,KAAK,SAAS;AAAA,MACrC,OAAO,KAAK;AAAA,MACZ,QAAQJ,KAAG,KAAK,MAAM;AAAA,MACtB,MAAMQ,mBAAkB,WAAW,KAAK,IAAI;AAAA,MAC5C,UAAUR,KAAG,KAAK,QAAQ;AAAA,IAC5B,EAAE;AAEF,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,gBACJ,eACA,OACA,eACA,mBACuB;AACvB,QAAI,cAOA;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAEA,QAAI,iBAAiB,mBAAmB;AACtC,YAAM,IAAIH;AAAA,QACRI,YAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAEA,QAAI,eAAe;AACjB,oBAAc;AAAA,QACZ,GAAG;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAEA,QAAI,mBAAmB;AACrB,oBAAc;AAAA,QACZ,GAAG;AAAA;AAAA;AAAA,QAGH,mBAAmB,kBAAkB,SAAS,EAAE,SAAS;AAAA,MAC3D;AAAA,IACF;AAEA,UAAM,SAAS,MAAM,KAAK,WAAW,gBAAgB,WAAW;AAEhE,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,OAAO;AAEX,WAAO;AAAA,MACL,cAAc;AAAA,QACZ,YAAYD,KAAG,aAAa,UAAU;AAAA,QACtC,UAAU,aAAa;AAAA,MACzB;AAAA,MACA,YAAY;AAAA,QACV,YAAYA,KAAG,WAAW,UAAU;AAAA,QACpC,UAAU,WAAW;AAAA,MACvB;AAAA,MACA,oBAAoB;AAAA,QAClB,IAAI,mBAAmB;AAAA,QACvB,UAAUA,KAAG,mBAAmB,QAAQ;AAAA,QACxC,mBAAmB,OAAO,mBAAmB,iBAAiB;AAAA,QAC9D,kBAAkB,mBAAmB;AAAA,QACrC,QAAQA,KAAG,mBAAmB,MAAM;AAAA,QACpC,UAAU,mBAAmB;AAAA,QAC7B,MAAM,mBAAmB;AAAA,QACzB,iBAAiB,mBAAmB;AAAA,QACpC,qBAAqB,OAAO,mBAAmB,mBAAmB;AAAA,QAClE,mBAAmB,mBAAmB;AAAA,QACtC,4BAA4B,OAAO,mBAAmB,0BAA0B;AAAA,QAChF,gBAAgB,mBAAmB;AAAA,QACnC,gCAAgC,OAAO,mBAAmB,8BAA8B;AAAA,MAC1F;AAAA,MACA,mBAAmB;AAAA,QACjB,IAAI,kBAAkB;AAAA,QACtB,UAAUA,KAAG,kBAAkB,QAAQ;AAAA,QACvC,mBAAmB,OAAO,kBAAkB,iBAAiB;AAAA,QAC7D,kBAAkB,kBAAkB;AAAA,QACpC,QAAQA,KAAG,kBAAkB,MAAM;AAAA,QACnC,UAAU,kBAAkB;AAAA,QAC5B,MAAM,kBAAkB;AAAA,QACxB,iBAAiB,kBAAkB;AAAA,QACnC,qBAAqB,OAAO,kBAAkB,mBAAmB;AAAA,QACjE,mBAAmB,kBAAkB;AAAA,QACrC,4BAA4B,OAAO,kBAAkB,0BAA0B;AAAA,QAC/E,gBAAgB,kBAAkB;AAAA,QAClC,gCAAgC,OAAO,kBAAkB,8BAA8B;AAAA,MACzF;AAAA,MACA,QAAQ,IAAII,SAAQ,MAAM;AAAA,MAC1B,WAAW,IAAIA,SAAQ,SAAS;AAAA,MAChC;AAAA,MACA,QAAQJ,KAAG,MAAM;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,oBAAiC;AACrC,UAAM,EAAE,eAAe,IAAI,MAAM,KAAK,WAAW,kBAAkB;AACnE,WAAOA,KAAG,eAAe,QAAQ;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,iBAAiB,cAAmC;AACxD,UAAM,EAAE,iBAAiB,IAAI,MAAM,KAAK,WAAW,iBAAiB;AAAA,MAClE,cAAc,OAAO,YAAY;AAAA,IACnC,CAAC;AACD,WAAOA,KAAG,iBAAiB,QAAQ;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,iBAEJ,OACwB;AACxB,UAAM,SAAS,MAAM,KAAK,WAAW,iBAAiB,EAAE,MAAM,CAAC;AAC/D,WAAO,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,cAAc,QAAgB,WAAoB;AACtD,UAAM,EAAE,eAAe,kBAAkB,IAAI,MAAM,KAAK,WAAW,cAAc;AAAA,MAC/E,iBAAiBA,KAAG,MAAM,EAAE,SAAS,EAAE;AAAA,MACvC,gBAAgB,YAAYS,UAAS,qBAAqB,SAAS,EAAE,QAAQ,IAAI;AAAA,IACnF,CAAC;AACD,WAAOT,KAAG,iBAAiB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,cAAc,IAA8B;AAChD,UAAM,OAAO,MAAM,KAAK,eAAe,EAAE;AACzC,WAAO,SAAS;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,eAAe,IAA6C;AAChE,UAAM,EAAE,UAAU,MAAM,YAAY,IAAI,MAAM,KAAK,WAAW,cAAc;AAAA,MAC1E,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,eAAe;AAAA,IACjB,CAAC;AAED,QAAI,UAAU;AACZ,aAAO;AAAA,IACT;AACA,QAAI,MAAM;AACR,aAAO;AAAA,IACT;AACA,QAAI,aAAa;AACf,aAAO;AAAA,IACT;AAEA,QAAI;AAEF,YAAM,QAAQ,MAAM,KAAK,gBAAgB,EAAE;AAC3C,UAAI,OAAO;AACT,eAAO;AAAA,MACT;AAAA,IACF,SAAS,GAAG;AAAA,IAAC;AAEb,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,uBAAuB,eAAqD;AAChF,UAAM,UAAU,MAAM,KAAK,WAAW;AACtC,WAAO,IAAI,oBAAoB,eAAe,MAAM,OAAO;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,kBAAkB,OAAwC;AAC9D,UAAM,EAAE,SAAS,WAAW,IAAI,MAAM,KAAK,WAAW,kBAAkB,EAAE,MAAM,CAAC;AAEjF,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,IACT;AAEA,UAAM,UAAmB;AAAA,MACvB,WAAWQ,mBAAkB,aAAa;AAAA,QACxC,QAAQ,WAAW;AAAA,QACnB,WAAW,WAAW;AAAA,QACtB;AAAA,QACA,QAAQR,KAAG,WAAW,MAAM;AAAA,QAC5B,MAAM,WAAW;AAAA,MACnB,CAAC;AAAA,MACD,QAAQ,IAAII,SAAQ,WAAW,MAAM;AAAA,MACrC,WAAW,IAAIA,SAAQ,WAAW,SAAS;AAAA,MAC3C;AAAA,MACA,QAAQJ,KAAG,WAAW,MAAM;AAAA,MAC5B,MAAMQ,mBAAkB,WAAW,WAAW,IAAI;AAAA,MAClD,UAAUR,KAAG,WAAW,QAAQ;AAAA,IAClC;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,4BACJ,sBAC6C;AAC7C,UAAM,EAAE,yBAAyB,IAAI,MAAM,KAAK,WAAW,4BAA4B;AAAA,MACrF;AAAA,IACF,CAAC;AAED,QAAI,CAAC,0BAA0B;AAC7B,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,mBACN,oBACA,UACA,QACW;AACX,QAAI,OAA4B,CAAC;AACjC,QAAI,cAA0C,CAAC;AAE/C,QAAI,mBAAmB,SAASU,kBAAgB,UAAU,mBAAmB,MAAM;AACjF,OAAC,EAAE,MAAM,YAAY,IAAI,kBAAkB;AAAA,QACzC;AAAA,QACA,SAAS,mBAAmB,KAAK;AAAA,QACjC,cAAc,mBAAmB,KAAK;AAAA,MACxC,CAAC;AAAA,IACH;AAEA,WAAO,eAAe;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB;AACtB,UAAM,EAAE,WAAW,IAAI,MAAM,KAAK,QAAQ;AAE1C,WAAO;AAAA,MACL,eAAe,QAAQ,YAAY,aAAa;AAAA,MAChD,oBAAoB,QAAQ,YAAY,QAAQ;AAAA,MAChD,cAAc,QAAQ,YAAY,YAAY;AAAA,IAChD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,gCACN,oBACA,EAAE,OAAO,GACN;AACH,QAAI,QAAQ;AACV,aAAO,QAAQ,CAAC,OAAO,MAAM;AAC3B,YAAI,SAAS,sBAAsB,SAASV,KAAG,MAAM,gBAAgB,EAAE,GAAG,CAAC,GAAG;AAE5E,UAA8B,mBAAmB,OAAO,CAAC,EAAG,mBAC1D,MAAM;AAAA,QACV;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAc,oCACZ,WACA,sBAC0B;AAC1B,UAAM,QAAQ;AAAA,MACZ,UAAU,sBAAsB,UAAU,IAAI,CAAC,UAAUE,UAAQ,KAAK,CAAC,KAAK,CAAC;AAAA,MAC7E,OAAO,sBAAsB,OAAO,IAAI,CAAC,OAAOA,UAAQ,EAAE,CAAC,KAAK,CAAC;AAAA,IACnE;AAEA,QAAI,KAAK,OAAO;AACd,YAAMN,SAAQ,KAAK;AACnB,YAAM,YAAY,UAAU,IAAI,CAAC,YAAYA,OAAM,cAAc,OAAO,CAAC;AAEzE,YAAM;AAAA,QACJ,qBAAqB;AAAA,UACnB,cAAc,EAAE,WAAW,YAAY;AAAA,QACzC;AAAA,MACF,IAAI,MAAM,KAAK,SAAS;AAExB,YAAM,YAAY,YAAY,SAAS;AAEvC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,YAAI,QAAQ,MAAM,MAAM,SAAS,MAAM,SAAS;AAChD,YAAI,SAAS,WAAW;AACtB;AAAA,QACF;AAEA,cAAM,QAAQ,CAAC,GAAG,MAAM,OAAO,GAAG,UAAU,CAAC,EAAE,MAAM,MAAM,GAAG,YAAY,KAAK,CAAC;AAEhF,gBAAQ,MAAM,MAAM,SAAS,MAAM,SAAS;AAE5C,YAAI,SAAS,WAAW;AACtB;AAAA,QACF;AAEA,cAAM,WAAW,CAAC,GAAG,MAAM,UAAU,GAAG,UAAU,CAAC,EAAE,SAAS,MAAM,GAAG,YAAY,KAAK,CAAC;AAAA,MAC3F;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;;;A6ChqFA,SAAS,aAAAe,aAAW,aAAAC,mBAAiB;AACrC,SAAS,MAAAC,YAAU;AACnB,SAAS,oBAAAC,yBAAwB;AACjC,SAAS,YAAAC,kBAAgB;AAqBzB,eAAsB,sBACpB,QAC4B;AAC5B,QAAM,EAAE,IAAI,UAAU,OAAO,IAAI;AAEjC,QAAM,EAAE,aAAa,eAAe,IAAI,MAAM,SAAS,WAAW,2BAA2B;AAAA,IAC3F,eAAe;AAAA,EACjB,CAAC;AAED,MAAI,CAAC,gBAAgB;AACnB,UAAM,IAAIC;AAAA,MACRC,YAAU;AAAA,MACV,uCAAuC,EAAE;AAAA,IAC3C;AAAA,EACF;AAEA,QAAM,CAAC,kBAAkB,IAAI,IAAIC,kBAAiB,EAAE;AAAA,IAClDC,WAAS,eAAe,UAAU;AAAA,IAClC;AAAA,EACF;AAEA,MAAI,aAAuC,CAAC;AAE5C,MAAI,gBAAgB,UAAU,cAAc,eAAe,QAAQ;AACjE,iBAAa,eAAe,OAAO;AAAA,EACrC;AAEA,QAAM,WAAW,WAAW,IAAI,kBAAkB;AAElD,QAAM;AAAA,IACJ,qBAAqB;AAAA,MACnB,eAAe,EAAE,YAAY,eAAe;AAAA,MAC5C,cAAc,EAAE,WAAW,YAAY;AAAA,MACvC;AAAA,IACF;AAAA,EACF,IAAI,MAAM,SAAS,SAAS;AAG5B,QAAM,WAAW,sBAAsB,eAAe,MAAM;AAC5D,QAAM,WAAW,WAAWC,KAAG,CAAC,IAAI,MAAM,SAAS,kBAAkB;AAErE,QAAM,cAAc,MAAM,SAAS,eAAe;AAElD,QAAM,kBAAkB,2BAA6C;AAAA,IACnE,IAAI,eAAe;AAAA,IACnB;AAAA,IACA,aAAa;AAAA,IACb,kBAAkBD,WAAS,eAAe,UAAU;AAAA,IACpD,sBAAsB,eAAe;AAAA,IACrC,YAAYC,KAAG,UAAU;AAAA,IACzB,gBAAgBA,KAAG,cAAc;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,SAAO;AAAA,IACL,GAAG;AAAA,EACL;AACF;AA9DsB;AAuEtB,eAAsB,iCACpB,QAC+C;AAC/C,QAAM,EAAE,UAAU,oBAAoB,OAAO,IAAI;AAEjD,QAAM,EAAE,SAAS,IAAI,MAAM,SAAS,OAAO,kBAAkB;AAE7D,QAAM,EAAE,YAAY,gBAAgB,UAAU,YAAY,IAAI,MAAM,SAAS,aAAa;AAC1F,QAAM,aAAa,MAAM,SAAS,SAAS,GAAG,oBAAoB,aAAa;AAE/E,QAAM,cAAc,mBAAmB,cAAc;AACrD,QAAM,mBAAmB,mBAAmB,mBAAmB;AAE/D,QAAM,WAAW,MAAM,SAAS,kBAAkB;AAClD,QAAM,cAAc,MAAM,SAAS,eAAe;AAElD,QAAM,qBAAqB,2BAA6C;AAAA,IACtE,IAAI,mBAAmB,iBAAiB,MAAM,SAAS,WAAW,CAAC;AAAA,IACnE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAhCsB;AAmDtB,eAAsB,yBACpB,QAC0C;AAC1C,QAAM,EAAE,SAAS,UAAU,OAAO,IAAI;AAEtC,QAAM,EAAE,OAAO,GAAG,UAAU,IAAI;AAEhC,QAAM,wBAAwB,uBAAuB;AAAA,IACnD;AAAA,IACA,iBAAiB;AAAA,EACnB,CAAC;AAED,QAAM,EAAE,oBAAoB,IAAI,MAAM,SAAS,WAAW,uBAAuB;AAAA,IAC/E,GAAG;AAAA,IACH;AAAA,EACF,CAAC;AAED,QAAM,EAAE,OAAO,SAAS,IAAI;AAE5B,QAAM;AAAA,IACJ,qBAAqB;AAAA,MACnB,eAAe,EAAE,YAAY,eAAe;AAAA,MAC5C,cAAc,EAAE,WAAW,YAAY;AAAA,MACvC;AAAA,IACF;AAAA,EACF,IAAI,MAAM,SAAS,SAAS;AAE5B,QAAM,WAAW,MAAM,SAAS,kBAAkB;AAClD,QAAM,cAAc,MAAM,SAAS,eAAe;AAElD,QAAM,eAAe,MAAM,IAAI,CAAC,SAAS;AACvC,UAAM,EAAE,MAAM,eAAe,IAAI;AAEjC,UAAM,EAAE,IAAI,YAAY,OAAO,IAAI;AAEnC,UAAM,CAAC,kBAAkB,IAAI,IAAIF,kBAAiB,EAAE,OAAOC,WAAS,UAAU,GAAG,CAAC;AAElF,QAAI,aAAuC,CAAC;AAE5C,QAAI,gBAAgB,UAAU,cAAc,eAAe,QAAQ;AACjE,mBAAa,eAAe,OAAO;AAAA,IACrC;AAEA,UAAM,WAAW,WAAW,IAAI,kBAAkB;AAElD,UAAM,qBAAqB,2BAA2B;AAAA,MACpD;AAAA,MACA;AAAA,MACA,aAAa;AAAA,MACb,kBAAkBA,WAAS,UAAU;AAAA,MACrC,sBAAsB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,UAAM,SAA4B;AAAA,MAChC,GAAG;AAAA,IACL;AAEA,WAAO;AAAA,EACT,CAAC;AAED,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAxEsB;;;AClJtB,SAAS,MAAAE,YAAU;AACnB,SAAS,oBAAAC,yBAAwB;AACjC,SAAS,YAAAC,kBAAgB;AAOlB,IAAM,qCAAqC,8BAAO,SAGnD;AACJ,QAAM,EAAE,UAAU,mBAAmB,IAAI;AACzC,QAAM,EAAE,IAAI,kBAAkB,UAAU,SAAS,IAAI;AAErD,QAAM;AAAA,IACJ,qBAAqB;AAAA,MACnB;AAAA,MACA,cAAc,EAAE,WAAW,YAAY;AAAA,MACvC,eAAe,EAAE,gBAAgB,WAAW;AAAA,MAC5C;AAAA,IACF;AAAA,EACF,IAAI,MAAM,SAAS,SAAS;AAE5B,QAAM,+BAA+BC,WAAS,gBAAgB;AAC9D,QAAM,CAAC,WAAW,IAAI,IAAIC,kBAAiB,EAAE,OAAO,8BAA8B,CAAC;AAEnF,SAAO,2BAA2B;AAAA,IAChC;AAAA,IACA;AAAA,IACA,kBAAkB;AAAA,IAClB,UAAU,SAAS,IAAI,kBAAkB;AAAA,IACzC,UAAUC,KAAG,QAAQ;AAAA;AAAA,IAGrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH,GAlCkD;;;ACG3C,IAAM,mCAAmC,8BAC9C,aACqC;AACrC,QAAM,EAAE,IAAI,QAAQ,MAAM,SAAAC,UAAS,UAAU,gBAAgB,sBAAsB,IAAI;AACvF,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,aAAaA,WAAU,KAAK,UAAUA,SAAQ,OAAO,CAAC,IAAI;AAAA,IAC1D,aAAa,SAAS;AAAA,IACtB,eAAe,MAAM,uBAAuB,QAAQ;AAAA,IACpD;AAAA,IACA;AAAA,EACF;AACF,GAdgD;AAgBzC,IAAM,qCAAqC,wBAAC,SAAkC;AACnF,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,QAAM,WAAW,IAAI,SAAS,aAAa,EAAE,OAAO,cAAc,CAAC;AACnE,QAAM,EAAE,QAAQ,IAAI,cAAc,MAAM;AAExC,QAAM,WAAW,IAAI,oBAAoB,IAAI,UAAU,OAAO,OAAO,GAAG,IAAI;AAE5E,MAAI,aAAa;AACf,aAAS,UAAU,sBAAsB,KAAK,MAAM,WAAW,CAAC;AAAA,EAClE;AAEA,WAAS,SAAS;AAClB,WAAS,iBAAiB;AAC1B,WAAS,wBAAwB;AAEjC,SAAO;AACT,GA1BkD;;;ACzB3C,IAAe,kBAAf,MAA+B;AAAA,EAHtC,OAGsC;AAAA;AAAA;AAQtC;;;ACXA,SAAS,cAAc,kBAAAC,iBAAgB,iBAAiB,iBAAiB;AACzE,SAAS,WAAAC,gBAAe;AAExB,SAAS,YAAAC,YAAU,UAAAC,eAAc;AAEjC,YAAY,SAAS;AAQd,IAAM,qCAAqC,wBAChD,mBACG;AACH,QAAM,cAAc,IAAIC,gBAAe,KAAK;AAC5C,SAAO,eAAe,OAAO,CAAC,KAAK,kBAAkB;AACnD,UAAM,EAAE,SAAS,QAAQ,WAAW,IAAI;AACxC,UAAM,UAAU,YAAY,OAAO,MAAM;AACzC,UAAM,aAAaC,QAAO,CAAC,IAAIC,SAAQ,UAAU,EAAE,QAAQ,GAAG,SAASC,WAAS,OAAO,CAAC,CAAC;AACzF,WAAOF,QAAO,CAAC,KAAK,UAAU,CAAC;AAAA,EACjC,GAAG,IAAI,WAAW,CAAC;AACrB,GAVkD;AAY3C,IAAM,mCAAmC,8BAC9C,mBACG;AACH,QAAM,aAAa,mCAAmC,cAAc;AAGpE,QAAU,aAAS;AAEnB,MAAI,SAAS,IAAI,WAAW;AAE5B,iBAAe,QAAQ,CAAC,GAAG,MAAM;AAC/B,UAAM,UAAU,kBAAkB,YAAY,gBAAgB;AAE9D,aAASA,QAAO;AAAA,MACd;AAAA;AAAA,MAEI,QAAI,IAAM,GAAS,YAAQ,UAAU,EAAE,SAAS;AAAA;AAAA,MAEhD,SAAK,IAAM,IAAM,MAAM,EAAE,SAAS;AAAA;AAAA,MAElC,SAAK,IAAM,IAAM,eAAe,EAAE,SAAS;AAAA;AAAA,MAE3C,OAAG,IAAM,IAAM,CAAG,EAAE,SAAS;AAAA;AAAA,MAE7B,SAAK,IAAM,IAAM,SAAS,EAAE,SAAS;AAAA;AAAA,MAErC,OAAG,IAAM,IAAM,EAAI,EAAE,SAAS;AAAA,IACpC,CAAC;AAAA,EACH,CAAC;AAGD,WAASA,QAAO,CAAC,QAAY,QAAI,CAAG,EAAE,SAAS,CAAC,CAAC;AAEjD,SAAO,EAAE,QAAQ,WAAW;AAC9B,GAlCgD;;;ACvBzC,IAAM,wBAAwB,wBAAC,OAAe,mBAA2B;AAC9E,QAAM,aAAa,KAAK,KAAK,MAAM,SAAS,cAAc;AAC1D,QAAM,UAAoB,CAAC;AAE3B,WAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACtC,UAAM,aAAa,IAAI;AACvB,UAAM,YAAY,IAAI,KAAK;AAC3B,YAAQ,KAAK,MAAM,MAAM,YAAY,QAAQ,CAAC;AAAA,EAChD;AAEA,SAAO;AACT,GAXqC;;;ApDiHrC,IAAM,uBAAuB;AAOtB,IAAM,UAAN,cAAsB,gBAAuC;AAAA,EA1HpE,OA0HoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAIzD;AAAA;AAAA;AAAA;AAAA,EAKC;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASV,YAAY,SAAuB,UAAqB,WAA2B;AACjF,UAAM;AACN,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,UAAU,IAAIG,SAAQ,OAAO;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAqB;AACvB,QAAI,CAAC,KAAK,WAAW;AACnB,YAAM,IAAIC,YAAUC,YAAU,kBAAkB,kBAAkB;AAAA,IACpE;AAEA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,SAAS,UAAoB;AAC/B,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ,UAA8B;AACpC,SAAK,YAAY;AACjB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,oBACJ,YACA,sBACqB;AACrB,WAAO,KAAK,SAAS,oBAAoB,KAAK,SAAS,YAAY,oBAAoB;AAAA,EACzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,SACJ,SACA,gBAC2B;AAC3B,WAAO,KAAK,SAAS,SAAS,KAAK,SAAS,SAAS,cAAc;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,YAAY,gBAAqE;AACrF,WAAO,KAAK,SAAS,YAAY,KAAK,SAAS,cAAc;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,WAAW,SAAkC;AACjD,UAAM,iBAAiB,WAAY,MAAM,KAAK,SAAS,eAAe;AACtE,UAAM,SAAS,MAAM,KAAK,SAAS,WAAW,KAAK,SAAS,cAAc;AAC1E,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAA4C;AAChD,WAAO,KAAK,SAAS,YAAY,KAAK,OAAO;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,KAAmCC,UAAY,QAAuC;AAC1F,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AAEJ,UAAM,UAAU,MAAM,KAAK,SAAS,WAAW;AAE/C,UAAM,MAAMA,SAAQ;AACpB,UAAM,cAAc,MAAM,KAAK,SAAS,eAAe;AACvD,UAAM,sBACJ,mBAAmB,KAAK,CAAC,aAAa,SAAS,YAAY,WAAW,GAAG,UAAUC,KAAG,CAAC;AAEzF,UAAM,4BAA4B,0BAA0B;AAAA,MAC1D,QAAQA,KAAG,GAAG;AAAA,MACd,SAAS;AAAA,MACT,gBAAgB;AAAA,IAClB,CAAC;AAED,UAAM,iBAA8D,CAAC;AAErE,8BAA0B,QAAQ,CAAC,EAAE,QAAQ,QAAQ,MAAM;AACzD,qBAAe,OAAO,IAAI;AAAA,QACxB,UAAU;AAAA,QACV,OAAOA,KAAG,CAAC;AAAA,MACb;AAAA,IACF,CAAC;AAED,IAAAD,SAAQ,OAAO,OAAO,sBAAsB,EAAE,QAAQ,CAAC,UAAU;AAC/D,YAAME,UAAS,mBAAmB,KAAK;AACvC,YAAM,UAAUA,UAAS,OAAO,MAAM,OAAO,IAAI;AACjD,UAAI,eAAe,OAAO,GAAG;AAC3B,uBAAe,OAAO,EAAE,QAAQ,eAAe,OAAO,EAAE,MAAM,IAAI,MAAM,MAAM;AAAA,MAChF;AAAA,IACF,CAAC;AAED,QAAI,oBAAoC,CAAC;AACzC,WAAO,QAAQ,cAAc,EAAE,QAAQ,CAAC,CAAC,SAAS,EAAE,OAAO,SAAS,CAAC,MAAM;AACzE,UAAI,MAAM,GAAG,QAAQ,GAAG;AACtB,0BAAkB,KAAK;AAAA,UACrB;AAAA,UACA,QAAQ,SAAS,IAAI,KAAK;AAAA,QAC5B,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAED,QAAI,kBAAkB,kBAAkB,SAAS;AACjD,QAAI,kBAAkB;AACtB,WAAO,mBAAmB,kBAAkB,sBAAsB;AAChE,YAAM,YAAY,MAAM,KAAK;AAAA,QAC3B;AAAA,QACA,qCAAqCF,SAAQ,QAAQ,KAAK,OAAO;AAAA,MACnE;AAEA,MAAAA,SAAQ,aAAa,SAAS;AAC9B,MAAAA,SAAQ,uBAAuB,mBAAmB;AAElD,YAAMG,uBAAsBC,OAAMJ,QAAO;AACzC,UAAI,iBAAiB;AACnB,cAAM,KAAK,EAAE,QAAQ,gBAAgB,CAAC,EAAE;AAAA,UAAQ,MAC9CG,qBAAoB,gBAAgB;AAAA,QACtC;AAAA,MACF;AAEA,UAAI,CAAC,cAAc;AACjB,0BAAkB;AAClB;AAAA,MACF;AAGA,YAAM,EAAE,QAAQ,OAAO,IAAI,MAAM,KAAK,SAAS,oBAAoB;AAAA,QACjE,oBAAoBA;AAAA,QACpB;AAAA,MACF,CAAC;AAED,YAAM,yBAAyB;AAAA,QAC7BH,SAAQ,OAAO,OAAO,sBAAsB;AAAA,QAC5C;AAAA,QACA;AAAA,MACF;AAGA,YAAM,gCAAgC,oBAAoB,IAAI,MAAM;AAEpE,UAAI,uBAAuB,GAAG,6BAA6B,GAAG;AAC5D,0BAAkB;AAAA,MACpB,OAAO;AACL,4BAAoB;AAAA,UAClB;AAAA,YACE,QAAQ,8BAA8B,IAAI,sBAAsB;AAAA,YAChE,SAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAEA,yBAAmB;AAAA,IACrB;AAGA,QAAI,iBAAiB;AACnB,YAAM,IAAIF;AAAA,QACRC,YAAU;AAAA,QACV,eAAe,KAAK,OAAO;AAAA,MAC7B;AAAA,IACF;AAEA,IAAAC,SAAQ,YAAY,SAAS,UAAU,kBAAkB;AAEzD,UAAM,KAAK,SAAS,oBAAoBA,QAAO;AAE/C,IAAAA,SAAQ,uBAAuB,mBAAmB;AAElD,UAAM,sBAAsBI,OAAMJ,QAAO;AACzC,QAAI,iBAAiB;AACnB,YAAM,KAAK,EAAE,QAAQ,gBAAgB,CAAC,EAAE,QAAQ,MAAM,oBAAoB,gBAAgB,CAAC;AAAA,IAC7F;AAEA,QAAI,CAAC,cAAc;AACjB,aAAOA;AAAA,IACT;AAEA,UAAM,EAAE,OAAO,IAAI,MAAM,KAAK,SAAS,oBAAoB;AAAA,MACzD,oBAAoB;AAAA,MACpB;AAAA,IACF,CAAC;AAED,IAAAA,SAAQ,SAAS;AAEjB,WAAOA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,eACJ,aACA,QACA,SACA,WAAyB,CAAC,GACS;AACnC,QAAIA,WAAU,IAAI,yBAAyB,QAAQ;AAEnD,IAAAA,WAAU,KAAK,YAAYA,UAAS;AAAA,MAClC;AAAA,MACA;AAAA,MACA,SAAS,WAAY,MAAM,KAAK,SAAS,eAAe;AAAA,IAC1D,CAAC;AAED,UAAM,EAAE,UAAU,mBAAmB,IAAI,MAAM,KAAK,WAAWA,QAAO;AAEtE,IAAAA,WAAU,MAAM,sCAAsC;AAAA,MACpD;AAAA,MACA,UAAU,KAAK;AAAA,MACf;AAAA,MACA,aAAa,UAAU;AAAA,MACvB,WAAW,UAAU;AAAA,IACvB,CAAC;AAED,WAAOA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,SACJ,aACA,QACA,SACA,WAAyB,CAAC,GACI;AAC9B,UAAMA,WAAU,MAAM,KAAK,eAAe,aAAa,QAAQ,SAAS,QAAQ;AAChF,WAAO,KAAK,gBAAgBA,UAAS,EAAE,wBAAwB,MAAM,CAAC;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,cACJ,gBACA,WAAyB,CAAC,GACI;AAC9B,QAAIA,WAAU,IAAI,yBAAyB,QAAQ;AACnD,IAAAA,WAAU,KAAK,iBAAiBA,UAAS,cAAc;AAEvD,UAAM,EAAE,UAAU,mBAAmB,IAAI,MAAM,KAAK,WAAWA,QAAO;AAEtE,IAAAA,WAAU,MAAM,sCAAsC;AAAA,MACpD;AAAA,MACA,UAAU,KAAK;AAAA,MACf;AAAA,MACA,aAAa,UAAU;AAAA,MACvB,WAAW,UAAU;AAAA,IACvB,CAAC;AACD,WAAO,KAAK,gBAAgBA,UAAS,EAAE,wBAAwB,MAAM,CAAC;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAYA,UAAmC,gBAAgC;AAC7E,UAAM,EAAE,aAAa,QAAQ,QAAQ,IAAI;AACzC,SAAK,uBAAuB,MAAM;AAClC,IAAAA,SAAQ,cAAc,IAAIH,SAAQ,WAAW,GAAG,QAAQ,OAAO;AAC/D,WAAOG;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiBA,UAAmC,gBAAkC;AACpF,mBAAe,QAAQ,CAAC,EAAE,aAAa,QAAQ,QAAQ,MAAM;AAC3D,WAAK,YAAYA,UAAS;AAAA,QACxB;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,WAAOA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,mBACJ,YACA,QACA,SACA,WAAyB,CAAC,GACI;AAC9B,WAAO,KAAK,yBAAyB,CAAC,EAAE,QAAQ,SAAS,WAAW,CAAC,GAAG,QAAQ;AAAA,EAClF;AAAA,EAEA,MAAM,yBACJ,wBACA,WAAyB,CAAC,GACI;AAC9B,QAAIA,WAAU,IAAI,yBAAyB;AAAA,MACzC,GAAG;AAAA,IACL,CAAC;AAED,UAAM,aAA6B,CAAC;AAEpC,UAAM,iBAAiB,MAAM,KAAK,SAAS,eAAe;AAE1D,UAAM,iBAAiB,uBAAuB,IAAI,CAAC,kBAAkB;AACnE,YAAM,SAASC,KAAG,cAAc,MAAM;AACtC,YAAM,kBAAkB,IAAIJ,SAAQ,cAAc,UAAU;AAE5D,YAAM,UAAU,cAAc,UAAUQ,UAAQ,cAAc,OAAO,IAAI;AAEzE,UAAI,OAAO,IAAI,CAAC,GAAG;AACjB,cAAM,IAAIP;AAAA,UACRC,YAAU;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,MAAAC,SAAQ,0BAA0B,eAAe;AACjD,iBAAW,KAAK,EAAE,QAAQ,QAAQ,CAAC;AAEnC,aAAO;AAAA,QACL;AAAA,QACA,YAAY,gBAAgB,OAAO;AAAA,QACnC;AAAA,MACF;AAAA,IACF,CAAC;AAED,UAAM,EAAE,QAAQ,WAAW,IAAI,MAAM,iCAAiC,cAAc;AAEpF,IAAAA,SAAQ,SAAS;AACjB,IAAAA,SAAQ,aAAa;AAErB,UAAM,EAAE,UAAU,mBAAmB,IAAI,MAAM,KAAK,WAAWA,UAAS,UAAU;AAElF,IAAAA,WAAU,MAAM,sCAAsC;AAAA,MACpD;AAAA,MACA,UAAU,KAAK;AAAA,MACf;AAAA,MACA,aAAa,UAAU;AAAA,MACvB,WAAW,UAAU;AAAA,IACvB,CAAC;AAED,WAAO,KAAK,gBAAgBA,QAAO;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,oBACJ,WACA,QACA,WAAyB,CAAC,GACI;AAC9B,UAAM,mBAAmB,IAAIH,SAAQ,SAAS;AAE9C,UAAM,qBAAqBS;AAAA,MACzB,KAAK,OAAO,iBAAiB,YAAY,EAAE,UAAU,CAAC,EAAE,SAAS,IAAI,GAAG,CAAC;AAAA,IAC3E;AACA,UAAM,kBAAkBA;AAAA,MACtB,KAAK,OAAOL,KAAG,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,EAAE,SAAS,IAAI,GAAG,CAAC;AAAA,IAC/D;AACA,UAAM,SAAS,IAAI,WAAW;AAAA,MAC5B,GAAGK,WAAS,eAAe,KAAK;AAAA,MAChC,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AAED,UAAM,SAAuC,EAAE,QAAQ,GAAG,SAAS;AAEnE,UAAM,cAAc,MAAM,KAAK,SAAS,eAAe;AACvD,QAAIN,WAAU,IAAI,yBAAyB,MAAM;AACjD,UAAM,aAAa,CAAC,EAAE,QAAQC,KAAG,MAAM,GAAG,SAAS,YAAY,CAAC;AAEhE,UAAM,EAAE,UAAU,mBAAmB,IAAI,MAAM,KAAK,WAAWD,UAAS,UAAU;AAElF,IAAAA,WAAU,MAAM,sCAAsC;AAAA,MACpD;AAAA,MACA,UAAU,KAAK;AAAA,MACf;AAAA,MACA,aAAa,UAAU;AAAA,MACvB,WAAW,UAAU;AAAA,IACvB,CAAC;AAED,WAAO,KAAK,gBAAgBA,QAAO;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,iBAAiB,QAA8D;AACnF,UAAM,EAAE,QAAQ,IAAI;AAEpB,UAAM,EAAE,MAAM,IAAI,MAAM,KAAK,SAAS,OAAO;AAE7C,UAAM,cAAc,MAAM,KAAK,SAAS,eAAe;AACvD,UAAM,cAAc,gBAAgB;AAEpC,QAAI;AACJ,UAAM,sBAAsD;AAAA,MAC1D;AAAA,MACA,MAAM,OAAO;AAAA,MACb,WAAW,OAAO;AAAA,IACpB;AAEA,QAAI,aAAa;AACf,OAAC,EAAE,UAAU,IAAI,MAAM,KAAK,kCAAkC,mBAAmB;AAAA,IACnF,OAAO;AACL,YAAM,IAAIF;AAAA,QACRC,YAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAEA,WAAO,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,kCAAkC,QAAwC;AAC9E,UAAM,EAAE,OAAO,OAAO,YAAY,YAAY,EAAE,IAAI;AAEpD,UAAM,cAAc,MAAM,KAAK,SAAS,eAAe;AAEvD,SAAK,8BAA8B,OAAO,WAAW;AAErD,UAAM,YAAY,MAAM,KAAK,SAAS,SAAS;AAC/C,UAAM,kBAAkB,UAAU,oBAAoB,aAAa,UAAU,SAAS;AAEtF,QAAI,eAAeE,KAAG,CAAC;AACvB,UAAM,MAAkC,CAAC;AACzC,UAAM,eAAe,sBAAsB,OAAO,eAAe;AACjE,UAAM,WAAW,MAAM,KAAK,SAAS,iBAAiB,EAAE;AACxD,UAAM,6BAA6B,YAAY;AAE/C,iBAEG,OAAO,CAAC,UAAU,MAAM,SAAS,CAAC,EAClC,QAAQ,CAAC,cAAc;AACtB,YAAMD,WAAU,IAAI,yBAAyB;AAAA,QAC3C,QAAQ;AAAA,MACV,CAAC;AAED,MAAAA,SAAQ,aAAa,SAAS;AAE9B,UAAI,4BAA4B;AAE9B,cAAM,KAAK,EAAE,QAAQ,YAAY,EAAE,CAAC,EAAE,QAAQ,MAAM;AAElD,UAAAA,SAAQ,cAAc,KAAK,SAAS,GAAG,WAAW;AAAA,QACpD,CAAC;AAAA,MACH;AAEA,YAAM,SAASA,SAAQ,gBAAgB,SAAS;AAEhD,YAAM,MAAM,gBAAgB;AAAA,QAC1B;AAAA,QACA,KAAK;AAAA,QACL,aAAa,UAAU,oBAAoB,cAAc;AAAA,QACzD,KAAKA,SAAQ;AAAA,MACf,CAAC;AAED,MAAAA,SAAQ,SAAS;AAEjB,UAAI,4BAA4B;AAC9B,cAAM,QAAQA,SAAQ,OACnB,OAAO,kBAAkB,EACzB,OAAO,CAAC,KAAK,UAAU,IAAI,IAAI,MAAM,MAAM,GAAGC,KAAG,CAAC,CAAC;AAGtD,cAAM,mBAAmB,MAAM,IAAI,YAAY,CAAC;AAEhD,QAAAD,SAAQ,QAAQ,QAAQ,CAAC,WAAW;AAClC,cAAI,OAAO,SAASO,YAAW,MAAM;AACnC,mBAAO,SAAS;AAAA,UAClB;AAAA,QACF,CAAC;AAAA,MACH;AAEA,qBAAe,aAAa,IAAI,GAAG;AAEnC,UAAI,KAAKP,QAAO;AAAA,IAClB,CAAC;AAEH,UAAM,YAAY,KAAK,iBAAiB,EAAE,KAAK,KAAK,CAAC;AAErD,WAAO,EAAE,KAAK,cAAc,UAAU;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,wBAAC,WAAsD;AAExE,UAAM,EAAE,KAAK,OAAO,aAAa,IAAI;AAErC,WAAO,YAAY;AACjB,YAAM,cAA2D,CAAC;AAClE,YAAM,SAAsB,CAAC;AAE7B,UAAI,SAAS,cAAc;AAEzB,mBAAW,MAAM,KAAK;AACpB,cAAI;AACF,kBAAM,SAAS,MAAM,KAAK,gBAAgB,EAAE;AAC5C,kBAAM,WAAW,MAAM,OAAO,cAAsC;AACpE,wBAAY,KAAK,QAAQ;AAAA,UAC3B,SAAS,OAAO;AACd,mBAAO,KAAK,KAAkB;AAAA,UAChC;AAAA,QACF;AAAA,MACF,OAAO;AAEL,cAAM,UAAU,MAAM,QAAQ;AAAA,UAC5B,IAAI,IAAI,OAAO,OAAO;AAEpB,kBAAM,SAAS,MAAM,KAAK,gBAAgB,EAAE;AAC5C,mBAAO,OAAO,cAAsC;AAAA,UACtD,CAAC;AAAA,QACH;AAGA,gBAAQ,QAAQ,CAAC,WAAW;AAC1B,cAAI,OAAO,WAAW,aAAa;AACjC,wBAAY,KAAK,OAAO,KAAK;AAAA,UAC/B,OAAO;AAEL,mBAAO,KAAK,OAAO,MAAmB;AAAA,UACxC;AAAA,QACF,CAAC;AAAA,MACH;AAEA,aAAO,EAAE,aAAa,OAAO;AAAA,IAC/B;AAAA,EACF,GA1CmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyDnB,MAAM,mBACJ,wBACA,EAAE,mBAAmB,aAAa,CAAC,GAAG,SAAS,IAA2B,CAAC,GACjD;AAC1B,UAAM,iBAAiBI,OAAM,sBAAsB,sBAAsB,CAAC;AAC1E,UAAM,cAAc,MAAM,KAAK,SAAS,eAAe;AAIvD,UAAM,wBAAwB,eAAe,yBAAyB;AAEtE,UAAM,qBAAqB,gBAAgB,uBAAuB,UAAU;AAE5E,UAAM,0BAA0B,CAAC,EAAE,SAAS,aAAa,QAAQH,KAAG,oBAAoB,EAAE,CAAC;AAE3F,UAAM,iBAAiB,wBAAC,YACtB,eAAe,OAAO,KAAK,CAAC,UAAU;AACpC,UAAI,MAAM,SAASO,WAAU,MAAM;AACjC,eAAO,MAAM,YAAY;AAAA,MAC3B;AAIA,UAAI,iCAAiC,KAAK,GAAG;AAC3C,eAAO,gBAAgB;AAAA,MACzB;AACA,aAAO;AAAA,IACT,CAAC,GAZoB;AAcvB,UAAM,mBAAmB,wBAAC,SAAiB,aAAiB;AAC1D,YAAM,aAAa,eAAe,OAAO;AACzC,YAAM,eAAe;AAErB,UAAI,cAAc,YAAY,YAAY;AACxC,mBAAW,SAAS;AAAA,MACtB,OAAO;AACL,uBAAe;AAAA,UACb,KAAK,sBAAsB;AAAA,YACzB;AAAA,cACE,QAAQ;AAAA,cACR;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,GAhByB;AAkBzB,oBAAgB,oBAAoB,uBAAuB,EAAE;AAAA,MAAQ,CAAC,EAAE,QAAQ,QAAQ,MACtF,iBAAiB,SAAS,MAAM;AAAA,IAClC;AAEA,UAAM,SAAS,MAAM,KAAK,SAAS,mBAAmB,gBAAgB;AAAA,MACpE;AAAA,MACA;AAAA,IACF,CAAC;AAED,WAAO;AAAA,MACL,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,YAAY,SAA2C;AAC3D,QAAI,CAAC,KAAK,YAAY;AACpB,YAAM,IAAIV,YAAUC,YAAU,mBAAmB,2CAA2C;AAAA,IAC9F;AACA,WAAO,KAAK,WAAW,YAAY,KAAK,QAAQ,SAAS,GAAG,OAAO;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,gBAAgB,wBAAiE;AACrF,QAAI,CAAC,KAAK,YAAY;AACpB,YAAM,IAAID;AAAA,QACRC,YAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AACA,WAAO,KAAK,WAAW,gBAAgB,KAAK,QAAQ,SAAS,GAAG,sBAAsB;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,gBACJ,wBACA,EAAE,yBAAyB,MAAM,GAAG,iBAAiB,IAAyB,CAAC,GACjD;AAC9B,QAAI,qBAAqB,sBAAsB,sBAAsB;AAIrE,QAAI,KAAK,YAAY;AACnB,YAAM,EAAE,cAAc,gBAAgB,MAAM,IAAI;AAEhD,2BAAqB,MAAM,KAAK,0BAA0B,kBAAkB;AAE5E,YAAM,SAAoC;AAAA,QACxC;AAAA,QACA;AAAA,QACA,UAAU;AAAA,UACR,KAAK,KAAK,SAAS;AAAA,UACnB,OAAO,MAAM,uBAAuB,KAAK,QAAQ;AAAA,QACnD;AAAA,QACA,kBAAkB,mBAAmB,KAAK;AAAA,QAC1C,oBAAoB,MAAM,KAAK,0BAA0B,kBAAkB;AAAA,MAC7E;AAEA,YAAM,cAA4C,MAAM,KAAK,WAAW;AAAA,QACtE,KAAK,QAAQ,SAAS;AAAA,QACtB;AAAA,QACA;AAAA,MACF;AAEA,aAAO,OAAO,gBAAgB,WAC1B,KAAK,SAAS,uBAAuB,WAAW,IAChD;AAAA,IACN;AAEA,QAAI,wBAAwB;AAC1B,YAAM,KAAK,SAAS,uBAAuB,kBAAkB;AAAA,IAC/D;AACA,WAAO,KAAK,SAAS,gBAAgB,oBAAoB;AAAA,MACvD,wBAAwB;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,oBACJ,wBACA,EAAE,yBAAyB,KAAK,IAA+B,CAAC,GAC3C;AACrB,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE,QAAI,wBAAwB;AAC1B,YAAM,KAAK,SAAS,uBAAuB,kBAAkB;AAAA,IAC/D;AACA,WAAO,KAAK,SAAS,SAAS,oBAAoB,EAAE,wBAAwB,MAAM,CAAC;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB,OAAyC;AAC7D,WAAO,MAAM,IAAI,CAAC,UAAU;AAAA,MAC1B,IAAIM,UAAQI,aAAYC,YAAW,CAAC;AAAA,MACpC,OAAO,KAAK;AAAA,MACZ,cAAcT,KAAG,CAAC;AAAA,MAClB,cAAcA,KAAG,CAAC;AAAA,MAClB,GAAG;AAAA,IACL,EAAE;AAAA,EACJ;AAAA;AAAA,EAGA,MAAc,0BACZD,UAC6B;AAC7B,UAAM,EAAE,cAAc,IAAIA,SAAQ;AAGlC,QAAI,CAACW,WAAU,aAAa,GAAG;AAC7B,aAAOX;AAAA,IACT;AAEA,UAAM,UAAU,MAAM,KAAK,SAAS,WAAW;AAC/C,UAAM,uBAAuBA,SAAQ,iBAAiB,OAAO;AAI7D,QAAI,kBAAkB,sBAAsB;AAC1C,MAAAA,SAAQ,YAAY,OAAO;AAAA,IAC7B;AACA,WAAOA;AAAA,EACT;AAAA;AAAA,EAGA,MAAc,0BACZA,UAC6C;AAC7C,UAAM,UAAU,MAAM,KAAK,SAAS,WAAW;AAE/C,WAAOW,WAAUX,SAAQ,KAAK,OAAO,IACjC;AAAA,MACE,GAAGA,SAAQ,KAAK;AAAA,MAChB,IAAIA,SAAQ,iBAAiB,OAAO;AAAA,MACpC,kBAAkBK,UAAQL,SAAQ,mBAAmB,CAAC;AAAA,IACxD,IACA;AAAA,EACN;AAAA;AAAA,EAGA,MAAc,WACZ,oBACA,aAA6B,CAAC,GAC2C;AACzE,UAAM,mBAAmB,mBAAmB,QACzC,OAAO,CAAC,MAAM,EAAE,SAASO,YAAW,IAAI,EACxC,IAAI,CAAC,EAAE,QAAQ,QAAQ,OAAO,EAAE,SAAS,OAAO,OAAO,GAAG,QAAQN,KAAG,MAAM,EAAE,EAAE;AAElF,uBAAmB,WAAWA,KAAG,CAAC;AAClC,uBAAmB,SAASA,KAAG,CAAC;AAEhC,UAAM,EAAE,kBAAkB,SAAS,IAAI,MAAM,KAAK,SAAS,WAAW;AAAA,MACpE,SAAS;AAAA,MACT,uBAAuB,gBAAgB,kBAAkB,UAAU;AAAA,MACnE,iBAAiB;AAAA,IACnB,CAAC;AAED,WAAO,EAAE,oBAAoB,kBAA8C,SAAS;AAAA,EACtF;AAAA;AAAA,EAGQ,uBAAuB,QAAsB;AACnD,QAAIA,KAAG,MAAM,EAAE,IAAI,CAAC,GAAG;AACrB,YAAM,IAAIH;AAAA,QACRC,YAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,MAAc,2BACZ,oBACA,UACA,YACA;AACA,QAAIC,WAAU;AACd,UAAM,SAAS,MAAM,KAAK,mBAAmBA,UAAS,UAAU;AAChE,IAAAA,WAAU,KAAK,0BAA0B;AAAA,MACvC,oBAAoBA;AAAA,MACpB,SAAS,OAAO;AAAA,MAChB,QAAQ,OAAO;AAAA,MACf;AAAA,IACF,CAAC;AACD,IAAAA,WAAU,MAAM,KAAK,KAAKA,UAAS,MAAM;AACzC,WAAOA;AAAA,EACT;AAAA;AAAA,EAGQ,0BAA0B;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,EAAE,UAAU,aAAa,QAAQ,UAAU;AAAA,EACvD,GAKG;AACD,UAAMA,WAAU,sBAAsB,kBAAkB;AAExD,QAAI,CAACW,WAAU,WAAW,GAAG;AAC3B,MAAAX,SAAQ,WAAW;AAAA,IACrB,WAAW,QAAQ,GAAG,WAAW,GAAG;AAClC,YAAM,IAAIF;AAAA,QACRC,YAAU;AAAA,QACV,cAAc,WAAW,kCAAkC,OAAO;AAAA,MACpE;AAAA,IACF;AAEA,QAAI,CAACY,WAAU,SAAS,GAAG;AACzB,MAAAX,SAAQ,SAAS;AAAA,IACnB,WAAW,OAAO,GAAG,SAAS,GAAG;AAC/B,YAAM,IAAIF;AAAA,QACRC,YAAU;AAAA,QACV,YAAY,SAAS,kCAAkC,MAAM;AAAA,MAC/D;AAAA,IACF;AAEA,WAAOC;AAAA,EACT;AAAA;AAAA,EAGQ,8BAA8B,OAAe,SAAiB;AACpE,QAAI,MAAM,UAAU,GAAG;AACrB,YAAM,IAAIF,YAAUC,YAAU,yBAAyB,0BAA0B;AAAA,IACnF;AAEA,QAAI,CAAC,MAAM,MAAM,CAAC,MAAM,EAAE,YAAY,OAAO,GAAG;AAC9C,YAAM,IAAID;AAAA,QACRC,YAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AqD1lCA,SAAS,mBAAmB;AAE5B,SAAS,WAAAa,iBAAe;;;ACHxB,SAAS,WAAAC,gBAAe;AACxB,SAAS,eAAAC,oBAAmB;AAC5B,SAAS,QAAAC,aAAY;AACrB,SAAS,eAAe;AAExB,SAAS,WAAAC,WAAS,UAAAC,SAAQ,YAAAC,kBAAgB;AAC1C,SAAS,iBAAiB;AAEnB,IAAM,SAAN,MAAM,QAAO;AAAA,EARpB,OAQoB;AAAA;AAAA;AAAA,EACT;AAAA,EAEA;AAAA,EAEA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT,YAAY,YAAuB;AAEjC,QAAI,OAAO,eAAe,UAAU;AAClC,UAAI,WAAW,MAAM,cAAc,KAAK,WAAW,WAAW,IAAI;AAEhE,qBAAa,KAAK,UAAU;AAAA,MAC9B;AAAA,IACF;AAGA,UAAM,kBAAkB,QAAQ,YAAY,EAAE;AAE9C,SAAK,aAAaC,UAAQ,eAAe;AAGzC,SAAK,YAAYA,UAAQ,UAAU,aAAa,iBAAiB,KAAK,EAAE,MAAM,CAAC,CAAC;AAChF,SAAK,sBAAsBA,UAAQ,UAAU,aAAa,iBAAiB,IAAI,CAAC;AAChF,SAAK,UAAU,IAAIC,SAAQ,KAAK,SAAS;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,KAAK,MAAiB;AACpB,UAAM,YAAY,UAAU,KAAKC,WAAS,IAAI,GAAGA,WAAS,KAAK,UAAU,CAAC;AAE1E,UAAM,IAAI,QAAQ,KAAK,UAAU,EAAE,SAAS,EAAE,CAAC,IAAI,EAAE;AACrD,UAAM,IAAI,QAAQ,KAAK,UAAU,EAAE,SAAS,EAAE,CAAC,IAAI,EAAE;AAGrD,MAAE,CAAC,MAAM,UAAU,YAAY,MAAM;AAErC,WAAOF,UAAQG,QAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,OAAkB;AACzB,UAAM,KAAK,UAAU,gBAAgB,QAAQD,WAAS,KAAK,mBAAmB,CAAC;AAC/E,UAAM,KAAK,UAAU,gBAAgB,QAAQA,WAAS,KAAK,CAAC;AAC5D,UAAM,SAAS,GAAG,IAAI,EAAE;AACxB,WAAO,KAAK,OAAO,MAAM,IAAI,CAAC;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,iBAAiB,MAAiB,WAA8B;AACrE,UAAM,qBAAqBA,WAAS,SAAS;AAC7C,UAAM,IAAI,mBAAmB,MAAM,GAAG,EAAE;AACxC,UAAM,IAAI,mBAAmB,MAAM,IAAI,EAAE;AACzC,UAAM,iBAAiB,EAAE,CAAC,IAAI,QAAS;AAGvC,MAAE,CAAC,KAAK;AAER,UAAM,MAAM,IAAI,UAAU,UAAU,OAAOF,UAAQ,CAAC,CAAC,GAAG,OAAOA,UAAQ,CAAC,CAAC,CAAC,EAAE;AAAA,MAC1E;AAAA,IACF;AAEA,UAAM,YAAY,IAAI,iBAAiBE,WAAS,IAAI,CAAC,EAAE,WAAW,KAAK,EAAE,MAAM,CAAC;AAChF,WAAOF,UAAQ,SAAS;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,eAAe,MAAiB,WAA+B;AACpE,WAAO,IAAIC,SAAQ,QAAO,iBAAiB,MAAM,SAAS,CAAC;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,mBAAmB,SAAqB;AAC7C,WAAO,UAAUG,MAAKD,QAAO,CAACE,aAAY,EAAE,GAAGH,WAAS,OAAO,CAAC,CAAC,CAAC,IAAIG,aAAY,EAAE;AAAA,EACtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,gBAAgB,WAAsB;AAC3C,UAAM,QAAQ,UAAU,gBAAgB,QAAQH,WAAS,SAAS,CAAC;AACnE,WAAOF,UAAQ,MAAM,WAAW,KAAK,EAAE,MAAM,CAAC,CAAC;AAAA,EACjD;AACF;;;ACpIA,SAAS,WAAAM,gBAAe;AACxB;AAAA,EACE;AAAA,EACA;AAAA,EACA,eAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,WAAAC,iBAAe;AA2BjB,IAAM,2BAA2B;AACjC,IAAM,uBAAuB;AAC7B,IAAM,uBAAuB;AAC7B,IAAM,mBAAmB;AACzB,IAAM,kBAAkB;AAMxB,IAAM,kBAAkB,wBAAC,cAAsB;AACpD,MAAI,MAAM,KAAK,SAAS,GAAG;AACzB,WAAO,UAAU,MAAM,CAAC;AAAA,EAC1B;AAEA,SAAO;AACT,GAN+B;AAQ/B,eAAsB,sBACpB,YACA,SACA,UACiB;AAEjB,QAAM,mBAAmB,iBAAiB,gBAAgB,UAAU,GAAG,KAAK;AAC5E,QAAM,eAAe,IAAIC,SAAQ,OAAO;AAExC,QAAM,OAAOC,aAAY,gBAAgB;AAEzC,QAAM,MAAM,OAAO;AAAA,IACjB,UAAU,iBAAiB,QAAQ;AAAA,IACnC;AAAA,IACA,OAAO;AAAA,IACP,GAAG,KAAK;AAAA,IACR,GAAG;AAAA,IACH,GAAG;AAAA,EACL,CAAC;AAGD,QAAM,KAAKA,aAAY,eAAe;AAEtC,QAAM,aAAa,MAAM,sBAAsB,kBAAkB,KAAK,EAAE;AAExE,QAAM,OAAO,WAAW,KAAK,CAAC,GAAG,IAAI,SAAS,IAAI,EAAE,GAAG,GAAG,UAAU,CAAC;AAGrE,QAAM,oBAAoB,UAAU,IAAI;AAExC,QAAM,MAAM,iBAAiB,mBAAmB,KAAK;AAGrD,QAAM,WAA2B;AAAA,IAC/B,IAAI,WAAW;AAAA,IACf,SAAS;AAAA,IACT,SAAS,gBAAgB,aAAa,YAAY,CAAC;AAAA,IACnD,QAAQ;AAAA,MACN,QAAQ;AAAA,MACR;AAAA,MACA,cAAc,EAAE,IAAI,iBAAiB,IAAI,KAAK,EAAE;AAAA,MAChD,YAAY,iBAAiB,YAAY,KAAK;AAAA,MAC9C,KAAK;AAAA,MACL,WAAW;AAAA,QACT,OAAO;AAAA,QACP,GAAG,KAAK;AAAA,QACR,GAAG;AAAA,QACH,GAAG;AAAA,QACH,MAAM,iBAAiB,MAAM,KAAK;AAAA,MACpC;AAAA,IACF;AAAA,EACF;AAEA,SAAO,KAAK,UAAU,QAAQ;AAChC;AAtDsB;AAwDtB,eAAsB,sBAAsB,YAAoB,UAAmC;AACjG,QAAM,iBAAiB,KAAK,MAAM,UAAU;AAG5C,QAAM;AAAA,IACJ,QAAQ;AAAA,MACN;AAAA,MACA;AAAA,MACA,cAAc,EAAE,GAAG;AAAA,MACnB,WAAW,EAAE,OAAO,GAAG,GAAG,GAAG,KAAK;AAAA,IACpC;AAAA,EACF,IAAI;AAEJ,QAAM,mBAAmB,iBAAiB,YAAY,KAAK;AAC3D,QAAM,WAAW,iBAAiB,IAAI,KAAK;AAC3C,QAAM,aAAa,iBAAiB,MAAM,KAAK;AAE/C,QAAM,iBAAiB,iBAAiB,QAAQ;AAEhD,QAAM,MAAM,OAAO;AAAA,IACjB,UAAU;AAAA,IACV,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAGD,QAAM,OAAO,WAAW,KAAK,CAAC,GAAG,IAAI,SAAS,IAAI,EAAE,GAAG,GAAG,gBAAgB,CAAC;AAE3E,QAAM,oBAAoB,UAAU,IAAI;AAExC,QAAM,UAAU,iBAAiB,mBAAmB,KAAK;AAEzD,MAAI,QAAQ,SAAS;AACnB,UAAM,IAAIC;AAAA,MACRC,YAAU;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAGA,QAAM,SAAS,MAAM,sBAAsB,kBAAkB,KAAK,QAAQ;AAE1E,QAAM,aAAaC,UAAQ,MAAM;AAEjC,SAAO;AACT;AAhDsB;;;AF3Ff,IAAM,qBAAN,cAAiC,QAAQ;AAAA,EAvBhD,OAuBgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAI9C,OAAO,cAAc;AAAA;AAAA;AAAA;AAAA,EAKrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,YAAuB,UAAqB;AACtD,UAAM,SAAS,IAAI,OAAO,UAAU;AACpC,UAAM,OAAO,SAAS,QAAQ;AAC9B,SAAK,SAAS,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAqB;AACvB,WAAO,KAAK,OAAO,EAAE;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,YAAoB;AACtB,WAAO,KAAK,OAAO,EAAE;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAe,YAAY,SAA2C;AACpE,UAAM,gBAAgB,MAAM,KAAK,OAAO,EAAE,KAAK,YAAY,OAAO,CAAC;AACnE,WAAOC,UAAQ,aAAa;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAe,gBAAgB,wBAAiE;AAC9F,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE,UAAM,UAAU,MAAM,KAAK,SAAS,WAAW;AAC/C,UAAM,oBAAoB,mBAAmB,iBAAiB,OAAO;AACrE,UAAM,YAAY,MAAM,KAAK,OAAO,EAAE,KAAK,iBAAiB;AAC5D,WAAOA,UAAQ,SAAS;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,sCACJ,wBACA;AACA,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE,UAAM,oBAAoB,MAAM,KAAK,gBAAgB,kBAAkB;AAEvE,uBAAmB,qBAAqB,KAAK,SAAS,iBAAiB;AAEvE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAe,gBACb,wBACA,EAAE,yBAAyB,OAAO,gBAAgB,IAA0B,CAAC,GAC/C;AAC9B,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE;AAAA,MACE,MAAM,KAAK,SAAS,eAAe;AAAA,MACnC;AAAA,MACA;AAAA,IACF;AACA,QAAI,wBAAwB;AAC1B,YAAM,KAAK,SAAS,uBAAuB,kBAAkB;AAAA,IAC/D;AACA,WAAO,KAAK,SAAS;AAAA,MACnB,MAAM,KAAK,sCAAsC,kBAAkB;AAAA,MACnE,EAAE,wBAAwB,OAAO,gBAAgB;AAAA,IACnD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAe,oBACb,wBACA,EAAE,yBAAyB,KAAK,IAA+B,CAAC,GAC3C;AACrB,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE,QAAI,wBAAwB;AAC1B,YAAM,KAAK,SAAS,uBAAuB,kBAAkB;AAAA,IAC/D;AACA,WAAO,KAAK,SAAS;AAAA,MACnB,MAAM,KAAK,sCAAsC,kBAAkB;AAAA,MACnE;AAAA,QACE,gBAAgB;AAAA,QAChB,wBAAwB;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,QAAQ,UAAmC;AAC/C,WAAO,sBAAsB,KAAK,YAAY,KAAK,SAAS,QAAQ;AAAA,EACtE;AACF;;;AGpKA,SAAS,eAAAC,cAAa,iBAAiB;AACvC,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,UAAAC,eAAc;AACvB,SAAS,MAAAC,MAAI,WAAAC,UAAS,aAAa;AAEnC,SAAS,YAAAC,YAAU,WAAAC,WAAS,UAAAC,SAAQ,aAAAC,YAAW,gBAAAC,eAAc,oBAAoB;;;ACLjF,SAAS,eAAAC,cAAa,QAAQ,mBAAmB;AACjD,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,UAAAC,eAAc;AAEvB,SAAS,YAAAC,YAAU,WAAAC,WAAS,UAAAC,SAAQ,WAAW,cAAc,mBAAmB;;;ACJzE,IAAM,UAAU;AAAA,EACrkBAAKC,cAAL;AACL,EAAAA,UAAA,aAAY;AADF,SAAAA;AAAA,GAAA;;;ACFZ,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,UAAAC,eAAc;AAEvB,SAAS,YAAAC,kBAAgB;AAMzB,SAAS,aAAa,MAAsB;AAC1C,UAAQ,KAAK,QAAQ;AACvB;AAFS;AAKT,SAAS,aAAa,MAAsB;AAC1C,UAAS,KAAK,QAAQ,KAAO,IAAI;AACnC;AAFS;AAIF,SAAS,SAAS,UAAyC;AAChE,MAAI,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAC5B,WAAO,SAAS,MAAM,KAAK;AAAA,EAC7B;AACA,SAAO;AACT;AALgB;AAOT,SAAS,UAAU,UAAkC;AAC1D,MAAI,MAAM,QAAQ,QAAQ,GAAG;AAC3B,WAAO,SAAS,KAAK,GAAG;AAAA,EAC1B;AACA,SAAO;AACT;AALgB;AAOT,SAAS,yBAAyB,SAAoC;AAC3E,QAAM,UAAyB,CAAC,CAAC;AAEjC,MAAI,gBAAgB;AACpB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AAC1C,QAAI,gBAAgB,GAAG;AACrB,cAAQ,QAAQ,SAAS,CAAC,MAAM;AAChC,cAAQ,QAAQ,SAAS,CAAC,KAAK,QAAQ,CAAC;AAExC,uBAAiB;AAAA,IAEnB,OAAO;AACL,cAAQ,QAAQ,SAAS,CAAC,MAAM;AAChC,cAAQ,QAAQ,SAAS,CAAC,KAAK,QAAQ,CAAC,KAAM,IAAI;AAGlD,cAAQ,KAAK,QAAQ,CAAC,IAAI,aAAa,IAAI,aAAa,CAAC;AAEzD,uBAAiB;AAAA,IACnB;AAAA,EACF;AAGA,QAAM,eAAe,QAAQ,SAAS;AACtC,QAAM,WAAWC,WAASC,QAAO,OAAO,CAAC,EAAE,CAAC,IAAI,aAAa,YAAY;AAGzE,UAAQ,QAAQ,SAAS,CAAC,MAAM;AAChC,UAAQ,QAAQ,SAAS,CAAC,KAAK,YAAa,IAAI;AAEhD,SAAO;AACT;AA/BgB;AAiCT,SAAS,uBAAuB,OAAsB,UAAoC;AAC/F,QAAM,OAAO,KAAK,KAAM,KAAK,MAAM,SAAU,CAAC;AAC9C,QAAM,UAAUD,WAAS,IAAI,WAAW,IAAI,CAAC;AAE7C,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAM,QAAQ,SAAS,QAAQ,MAAM,CAAC,EAAE,UAAU,MAAM,CAAC;AACzD,QAAI,UAAU,IAAI;AAChB,YAAM,IAAIE;AAAA,QACRC,YAAU;AAAA,QACV,+BAA+B,MAAM,CAAC,CAAC;AAAA,MACzC;AAAA,IACF;AAEA,aAAS,MAAM,GAAG,MAAM,IAAI,OAAO,GAAG;AACpC,UAAI,QAAS,KAAM,KAAK,KAAO;AAC7B,gBAAQ,UAAU,CAAC,KAAK,KAAM,IAAK,SAAS;AAAA,MAC9C;AACA,gBAAU;AAAA,IACZ;AAAA,EACF;AACA,QAAM,cAAe,KAAK,MAAM,SAAU;AAC1C,QAAM,eAAe,MAAM,SAAS;AACpC,QAAM,eAAe,aAAa,YAAY;AAC9C,QAAM,WAAWH,WAASC,QAAO,QAAQ,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI;AAE1E,MAAI,cAAc,QAAQ,QAAQ,SAAS,CAAC,IAAI,eAAe;AAC7D,UAAM,IAAIC;AAAA,MACRC,YAAU;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,SAAO,QAAQ,MAAM,GAAG,cAAc,CAAC;AACzC;AAlCgB;;;AHlDhB,IAAM,eAAe,YAAY,cAAc;AAE/C,IAAM,aAAa;AACnB,IAAM,aAAa;AACZ,IAAM,iBAAiB,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE;AAEjD,SAAS,eAAe,UAAyB;AAC/C,MAAI,SAAS,WAAW,MAAM;AAC5B,UAAM,IAAIC;AAAA,MACRC,YAAU;AAAA,MACV,8CAA8C,SAAS,MAAM;AAAA,IAC/D;AAAA,EACF;AACF;AAPS;AAST,SAAS,cAAc,SAAoB;AACzC,MAAI,QAAQ,SAAS,MAAM,KAAK,QAAQ,SAAS,MAAM,QAAQ,SAAS,IAAI;AAC1E,UAAM,IAAID;AAAA,MACRC,YAAU;AAAA,MACV,0EAA0E,QAAQ,MAAM;AAAA,IAC1F;AAAA,EACF;AACF;AAPS;AAST,SAAS,eAAe,OAAsB;AAC5C,MAAI,CAAC,eAAe,SAAS,MAAM,MAAM,GAAG;AAC1C,UAAM,WAAW,2CAA2C,eAAe;AAAA,MACzE;AAAA,IACF,CAAC,oBAAoB,MAAM,MAAM;AAEjC,UAAM,IAAID,YAAUC,YAAU,kBAAkB,QAAQ;AAAA,EAC1D;AACF;AARS;AAUT,IAAM,WAAN,MAAM,UAAS;AAAA,EAjDf,OAiDe;AAAA;AAAA;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,WAA0B,SAAS;AAC7C,SAAK,WAAW;AAEhB,mBAAe,KAAK,QAAQ;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,QAAwB;AACxC,WAAO,UAAS,kBAAkB,QAAQ,KAAK,QAAQ;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,SAAoB;AACpC,WAAO,UAAS,kBAAkB,SAAS,KAAK,QAAQ;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,kBAAkB,QAAwB,WAA0B,SAAiB;AAC1F,UAAM,QAAQ,SAAS,MAAM;AAE7B,mBAAe,KAAK;AAEpB,WAAOC,UAAQ,uBAAuB,OAAO,QAAQ,CAAC;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB,SAAoB,WAA0B,SAAiB;AACtF,UAAM,eAAeC,WAAS,OAAO;AAErC,mBAAe,QAAQ;AACvB,kBAAc,YAAY;AAE1B,WAAO,yBAAyB,YAAY,EACzC,IAAI,CAAC,MAAM,SAAS,CAAC,CAAC,EACtB,KAAK,GAAG;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,eAAe,QAAwB,aAAwB,IAAI;AACxE,mBAAe,SAAS,MAAM,CAAC;AAE/B,UAAM,cAAc,YAAY,UAAU,MAAM,CAAC;AACjD,UAAM,OAAO,YAAY,WAAW,UAAU,EAAE;AAEhD,WAAO,OAAO,aAAa,MAAM,MAAM,IAAI,QAAQ;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,qBAAqB,QAAwB,aAAwB,IAAI;AAC9E,UAAM,OAAO,UAAS,eAAe,QAAQ,UAAU;AACvD,WAAO,UAAS,mBAAmB,IAAI;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,gBAAgB,QAAgB;AACrC,UAAM,QAAQ,SAAS,MAAM;AAE7B,QAAI,IAAY;AAEhB,QAAI;AACF,qBAAe,KAAK;AAAA,IACtB,QAAQ;AACN,aAAO;AAAA,IACT;AAEA,WAAO,IAAI,MAAM,QAAQ;AACvB,UAAI,UAAS,aAAa,MAAM,CAAC,CAAC,MAAM,OAAO;AAC7C,eAAO;AAAA,MACT;AACA,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,aAAa,QAAyB;AAC3C,UAAM,QAAQ;AACd,QAAI,OAAe;AACnB,QAAI,QAAgB,MAAM,SAAS;AAEnC,WAAO,QAAQ,OAAO;AACpB,YAAM,MAAc,KAAK,OAAO,OAAO,SAAS,CAAC;AAEjD,UAAI,MAAM,GAAG,MAAM,QAAQ;AACzB,eAAO;AAAA,MACT;AACA,UAAI,SAAS,MAAM,GAAG,GAAG;AACvB,gBAAQ,MAAM;AAAA,MAChB,OAAO;AACL,eAAO,MAAM;AAAA,MACf;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,mBAAmB,MAA0B;AAClD,UAAM,YAAYA,WAAS,IAAI;AAE/B,QAAI,UAAU,SAAS,MAAM,UAAU,SAAS,IAAI;AAClD,YAAM,IAAIH;AAAA,QACRC,YAAU;AAAA,QACV,+DAA+D,UAAU,MAAM;AAAA,MACjF;AAAA,IACF;AAEA,WAAOE,WAAS,YAAY,UAAU,cAAc,SAAS,CAAC;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,kBAAkB,MAAc,UAAmB,OAAe;AACvE,UAAM,YAAY,UAAS,mBAAmB,IAAI;AAClD,UAAM,SAASA,WAAS,UAAU,aAAa,UAAU;AACzD,UAAM,QAAQ;AACd,UAAM,cAAc;AACpB,UAAM,QAAQ;AAEd,UAAM,YAAY,UAAU,MAAM,EAAE;AAEpC,UAAM,aAAa,UAAU,MAAM,GAAG,EAAE;AACxC,UAAM,cAAcC,QAAO;AAAA,MACzB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACAA,QAAO,CAAC,QAAQ,UAAU,CAAC;AAAA,IAC7B,CAAC;AACD,UAAM,WAAW,UAAUC,QAAOA,QAAO,WAAW,CAAC,GAAG,GAAG,CAAC;AAE5D,WAAO,aAAaD,QAAO,CAAC,aAAa,QAAQ,CAAC,CAAC;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,OAAO,SAAS,OAAe,IAAI,eAA0B,IAAI;AAC/D,UAAM,UAAU,eACZC,QAAOD,QAAO,CAACE,aAAY,IAAI,GAAGH,WAAS,YAAY,CAAC,CAAC,CAAC,IAC1DG,aAAY,IAAI;AACpB,WAAO,UAAS,kBAAkB,OAAO;AAAA,EAC3C;AACF;AAEA,IAAO,mBAAQ;;;AD/Of,IAAM,iBAAiB;AAGvB,IAAMC,cAAaC,UAAQ,YAAY;AACvC,IAAM,aAAaA,UAAQ,YAAY;AACvC,IAAMC,cAAaD,UAAQ,YAAY;AACvC,IAAM,aAAaA,UAAQ,YAAY;AAEvC,SAAS,YAAY,MAA0B;AAC7C,SAAOE,cAAaC,QAAO,CAAC,MAAMC,WAAUC,QAAOA,QAAO,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3E;AAFS;AAIT,SAAS,qBAAqB,WAAoB,OAAO,UAAmB,OAAO;AACjF,MAAI,UAAU;AACZ,WAAO,UAAU,aAAa;AAAA,EAChC;AACA,SAAO,UAAUJ,cAAaF;AAChC;AALS;AAOT,SAAS,oBAAoB,aAAyB;AACpD,SAAO,CAAC,YAAY,UAAU,EAAE,SAASC,UAAQ,YAAY,MAAM,GAAG,CAAC,CAAC,CAAC;AAC3E;AAFS;AAIT,SAAS,mBAAmB,aAAyB;AACnD,SAAO,CAACD,aAAYE,aAAY,YAAY,UAAU,EAAE;AAAA,IACtDD,UAAQ,YAAY,MAAM,GAAG,CAAC,CAAC;AAAA,EACjC;AACF;AAJS;AAMT,SAAS,UAAU,MAAc,QAAgB,GAAG;AAClD,QAAM,aAAa,KAAK,MAAM,GAAG;AAEjC,MAAI,WAAW,WAAW,KAAM,WAAW,CAAC,MAAM,OAAO,UAAU,GAAI;AACrE,UAAM,IAAIM,YAAUC,YAAU,iBAAiB,kBAAkB,IAAI,EAAE;AAAA,EACzE;AAEA,MAAI,WAAW,CAAC,MAAM,KAAK;AACzB,eAAW,MAAM;AAAA,EACnB;AAEA,SAAO,WAAW;AAAA,IAAI,CAAC,MACrB,CAAC,EAAE,QAAQ,GAAG,IAAI,SAAS,GAAG,EAAE,IAAI,iBAAiB,SAAS,GAAG,EAAE;AAAA,EACrE;AACF;AAdS;AAyBT,IAAM,WAAN,MAAM,UAAS;AAAA,EAjEf,OAiEe;AAAA;AAAA;AAAA,EACb,QAAgB;AAAA,EAChB,QAAgB;AAAA,EAChB,cAAsBP,UAAQ,YAAY;AAAA,EAC1C,oBAA4BA,UAAQ,YAAY;AAAA,EAChD;AAAA,EACA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,QAAwB;AAGlC,QAAI,OAAO,YAAY;AACrB,YAAM,SAAS,IAAI,OAAO,OAAO,UAAU;AAC3C,WAAK,YAAYA,UAAQ,OAAO,mBAAmB;AACnD,WAAK,aAAaA,UAAQ,OAAO,UAAU;AAAA,IAC7C,OAAO;AACL,UAAI,CAAC,OAAO,WAAW;AACrB,cAAM,IAAIM;AAAA,UACRC,YAAU;AAAA,UACV;AAAA,QACF;AAAA,MACF;AACA,WAAK,YAAYP,UAAQ,OAAO,SAAS;AAAA,IAC3C;AAEA,SAAK,oBAAoB,OAAO,qBAAqB,KAAK;AAC1D,SAAK,cAAcI,WAAU,UAAUC,QAAO,KAAK,SAAS,CAAC,GAAG,GAAG,CAAC;AACpE,SAAK,QAAQ,OAAO,SAAS,KAAK;AAClC,SAAK,QAAQ,OAAO,SAAS,KAAK;AAClC,SAAK,YAAY,OAAO;AAAA,EAC1B;AAAA,EAEA,IAAI,cAAc;AAChB,WAAO,KAAK,cAAc;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,OAAe;AACzB,UAAM,aAAa,KAAK,cAAcG,WAAS,KAAK,UAAU;AAC9D,UAAM,YAAYA,WAAS,KAAK,SAAS;AACzC,UAAM,YAAYA,WAAS,KAAK,SAAS;AACzC,UAAM,OAAO,IAAI,WAAW,EAAE;AAE9B,QAAI,QAAQ,gBAAgB;AAC1B,UAAI,CAAC,YAAY;AACf,cAAM,IAAIF;AAAA,UACRC,YAAU;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAGA,WAAK,IAAI,YAAY,CAAC;AAAA,IACxB,OAAO;AACL,WAAK,IAAIC,WAAS,KAAK,SAAS,CAAC;AAAA,IACnC;AAGA,SAAK,IAAIC,SAAQ,OAAO,CAAC,GAAG,EAAE;AAE9B,UAAM,QAAQD,WAASE,aAAY,UAAU,WAAW,IAAI,CAAC;AAC7D,UAAM,KAAK,MAAM,MAAM,GAAG,EAAE;AAC5B,UAAM,KAAK,MAAM,MAAM,EAAE;AAEzB,QAAI,YAAY;AACd,YAAM,IAAI;AAEV,YAAM,KAAKC,KAAG,EAAE,EAAE,IAAI,UAAU,EAAE,IAAI,CAAC,EAAE,QAAQ,EAAE;AAEnD,aAAO,IAAI,UAAS;AAAA,QAClB,YAAY;AAAA,QACZ,WAAW;AAAA,QACX;AAAA,QACA,OAAO,KAAK,QAAQ;AAAA,QACpB,mBAAmB,KAAK;AAAA,MAC1B,CAAC;AAAA,IACH;AAEA,UAAM,SAAS,IAAI,OAAOX,UAAQ,EAAE,CAAC;AACrC,UAAM,KAAK,OAAO,SAAS,SAAS;AAEpC,WAAO,IAAI,UAAS;AAAA,MAClB,WAAW;AAAA,MACX,WAAW;AAAA,MACX;AAAA,MACA,OAAO,KAAK,QAAQ;AAAA,MACpB,mBAAmB,KAAK;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,MAAc;AACvB,UAAM,QAAQ,UAAU,MAAM,KAAK,KAAK;AAExC,WAAO,MAAM,OAAO,CAAC,UAAU,UAAU,SAAS,YAAY,KAAK,GAAa,IAAI;AAAA,EACtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,WAAoB,OAAO,UAAmB,OAAe;AACzE,QAAI,KAAK,SAAS,KAAK;AACrB,YAAM,IAAIM;AAAA,QACRC,YAAU;AAAA,QACV,6CAA6C,KAAK,KAAK;AAAA,MACzD;AAAA,IACF;AACA,UAAM,SAAS,qBAAqB,KAAK,cAAc,QAAQ,UAAU,OAAO;AAChF,UAAM,QAAQP,UAAQ,WAAW,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;AACnD,UAAM,oBAAoB,KAAK;AAC/B,UAAM,QAAQ,MAAM,KAAK,OAAO,CAAC;AAEjC,UAAM,YAAY,KAAK;AAEvB,UAAM,MACJ,KAAK,cAAc,QAAQ,CAAC,WAAWG,QAAO,CAAC,QAAQ,KAAK,UAAU,CAAC,IAAI,KAAK;AAClF,UAAM,cAAcK,WAASL,QAAO,CAAC,QAAQ,OAAO,mBAAmB,OAAO,WAAW,GAAG,CAAC,CAAC;AAE9F,WAAO,YAAY,WAAW;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,MAAc;AAC5B,UAAM,YAAY,iBAAS,mBAAmB,IAAI;AAElD,WAAO,IAAI,UAAS;AAAA,MAClB,WAAWK,WAAS,UAAU,MAAM,EAAE,CAAC;AAAA,MACvC,YAAYA,WAAS,UAAU,MAAM,GAAG,EAAE,CAAC;AAAA,IAC7C,CAAC;AAAA,EACH;AAAA,EAEA,OAAO,gBAAgB,aAAqB;AAC1C,UAAM,UAAUR,UAAQS,SAAQ,aAAa,WAAW,CAAC,CAAC;AAC1D,UAAM,QAAQD,WAAS,OAAO;AAC9B,UAAM,gBAAgB,YAAY,MAAM,MAAM,GAAG,EAAE,CAAC,MAAM;AAE1D,QAAI,MAAM,WAAW,MAAM,CAAC,mBAAmB,KAAK,GAAG;AACrD,YAAM,IAAIF,YAAUC,YAAU,iBAAiB,2CAA2C;AAAA,IAC5F;AACA,QAAI,CAAC,eAAe;AAClB,YAAM,IAAID,YAAUC,YAAU,iBAAiB,uCAAuC;AAAA,IACxF;AAEA,UAAM,QAAQ,MAAM,CAAC;AACrB,UAAM,oBAAoBP,UAAQ,MAAM,MAAM,GAAG,CAAC,CAAC;AACnD,UAAM,QAAQ,SAASA,UAAQ,MAAM,MAAM,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC,GAAG,EAAE;AACnE,UAAM,YAAYA,UAAQ,MAAM,MAAM,IAAI,EAAE,CAAC;AAC7C,UAAM,MAAM,MAAM,MAAM,IAAI,EAAE;AAE9B,QAAK,UAAU,KAAK,sBAAsB,gBAAkB,UAAU,KAAK,UAAU,GAAI;AACvF,YAAM,IAAIM;AAAA,QACRC,YAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAEA,QAAI,oBAAoB,KAAK,GAAG;AAC9B,UAAI,IAAI,CAAC,MAAM,GAAG;AAChB,cAAM,IAAID,YAAUC,YAAU,iBAAiB,8BAA8B;AAAA,MAC/E;AAEA,aAAO,IAAI,UAAS;AAAA,QAClB,WAAW;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAEA,QAAI,IAAI,CAAC,MAAM,GAAG;AAChB,YAAM,IAAID,YAAUC,YAAU,iBAAiB,+BAA+B;AAAA,IAChF;AAEA,WAAO,IAAI,UAAS;AAAA,MAClB,YAAY,IAAI,MAAM,CAAC;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEA,IAAO,mBAAQ;;;AK1PR,IAAM,eAAN,cAA2B,QAAQ;AAAA,EAzB1C,OAyB0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxC,OAAO,YAAuC;AAE5C,WAAO,IAAI,eAAe,YAAY,KAAK,SAAS;AAAA,EACtD;AACF;AAKO,IAAM,iBAAN,MAAM,wBAAuB,mBAAmB;AAAA,EAzCvD,OAyCuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMrD,OAAqB;AACnB,SAAK,SAAS,MAAM,IAAI,OAAO,MAAM;AACrC,WAAO,IAAI,aAAa,KAAK,SAAS,KAAK,SAAS;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,iBAAmD;AACjE,UAAM,aAAa,OAAO,mBAAmB,iBAAiB,OAAO;AAErE,WAAO,IAAI,gBAAe,YAAY,iBAAiB,QAAQ;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,SAAS,MAAc,MAAe,UAAqC;AAChF,UAAM,WAAW,iBAAS,SAAS,IAAI;AACvC,UAAM,cAAc,SAAS,WAAW,QAAQ,gBAAe,WAAW;AAE1E,WAAO,IAAI,gBAAuB,YAAY,YAAY,QAAQ;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,aACL,UACA,MACA,YACA,UACgB;AAChB,UAAM,OAAO,iBAAS,eAAe,UAAU,UAAU;AACzD,UAAM,WAAW,iBAAS,SAAS,IAAI;AACvC,UAAM,cAAc,SAAS,WAAW,QAAQ,gBAAe,WAAW;AAE1E,WAAO,IAAI,gBAAuB,YAAY,YAAY,QAAQ;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,gBAAgB,aAAqB,UAAqC;AAC/E,UAAM,WAAW,iBAAS,gBAAgB,WAAW;AAErD,WAAO,IAAI,gBAAuB,SAAS,YAAY,QAAQ;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,kBACX,YACA,UACA,UACyB;AACzB,UAAM,aAAa,MAAM,sBAAsB,YAAY,QAAQ;AAEnE,WAAO,IAAI,gBAAe,YAAY,QAAQ;AAAA,EAChD;AACF;;;ACzHO,IAAM,SAAN,MAAa;AAAA,EAVpB,OAUoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQlB,OAAO,YAAY,SAA2B,UAAmC;AAC/E,WAAO,IAAI,aAAa,SAAS,QAAQ;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,eAAe,YAAuB,UAAqB;AAChE,WAAO,IAAI,eAAe,YAAY,QAAQ;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUjC,OAAO,WAAW,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWjC,OAAO,eAAe,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrC,OAAO,kBAAkB,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUxC,OAAO,oBAAoB,eAAe;AAC5C;;;AC/EA,SAAS,WAAAK,gBAAe;AAExB,SAAS,SAAS,eAAe;AACjC,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,oBAAoB;;;ACHtB,IAAM,gBAAN,MAA+C;AAAA,EAFtD,OAEsD;AAAA;AAAA;AAAA,EACpD,UAAU,oBAAI,IAAqB;AAAA,EAEnC,MAAM,QAAW,KAAgC;AAC/C,UAAM,OAAO,MAAM,KAAK,QAAQ,IAAI,GAAG;AACvC,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,QAAQ,KAAa,OAAe;AACxC,UAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAAA,EACnC;AAAA,EAEA,MAAM,WAAW,KAAa;AAC5B,UAAM,KAAK,QAAQ,OAAO,GAAG;AAAA,EAC/B;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,KAAK,QAAQ,MAAM;AAAA,EAC3B;AACF;;;ACpBA,SAAS,WAAAC,gBAAe;AACxB,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAa9B,IAAM,gBAAN,MAA2D;AAAA,EAflE,OAekE;AAAA;AAAA;AAAA,EAChE,OAAgB,OAAO;AAAA,EACd;AAAA,EAET,UAAU;AAAA,EACV,WAAmB,qBAAqB,KAAK,OAAO;AAAA,EACpD,mBAA2B;AAAA,EAE3B,YAAY,SAA+B;AACzC,SAAK,UAAU,QAAQ,UAAU,iBAAS,SAAS;AACnD,SAAK,WAAW,QAAQ,YAAY,KAAK;AAEzC,SAAK,mBAAmB,QAAQ,oBAAoB;AAAA,EACtD;AAAA,EAEA,cAAc,OAAe;AAC3B,QAAI,KAAK,SAAS,SAAS,KAAK,OAAO,GAAG;AACxC,aAAO,KAAK,SAAS,QAAQ,KAAK,SAAS,OAAO,KAAK,CAAC;AAAA,IAC1D;AACA,WAAO,GAAG,KAAK,QAAQ,IAAI,KAAK;AAAA,EAClC;AAAA,EAEA,YAAkC;AAChC,WAAO;AAAA,MACL,QAAQ,KAAK;AAAA,MACb,UAAU,KAAK;AAAA,MACf,kBAAkB,KAAK;AAAA,IACzB;AAAA,EACF;AAAA,EAEA,cAAc;AACZ,UAAM,WAAW,CAAC;AAClB,QAAI,mBAAmB;AAGvB,OAAG;AACD,YAAM,SAAS,OAAO,aAAa,KAAK,SAAS,KAAK,cAAc,gBAAgB,CAAC;AACrF,eAAS,KAAK;AAAA,QACZ,WAAW,OAAO;AAAA,QAClB,SAAS,OAAO;AAAA,MAClB,CAAC;AACD,0BAAoB;AAAA,IACtB,SAAS,mBAAmB,KAAK;AAEjC,WAAO;AAAA,EACT;AAAA,EAEA,aAAa;AACX,SAAK,oBAAoB;AACzB,UAAM,SAAS,OAAO,aAAa,KAAK,SAAS,KAAK,cAAc,KAAK,mBAAmB,CAAC,CAAC;AAE9F,WAAO;AAAA,MACL,WAAW,OAAO;AAAA,MAClB,SAAS,OAAO;AAAA,IAClB;AAAA,EACF;AAAA,EAEA,cAAc,SAA+B;AAC3C,QAAI,mBAAmB;AACvB,UAAM,eAAe,IAAIC,SAAQ,OAAO;AAExC,OAAG;AACD,YAAM,SAAS,OAAO,aAAa,KAAK,SAAS,KAAK,cAAc,gBAAgB,CAAC;AACrF,UAAI,OAAO,QAAQ,OAAO,YAAY,GAAG;AACvC,eAAO,OAAO;AAAA,MAChB;AACA,0BAAoB;AAAA,IACtB,SAAS,mBAAmB,KAAK;AAEjC,UAAM,IAAIC;AAAA,MACRC,YAAU;AAAA,MACV,yBAAyB,OAAO;AAAA,IAClC;AAAA,EACF;AAAA,EAEA,UAAU,SAAuC;AAC/C,UAAM,aAAa,KAAK,cAAc,OAAO;AAC7C,WAAO,OAAO,eAAe,UAAU;AAAA,EACzC;AACF;;;AC7FA,SAAS,WAAAC,gBAAe;AACxB,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAW9B,IAAM,kBAAN,MAAuD;AAAA,EAb9D,OAa8D;AAAA;AAAA;AAAA,EAC5D,OAAgB,OAAO;AAAA,EAEvB,eAA8B,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/B,YAAY,UAA0B,CAAC,GAAG;AACxC,QAAI,QAAQ,QAAQ;AAClB,WAAK,eAAe,CAAC,QAAQ,MAAM;AAAA,IACrC,OAAO;AACL,WAAK,eAAe,QAAQ,YAAY,CAAC,OAAO,SAAS,EAAE,UAAU;AAAA,IACvE;AAAA,EACF;AAAA,EAEA,YAA4B;AAC1B,WAAO;AAAA,MACL,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA,EAEA,iBAAiB,YAAoB;AACnC,UAAM,SAAS,OAAO,eAAe,UAAU;AAC/C,WAAO;AAAA,MACL,SAAS,OAAO;AAAA,MAChB,WAAW,OAAO;AAAA,IACpB;AAAA,EACF;AAAA,EAEA,cAAsC;AACpC,WAAO,KAAK,aAAa,IAAI,CAAC,OAAO,KAAK,iBAAiB,EAAE,CAAC;AAAA,EAChE;AAAA,EAEA,aAAa;AACX,UAAM,SAAS,OAAO,SAAS;AAE/B,SAAK,aAAa,KAAK,OAAO,UAAU;AAExC,WAAO,KAAK,iBAAiB,OAAO,UAAU;AAAA,EAChD;AAAA,EAEA,cAAc,SAA+B;AAC3C,UAAM,eAAe,IAAIC,SAAQ,OAAO;AACxC,UAAM,aAAa,KAAK,aAAa;AAAA,MAAK,CAAC,OACzC,OAAO,eAAe,EAAE,EAAE,QAAQ,OAAO,YAAY;AAAA,IACvD;AAEA,QAAI,CAAC,YAAY;AACf,YAAM,IAAIC;AAAA,QACRC,YAAU;AAAA,QACV,qCAAqC,OAAO;AAAA,MAC9C;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,UAAU,SAA2C;AACnD,UAAM,aAAa,KAAK,cAAc,OAAO;AAC7C,WAAO,OAAO,eAAe,UAAU;AAAA,EACzC;AACF;;;AHtDA,IAAM,iBAAiB;AAAA,EACrB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,iBAAiB;AAAA,EACjB,qBAAqB;AAAA,EACrB,sBAAsB;AACxB;AAKA,SAAS,OAAO,WAAoB,SAAoC;AACtE,MAAI,CAAC,WAAW;AACd,UAAM,IAAIC,YAAUC,YAAU,sBAAsB,OAAO;AAAA,EAC7D;AACF;AAJS;AAYF,IAAM,gBAAN,MAAM,uBAAsB,aAAa;AAAA,EA7ChD,OA6CgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAU9C,OAAO,SAAS,CAAC,eAAe,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMtC,UAA2B,IAAI,cAAc;AAAA;AAAA,EAE7C,cAAsB;AAAA;AAAA,EAG/B,UAAuB,CAAC;AAAA,EACxB,cAAc;AAAA,EACd,YAAqB;AAAA,EAErB,YAAY,SAAgC;AAC1C,UAAM;AACN,SAAK,UAAU,SAAS,WAAW,KAAK;AAAA,EAC1C;AAAA,EAEA,IAAI,WAAoB;AACtB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAA6B,SAA6C;AACxE,WAAO,CAAC,KAAK,WAAW,eAAe,mBAAmB;AAC1D,UAAM,aAAa,KAAK,QAAQ,KAAK,CAAC,GAAG,QAAQ,QAAQ,OAAO;AAChE,WAAO,YAAY,eAAe,eAAe;AACjD,WAAO,WAAW,MAAM,UAAU;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,YAAsE;AACpE,WAAO,KAAK,QAAQ,IAAI,CAAC,GAAG,SAAS;AAAA,MACnC,OAAO,EAAE;AAAA,MACT,MAAM,EAAE;AAAA,MACR,SAAS;AAAA,IACX,EAAE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,cAA2C;AAEzC,WAAO,KAAK,QAAQ;AAAA,MAA8B,CAAC,YAAY,YAC7D,WAAW,MAAM,YAAY,EAAE,IAAI,CAAC,aAAa,EAAE,GAAG,SAAS,QAAQ,EAAE;AAAA,IAC3E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,SAAuC;AAC/C,UAAM,eAAe,IAAIC,SAAQ,OAAO;AACxC,UAAM,aAAa,KAAK,QAAQ;AAAA,MAAK,CAAC,OACpC,GAAG,MAAM,YAAY,EAAE,KAAK,CAAC,MAAM,EAAE,QAAQ,OAAO,YAAY,CAAC;AAAA,IACnE;AACA,WAAO,YAAY,eAAe,iBAAiB;AAEnD,WAAO,WAAW,MAAM,UAAU,YAAY;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,SAAuB;AACtC,UAAM,eAAe,IAAIA,SAAQ,OAAO;AACxC,WAAO,CAAC,KAAK,WAAW,eAAe,mBAAmB;AAC1D,UAAM,aAAa,KAAK,QAAQ;AAAA,MAAK,CAAC,OACpC,GAAG,MAAM,YAAY,EAAE,KAAK,CAAC,MAAM,EAAE,QAAQ,OAAO,YAAY,CAAC;AAAA,IACnE;AACA,WAAO,YAAY,eAAe,iBAAiB;AAEnD,WAAO,WAAW,MAAM,cAAc,YAAY;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,WAAW,SAA+B;AAE9C,UAAM,KAAK,UAAU;AAErB,UAAM,aAAa,KAAK,QAAQ,SAAS,WAAW,CAAC;AACrD,UAAM,OAAO,YAAY,eAAe,eAAe;AAEvD,UAAM,UAAU,WAAW,MAAM,WAAW;AAE5C,UAAM,KAAK,UAAU;AAErB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAY,OAAe;AAC/B,SAAK,QAAQ,OAAO,OAAO,CAAC;AAC5B,UAAM,KAAK,UAAU;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,SAAS,aAA0B;AAEvC,UAAM,KAAK,UAAU;AAErB,UAAMC,SAAQ,KAAK,cAAc,YAAY,IAAI;AAEjD,UAAM,QAAQ,IAAIA,OAAM,WAAW;AAEnC,SAAK,UAAU,KAAK,QAAQ,OAAO;AAAA,MACjC,OAAO,YAAY;AAAA,MACnB,MAAM,YAAY;AAAA,MAClB;AAAA,IACF,CAAC;AAED,UAAM,KAAK,UAAU;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO;AACL,SAAK,YAAY;AAEjB,SAAK,UAAU,CAAC;AAEhB,SAAK,cAAc;AAEnB,SAAK,KAAK,MAAM;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,OAAO,YAAoB;AAE/B,SAAK,cAAc;AAEnB,SAAK,YAAY;AAEjB,QAAI;AAEF,YAAM,KAAK,UAAU;AAErB,WAAK,KAAK,QAAQ;AAAA,IACpB,SAAS,KAAK;AAEZ,YAAM,KAAK,KAAK;AAEhB,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,SAAiB,SAAiB;AACvD,UAAM,WAAW,KAAK;AAEtB,UAAM,KAAK,OAAO,OAAO;AAEzB,SAAK,cAAc;AAEnB,UAAM,KAAK,UAAU;AAErB,UAAM,KAAK,UAAU;AAErB,QAAI,UAAU;AACZ,YAAM,KAAK,KAAK;AAAA,IAClB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY;AAChB,UAAM,OAAO,CAAC,KAAK,WAAW,eAAe,mBAAmB;AAEhE,UAAM,OAAO,MAAM,KAAK,QAAQ,QAAQ,KAAK,WAAW;AACxD,QAAI,MAAM;AACR,YAAM,QAAQ,MAAM,QAA4B,KAAK,aAAuB,KAAK,MAAM,IAAI,CAAC;AAC5F,WAAK,UAAU,KAAK,mBAAmB,MAAM,MAAM;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,YAAY;AACxB,UAAM,OAAO,CAAC,KAAK,WAAW,eAAe,mBAAmB;AAEhE,UAAM,gBAAgB,MAAM,QAAQ,KAAK,aAAa;AAAA,MACpD,QAAQ,KAAK,iBAAiB,KAAK,OAAO;AAAA,IAC5C,CAAC;AACD,UAAM,KAAK,QAAQ,QAAQ,KAAK,aAAa,KAAK,UAAU,aAAa,CAAC;AAC1E,SAAK,KAAK,QAAQ;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,QAAqB;AACpC,WAAO,OAAO,IAAI,CAAC,EAAE,OAAO,MAAM,MAAM,OAAO;AAAA,MAC7C;AAAA,MACA;AAAA,MACA,MAAM,MAAM,UAAU;AAAA,IACxB,EAAE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB,QAAqB;AACtC,WAAO,OAAO,IAAI,CAAC,EAAE,OAAO,MAAM,MAAM,YAAY,MAAM;AACxD,YAAM,aAAa,KAAK,cAAc,IAAI;AAC1C,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA,OAAO,IAAI,WAAwB,WAAW;AAAA,MAChD;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKQ,cAAc,MAAc;AAClC,UAAM,aAAa,eAAc,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,IAAI;AAEnE,WAAO,YAAY,eAAe,kBAAkB;AAEpD,WAAO;AAAA,EACT;AACF;;;AIjTA,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AA+B9B,IAAe,QAAf,MAAqD;AAAA,EAjC5D,OAiC4D;AAAA;AAAA;AAAA,EAC1D,OAAgB;AAAA,EAEhB,YAAY,UAAoB;AAC9B,UAAM,IAAIC,YAAUC,YAAU,iBAAiB,kBAAkB;AAAA,EACnE;AAAA,EAEA,YAAsB;AACpB,UAAM,IAAID,YAAUC,YAAU,iBAAiB,kBAAkB;AAAA,EACnE;AAAA,EAEA,cAAsC;AACpC,UAAM,IAAID,YAAUC,YAAU,iBAAiB,kBAAkB;AAAA,EACnE;AAAA,EAEA,aAAmC;AACjC,UAAM,IAAID,YAAUC,YAAU,iBAAiB,kBAAkB;AAAA,EACnE;AAAA,EAEA,cAAc,UAA2B;AACvC,UAAM,IAAID,YAAUC,YAAU,iBAAiB,kBAAkB;AAAA,EACnE;AAAA,EAEA,UAAU,UAAmC;AAC3C,UAAM,IAAID,YAAUC,YAAU,iBAAiB,kBAAkB;AAAA,EACnE;AACF;AAEO,IAAe,kBAAf,MAA+B;AAAA,EA7DtC,OA6DsC;AAAA;AAAA;AAKtC;;;ACjEA,SAAS,aAAAC,kBAAiB;AAC1B,SAAS,WAAAC,iBAAe;AACxB,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AAErC,SAAS,YAAAC,YAAU,WAAAC,iBAAe;;;ACJlC,SAAS,aAAAC,aAAW,aAAAC,mBAAiB;AACrC,SAAS,YAAAC,kBAAgB;;;ACFzB,SAAS,kBAAAC,uBAAsB;AAC/B,SAAS,UAAAC,eAAc;AACvB,SAAS,UAAAC,eAAc;AACvB,YAAYC,UAAS;AAErB,IAAM,eAAe;AACrB,IAAM,iCAAiC;AACvC,IAAM,2BAA2B;AACjC,IAAM,kBAAkB;AACxB,IAAMC,aAAY;AAEX,IAAM,oBAAoB;AAC1B,IAAM,4BAA4B;AAQlC,SAAS,sBAAsB,UAA8B;AAClE,QAAM,CAAC,MAAM,IAAI,IAAIC,gBAAe,KAAK,EAAE,OAAO,UAAU,iBAAiB;AAC7E,SAAO,OAAO,SAAS;AACzB;AAHgB;AAWT,SAAS,8BAA8B,UAA8B;AAC1E,QAAM,CAAC,MAAM,IAAI,IAAIA,gBAAe,KAAK,EAAE,OAAO,UAAU,yBAAyB;AACrF,SAAO,OAAO,SAAS;AACzB;AAHgB;AAeT,SAAS,cAAc,UAA8B;AAC1D,QAAM,qBAAqB,8BAA8B,QAAQ;AACjE,QAAM,qCAAqC,SAAS,MAAM,GAAG,kBAAkB;AAE/E,SAAOC,QAAO,kCAAkC;AAClD;AALgB;AAeT,SAAS,gBAAgB,UAA8B;AAC5D,QAAM,aAAa,sBAAsB,QAAQ;AACjD,QAAM,6BAA6B,SAAS,MAAM,GAAG,UAAU;AAE/D,SAAOA,QAAO,0BAA0B;AAC1C;AALgB;AAOT,SAAS,qCACd,gBACA,QACA;AAOA,QAAM,EAAE,OAAO,YAAY,IAAIC;AAE/B,QAAM,SAAS,MAAM,GAAG,EAAE,MAAM;AAChC,QAAM,SAAS,MAAM,GAAG,EAAE,MAAM;AAChC,QAAM,SAAS,MAAM,GAAG,EAAE,MAAM;AAEhC,QAAM,kBAAkB,wBAACC,uBAA8B;AAAA;AAAA;AAAA,IAGjD,WAAM,gCAAgC,MAAM;AAAA;AAAA,IAE5C;AAAA,MACF;AAAA,MACA;AAAA,MACAA,qBAAoB,YAAY,KAAK;AAAA,IACvC;AAAA;AAAA;AAAA,IAGI,WAAM,0BAA0B,MAAM;AAAA;AAAA,IAEtC,UAAK,iBAAiB,8BAA8B;AAAA;AAAA,IAEpD,SAAI,gCAAgC,GAAG,iBAAiB,CAAC;AAAA;AAAA,IAEzD,UAAK,gCAAgC,gCAAgC,YAAY;AAAA;AAAA,IAEjF,QAAG,iBAAiB,gCAAgC,CAAC;AAAA;AAAA;AAAA,IAGrD,UAAK,gCAAgC,gCAAgCJ,UAAS;AAAA;AAAA,IAE9E,SAAI,gCAAgC,GAAG,iBAAiB,CAAC;AAAA;AAAA;AAAA;AAAA,IAIzD,SAAI,0BAA0B,0BAA0B,MAAM;AAAA;AAAA,IAE9D,UAAK,0BAA0B,0BAA0B,CAAC;AAAA;AAAA,IAE1D,SAAI,wBAAwB;AAAA,EAClC,GAlCwB;AAoCxB,QAAM,+BAA+B,wBAACI,uBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA,IAK9D,WAAM,gCAAgC,MAAM;AAAA;AAAA,IAE5C;AAAA,MACF;AAAA,MACA;AAAA,MACAA,qBAAoB,YAAY,KAAK;AAAA,IACvC;AAAA;AAAA;AAAA,IAGI,WAAM,0BAA0B,MAAM;AAAA;AAAA,IAEtC,UAAK,iBAAiB,8BAA8B;AAAA;AAAA,IAEpD,SAAI,gCAAgC,GAAG,iBAAiB,CAAC;AAAA;AAAA;AAAA;AAAA,IAIzD,SAAI,0BAA0B,0BAA0B,MAAM;AAAA;AAAA,IAE9D,UAAK,0BAA0B,0BAA0B,CAAC;AAAA;AAAA,IAE1D,SAAI,wBAAwB;AAAA,EAClC,GA3BqC;AA6BrC,QAAM,SAAS,8BAA8B,cAAc;AAG3D,MAAI,eAAe,SAAS,QAAQ;AAClC,UAAM,IAAI;AAAA,MACR,iDAAiD,MAAM,oBAAoB,eAAe,MAAM;AAAA,IAClG;AAAA,EACF;AAGA,QAAM,sBAAsB,eAAe,MAAM,MAAM;AAGvD,MAAI,oBAAoB,SAAS,GAAG;AAElC,UAAMA,qBAAoB,gBAAgB,CAAC,EAAE;AAC7C,QAAIA,qBAAoB,OAAO;AAC7B,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAGA,UAAMC,oBAAmB,IAAI;AAAA,MAC3B,gBAAgBD,kBAAiB,EAAE;AAAA,QAAQ,CAAC,gBAC1C,MAAM,KAAK,YAAY,SAAS,CAAC;AAAA,MACnC;AAAA,IACF;AAGA,UAAME,aAAY,IAAI,WAAW,MAAM;AAGvC,UAAM,sBAAsB,IAAI,WAAW,CAAC;AAC5C,UAAM,WAAW,IAAI,SAAS,oBAAoB,MAAM;AACxD,aAAS,aAAa,GAAG,OAAO,oBAAoB,MAAM,GAAG,KAAK;AAGlE,UAAMC,kBAAiB,IAAI,WAAW;AAAA,MACpC,GAAGF;AAAA,MACH,GAAGC;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AAED,WAAO;AAAA,MACL,gBAAgBE,QAAO,CAACD,iBAAgB,mBAAmB,CAAC;AAAA,MAC5D,YAAYA,gBAAe;AAAA,IAC7B;AAAA,EACF;AAEA,QAAM,oBAAoB,6BAA6B,CAAC,EAAE;AAC1D,MAAI,oBAAoB,OAAO;AAC7B,UAAM,IAAI,MAAM,4CAA4C;AAAA,EAC9D;AAGA,QAAM,mBAAmB,IAAI;AAAA,IAC3B,6BAA6B,iBAAiB,EAAE;AAAA,MAAQ,CAAC,gBACvD,MAAM,KAAK,YAAY,SAAS,CAAC;AAAA,IACnC;AAAA,EACF;AAGA,QAAM,YAAY,IAAI,WAAW,MAAM;AAGvC,QAAM,iBAAiB,IAAI,WAAW,CAAC,GAAG,kBAAkB,GAAG,SAAS,CAAC;AAEzE,SAAO,EAAE,eAAe;AAC1B;AApJgB;;;ADvDhB,eAAe,WAAW,UAAmB,eAAuC;AAClF,QAAM,EAAE,iBAAiB,IAAI,MAAM,SAAS,SAAS,WAAW;AAAA,IAC9D,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,uBAAuB,CAAC;AAAA,EAC1B,CAAC;AAED,SAAO;AACT;AARe;AAUf,SAAS,0BAA0B,SAAkB,wBAAgC;AACnF,QAAM,EAAE,eAAe,sBAAsB,IAAI;AACjD,QAAM,gBAA0C,CAAC;AACjD,wBAAsB,QAAQ,CAAC,WAAW;AAExC,kBAAc,KAAK,EAAE,GAAG,QAAQ,QAAQ,OAAO,SAAS,uBAAuB,CAAC;AAAA,EAClF,CAAC;AACD,SAAO,EAAE,GAAG,SAAS,cAAc;AACrC;AARS;AAiBT,eAAsB,wBAA2B;AAAA,EAC/C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAgB;AACd,QAAM,SAAS,cAAcE,WAAS,QAAQ,CAAC;AAE/C,QAAM,qBAAqB,8BAA8BA,WAAS,QAAQ,CAAC;AAC3E,QAAM,qCAAqC,SAAS,MAAM,GAAG,kBAAkB;AAE/E,QAAM,gBAAgB,IAAI,uBAAuB;AAAA,IAC/C;AAAA,IACA,cAAc;AAAA,IACd,WAAW,CAAC,kCAAkC;AAAA,EAChD,CAAC;AAED,QAAM,EAAE,gBAAgB,WAAW,IAAI;AAAA,IACrCA,WAAS,QAAQ;AAAA,IACjBA,WAAS,MAAM;AAAA,EACjB;AAEA,QAAM,4BAA4B,mCAAmC,UAAU,cAAc;AAC7F,QAAM,SAAS,0BAA0B,KAAK,yBAAyB;AAEvE,QAAM,cAAc,MAAM,SAAS,SAAS,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS;AAEzE,QAAM,iBAAiB,uBAAuB,gBAAgB,MAAM;AACpE,MAAI,YAAY;AACd,WAAO;AAAA,MACL,eAAe,6BAAM,QAAQ,QAAQ,cAAc,GAApC;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAEA,QAAM,oBAAoB,MAAM,WAAW,UAAU,aAAa;AAGlE,QAAM,gBAAgB,mCAAY;AAChC,QAAI;AACF,YAAM,SAAS,MAAM,SAAS,gBAAgB,iBAAiB;AAC/D,YAAM,SAAS,MAAM,OAAO,cAAc;AAE1C,UAAI,OAAO,oCAAsC;AAC/C,cAAM,IAAI,MAAM;AAAA,MAClB;AAAA,IACF,SAAS,KAAc;AACrB,YAAM,IAAIC,YAAUC,YAAU,oBAAoB,kCAAkC;AAAA,IACtF;AAEA,WAAO;AAAA,EACT,GAbsB;AAetB,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAzDsB;;;AExCtB,SAAS,QAAAC,aAAY;AACrB,SAAS,gBAAgB;AACzB,SAAS,kBAAkB,WAAAC,WAAS,UAAAC,SAAQ,YAAAC,kBAAgB;AAYrD,IAAM,mBAAmB,wBAAC,aAAgC;AAC/D,QAAM,YAAY,KAAK;AACvB,QAAM,QAAQC,WAAS,QAAQ;AAC/B,QAAM,SAAS,iBAAiB,OAAO,SAAS;AAChD,QAAM,WAAW,SAAS,OAAO,IAAI,CAAC,MAAMC,UAAQ,CAAC,CAAC,CAAC;AAEvD,QAAM,gBAAgBC,MAAKC,QAAO,CAAC,cAAc,QAAQ,CAAC,CAAC;AAC3D,SAAO;AACT,GARgC;;;AH6BzB,IAAM,YAAN,MAAM,mBAGH,QAAQ;AAAA,EA9ClB,OA8CkB;AAAA;AAAA;AAAA,EAChB;AAAA,EACA,gBAAuB,CAAC;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAA2C;AACzC,UAAM,EAAE,gBAAgB,mBAAmB,IAAI,WAAU;AAAA,MACvD;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAM,UAAU,IAAIC,UAAQ,iBAAiB,cAAc,CAAC;AAC5D,UAAM,SAAS,QAAQ;AAEvB,SAAK,kBAAkBC,WAAS,QAAQ;AACxC,SAAK,QAAQ;AACb,SAAK,YAAY;AACjB,SAAK,wBAAwB;AAC7B,QAAI,SAAS,UAAa,KAAK,SAAS,GAAG;AACzC,WAAK,gBAAgB;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iCACE,wBACA;AACA,UAAMC,WAAU,sBAAsB,sBAAsB;AAE5D,UAAM,mBAAmB,KAAK,+BAA+BA,QAAO;AAEpE,QAAI,qBAAqB,IAAI;AAC3B,MAAAA,SAAQ,cAAc,gBAAgB;AAAA,IACxC;AAEA,IAAAA,SAAQ,OAAO,OAAO,2BAA2B,EAAE,QAAQ,CAAC,UAAU;AACpE,UAAI,gCAAgC,OAAO,KAAK,OAAO,GAAG;AAExD,cAAM,YAAYC,UAAQ,KAAK,KAAK;AAEpC,cAAM,gBAAgBA,UAAQ,KAAK,iBAAiB,CAAC;AAErD,cAAM,eAAe;AAAA,MACvB;AAAA,IACF,CAAC;AAED,WAAOD;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQS,gBACP,wBAC8B;AAC9B,UAAM,qBAAqB,sBAAsB,sBAAsB;AAEvE,WAAO,MAAM,gBAAgB,oBAAoB,EAAE,wBAAwB,MAAM,CAAC;AAAA,EACpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQS,oBACP,wBACqB;AACrB,UAAM,qBAAqB,sBAAsB,sBAAsB;AACvE,WAAO,MAAM,oBAAoB,oBAAoB,EAAE,wBAAwB,MAAM,CAAC;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAA+B;AAC7B,QAAI,CAAC,KAAK,cAAc,QAAQ;AAC9B,aAAO,IAAI,WAAW;AAAA,IACxB;AAEA,UAAM,SAAS,KAAK,WAAW,UAAU;AACzC,WAAO,QAAQ,gBAAgB,KAAK,aAAa,KAAK,IAAI,WAAW;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cACE,YAA4F,CAAC,GAC7F;AACA,WAAO,IAAI,WAAiC;AAAA,MAC1C,UAAU,KAAK;AAAA,MACf,KAAK,KAAK,UAAU;AAAA,MACpB,UAAU,KAAK;AAAA,MACf,MAAM,UAAU,QAAQ,KAAK;AAAA,MAC7B,uBAAuB,UAAU,yBAAyB,KAAK;AAAA,IACjE,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAe,qBACb,OACA,SACA,uBACA;AACA,QAAI,iBAAiBD,WAAS,KAAK;AACnC,UAAM,eAA0B,IAAIG,WAAU,OAAO;AAErD,QAAI,aAAa,UAAU,SAAS,QAAW;AAC7C,YAAM,IAAIC;AAAA,QACRC,YAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAEA,QAAI,yBAAyB,OAAO,KAAK,qBAAqB,EAAE,QAAQ;AACtE,uBAAiB,WAAU;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA,oBAAoB;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAe,oBACb,YACA,sBACqB;AACrB,UAAM,YAAY,MAAM,KAAK,SAAS;AAAA,MACpC,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACF;AACA,WAAO,UAAU,IAAI,CAAC,cAAc;AAAA,MAClC,GAAG;AAAA,MACH,WAAWH,UAAQ,KAAK,KAAK;AAAA,MAC7B,eAAeA,UAAQ,KAAK,iBAAiB,CAAC;AAAA,IAChD,EAAE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQS,sBAAsB,OAAyC;AACtE,WAAO,MAAM,sBAAsB,KAAK,EAAE,IAAI,CAAC,UAAU;AAAA,MACvD,GAAG;AAAA,MACH,WAAWA,UAAQ,KAAK,KAAK;AAAA,MAC7B,eAAeA,UAAQ,KAAK,iBAAiB,CAAC;AAAA,IAChD,EAAE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAe,yBACb,OACA,uBACA,cACA;AACA,UAAM,eAAe;AAErB,QAAI;AACF,UAAI,OAAO,KAAK,aAAa,aAAa,EAAE,WAAW,GAAG;AACxD,cAAM,IAAIE;AAAA,UACRC,YAAU;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAEA,aAAO,QAAQ,qBAAqB,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC9D,YAAI,CAAC,cAAc,cAAc,GAAG,GAAG;AACrC,gBAAM,IAAID;AAAA,YACRC,YAAU;AAAA,YACV,mCAAmC,GAAG;AAAA,UACxC;AAAA,QACF;AAEA,cAAM,EAAE,OAAO,IAAI,aAAa,cAAc,GAAG;AAEjD,cAAM,UAAU,aAAa,mBAAmB,KAAK,KAAmB;AAExE,qBAAa,IAAI,SAAS,MAAM;AAAA,MAClC,CAAC;AAAA,IACH,SAAS,KAAK;AACZ,YAAM,IAAID;AAAA,QACRC,YAAU;AAAA,QACV,yCAAiD,IAAK,OAAO;AAAA,MAC/D;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,+BAA+BJ,UAAqC;AAC1E,UAAM,kBAAkBA,SAAQ,OAC7B,OAAO,sBAAsB,EAC7B,OAAO,CAAC,UAAU,gCAAgC,OAAO,KAAK,OAAO,CAAC;AAEzE,QAAI,QAAQ;AAEZ,UAAM,0BAA0B,gBAAgB,KAAK,CAAC,UAAU,CAAC,MAAM,SAAS;AAEhF,QAAI,yBAAyB;AAC3B,cAAQ,wBAAwB;AAEhC,YAAM,oBAAoB,gBAAgB,MAAM,CAAC,UAAU,CAAC,MAAM,SAAS;AAE3E,UAAI,CAAC,mBAAmB;AAQtB,cAAM,2BAA2B,CAAC,CAAC,gBAAgB,CAAC,GAAG;AAEvD,YAAI,0BAA0B;AAC5B,kBAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,OAAiB,SAAkB;AACvC,WAAO,wBAA2B;AAAA,MAChC,UAAU;AAAA,MACV,KAAK,KAAK,UAAU;AAAA,MACpB,UAAU,KAAK;AAAA,MACf,wBAAwB,wBAAC,gBAAgB,WACvC,IAAI,WAAU;AAAA,QACZ,UAAU;AAAA,QACV,KAAK;AAAA,QACL,UAAU,KAAK;AAAA,QACf,MAAM,KAAK;AAAA,MACb,CAAC,GANqB;AAAA,IAO1B,CAAC;AAAA,EACH;AACF;;;AIpWA,SAAS,aAAAK,aAAW,aAAAC,mBAAiB;;;ACArC,SAAS,aAAAC,mBAAiB;AAE1B,SAAS,gBAAAC,qBAAoB;;;ACHtB,IAAK,uBAAL,kBAAKC,0BAAL;AAEL,EAAAA,sBAAA,UAAO;AACP,EAAAA,sBAAA,aAAU;AAEV,EAAAA,sBAAA,aAAU;AACV,EAAAA,sBAAA,gBAAa;AACb,EAAAA,sBAAA,iBAAc;AAEd,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,oBAAiB;AAEjB,EAAAA,sBAAA,iBAAc;AACd,EAAAA,sBAAA,qBAAkB;AAElB,EAAAA,sBAAA,YAAS;AACT,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,eAAY;AAEZ,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,oBAAiB;AACjB,EAAAA,sBAAA,gBAAa;AACb,EAAAA,sBAAA,mBAAgB;AAEhB,EAAAA,sBAAA,YAAS;AACT,EAAAA,sBAAA,YAAS;AACT,EAAAA,sBAAA,YAAS;AA1BC,SAAAA;AAAA,GAAA;AA6BL,IAAK,0BAAL,kBAAKC,6BAAL;AACL,EAAAA,yBAAA,gBAAa;AACb,EAAAA,yBAAA,sBAAmB;AACnB,EAAAA,yBAAA,gBAAa;AACb,EAAAA,yBAAA,cAAW;AACX,EAAAA,yBAAA,oBAAiB;AACjB,EAAAA,yBAAA,cAAW;AACX,EAAAA,yBAAA,oBAAiB;AACjB,EAAAA,yBAAA,YAAS;AACT,EAAAA,yBAAA,UAAO;AATG,SAAAA;AAAA,GAAA;AAYL,IAAM,yBAAyB;;;ACtC/B,IAAM,eAAN,MAA8C;AAAA,EAHrD,OAGqD;AAAA;AAAA;AAAA,EAC3C;AAAA,EAER,YAAY,cAAuB;AACjC,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,MAAM,QAAQ,KAAa,OAA8B;AACvD,SAAK,QAAQ,QAAQ,KAAK,KAAK;AAAA,EACjC;AAAA,EAEA,MAAM,QAAQ,KAAiD;AAC7D,WAAO,KAAK,QAAQ,QAAQ,GAAG;AAAA,EACjC;AAAA,EAEA,MAAM,WAAW,KAA4B;AAC3C,SAAK,QAAQ,WAAW,GAAG;AAAA,EAC7B;AAAA,EAEA,MAAM,QAAuB;AAC3B,SAAK,QAAQ,MAAM;AAAA,EACrB;AACF;;;AFoEO,IAAe,gBAAf,cAAqCC,cAAkC;AAAA,EA7F9E,OA6F8E;AAAA;AAAA;AAAA,EAC5E,OAAe;AAAA,EACf,WAA8B,CAAC;AAAA,EAC/B,YAAqB;AAAA,EACrB,YAAqB;AAAA,EACrB,WAAoB;AAAA,EACpB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT,MAAM,OAAyB;AAC7B,UAAM,IAAIC,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,UAA4B;AAChC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,cAAgC;AACpC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,WAAmC;AACvC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,UAA4B;AAChC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,aAA+B;AACnC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,YAAY,UAAkB,UAA4C;AAC9E,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,gBAAgB,UAAkB,cAAuD;AAC7F,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,gBACJ,UACA,cACA,SACuC;AACvC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,iBAAyC;AAC7C,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,UAAU,SAAyC;AACvD,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,SAAS,QAAiC;AAC9C,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,SAAgC;AACpC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,WAAW,aAAuC;AACtD,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,cAAc,UAAoD;AACtE,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAoC;AACxC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,iBAAmC;AACvC,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,OAAO,aAAqB,MAAiC;AACjE,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,OAAO,KAAsC;AACjD,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,OAAO,KAA+B;AAC1C,UAAM,IAAIA,YAAUA,YAAU,MAAM,iBAAiB,yBAAyB;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQS,GACP,WACA,UACM;AACN,UAAM,GAAG,WAAW,QAAQ;AAC5B,WAAO;AAAA,EACT;AACF;;;AG9UO,SAAS,SACd,IACA,EAAE,OAAAC,QAAO,WAAW,IAAI,GACrB;AACH,SAAQ,UAAU,SAAoB;AACpC,QAAIA,OAAM,GAAG,KAAKA,OAAM,GAAG,GAAG,OAAO;AACnC,aAAOA,OAAM,GAAG,GAAG;AAAA,IACrB;AACA,iBAAaA,OAAM,GAAG,GAAG,OAAO;AAChC,UAAM,SAAS,MAAM,GAAG,GAAG,IAAI;AAI/B,IAAAA,OAAM,GAAG,IAAI;AAAA,MACX,SAAS;AAAA,QACP,WAAW,MAAM;AACf,UAAAA,OAAM,GAAG,IAAI;AAAA,QACf,GAAG,SAAS;AAAA,MACd;AAAA,MACA,OAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AACF;AAxBgB;;;ACRT,SAAS,2BAA2B,WAA0B;AACnE,SAAO;AAAA,IACL,IAAI,YAAY,wBAAwB;AAAA,MACtC,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AACF;AANgB;;;ACPhB,SAAS,aAAAC,mBAAiB;AAUnB,SAAS,eAA4B;AAC1C,QAAM,QAAyB,CAAC;AAEhC,QAAM,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/C,UAAM,SAAS;AACf,UAAM,UAAU;AAAA,EAClB,CAAC;AAED,SAAO;AACT;AATgB;AAYhB,eAAsB,YACpB,SACA,UAAkB,MACL;AACb,QAAM,iBAAiB,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtD,eAAW,MAAM;AACf,aAAO,IAAIC,YAAUA,YAAU,MAAM,kBAAkB,mBAAmB,CAAC;AAAA,IAC7E,GAAG,OAAO;AAAA,EACZ,CAAC;AACD,SAAO,QAAQ,KAAK,CAAC,gBAAgB,OAAO,CAAC;AAC/C;AAVsB;;;ANFtB,IAAM,wBAAwB;AAK9B,IAAM,kBAAkB;AAExB,IAAM,EAAE,KAAK,IAAI;AAkDV,IAAM,OAAN,MAAM,cAAa,cAAiC;AAAA,EA7E3D,OA6E2D;AAAA;AAAA;AAAA,EACzD,OAAO,cAAc;AAAA,EACrB,OAAO,gBAA4B,CAAC;AAAA,EAC5B,WAAoC;AAAA,EACpC,cAAoC,CAAC;AAAA,EACrC,gBAAqC;AAAA,EACrC,gBAAmC,CAAC;AAAA,EACpC,qBAAqB,6BAAM;AAAA,EAAC,GAAP;AAAA,EACrB,aAAuB,CAAC;AAAA,EACxB;AAAA,EACA,yBAA+C;AAAA,EAEvD,YAAY,SAAqB,MAAK,eAAe;AACnD,UAAM;AAEN,SAAK,gBAAgB,GAAK;AAE1B,SAAK,cAAc,OAAO,cAAc,CAAC;AAEzC,SAAK,gBAAgB,KAAK,gBAAgB,OAAO,YAAY;AAE7D,SAAK,WAAW,OAAO,YAAY,SAAY,KAAK,WAAW,IAAI,OAAO;AAE1E,SAAK,aAAa;AAClB,SAAK,yBAAyB,KAAK,WAAW;AAAA,EAChD;AAAA,EAEA,MAAc,aAA4B;AACxC,QAAI;AACF,YAAM,kBAAkB,KAAK,oBAAoB;AACjD,WAAK,qBAAqB,KAAK,uBAAuB;AACtD,YAAM;AAAA,IACR,SAAS,OAAO;AACd,YAAM,IAAIC,YAAUC,YAAU,kBAAkB,mCAAmC;AAAA,IACrF;AAAA,EACF;AAAA,EAEA,MAAa,OAAsB;AACjC,UAAM,KAAK;AACX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,gBAAgB,cAAkD;AACxE,QAAI,cAAc;AAChB,aAAO;AAAA,IACT;AACA,QAAI,OAAO,WAAW,aAAa;AACjC,aAAO;AAAA,IACT;AACA,QAAI,OAAO,aAAa,aAAa;AACnC,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,aAA0C;AAChD,QAAI,OAAO,WAAW,aAAa;AACjC,aAAO,IAAI,aAAa,OAAO,YAAY;AAAA,IAC7C;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,sBAAoD;AAChE,UAAM,gBACH,MAAM,KAAK,UAAU,QAAQ,MAAK,WAAW,KAAM,KAAK,YAAY,CAAC,GAAG;AAC3E,QAAI,eAAe;AAEjB,aAAO,KAAK,gBAAgB,eAAe;AAAA,QACzC,YAAY;AAAA,MACd,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,qBAAqB,QAAwB;AACnD,QAAI,CAAC,KAAK,mBAAmB;AAC3B;AAAA,IACF;AACA,UAAM,mBAAmB,KAAK;AAC9B,SAAK,cAAc,IAAI,CAAC,UAAU,MAAM,CAAC;AACzC,SAAK,gBAAgB,OAAO,IAAI,CAAC,UAAU;AACzC,YAAM,UAAU,2BAAI,SAAoB,KAAK,KAAK,OAAO,GAAG,IAAI,GAAhD;AAChB,uBAAiB,GAAG,OAAkC,OAAO;AAC7D,aAAO,MAAM,iBAAiB,IAAI,OAAO,OAAO;AAAA,IAClD,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,WAAW,WAAmB,MAAiB;AAC3D,UAAM,eAAe,MAAM,KAAK,aAAa;AAC7C,UAAM,KAAK,cAAc;AACzB,QAAI,CAAC,KAAK,qBAAqB,CAAC,cAAc;AAC5C,YAAM,IAAID;AAAA,QACRC,YAAU;AAAA,QACV,qCAAqC,MAAM;AAAA,MAC7C;AAAA,IACF;AACA,QAAI,OAAO,KAAK,kBAAkB,MAA6B,MAAM,YAAY;AAC/E,aAAQ,KAAK,kBAAkB,MAA6B,EAAuB,GAAG,IAAI;AAAA,IAC5F;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,eAAqB;AAC3B,WAAO,OAAO,oBAAoB,EAAE,QAAQ,CAAC,WAAW;AACtD,WAAK,MAAM,IAAI,UAAU,SAAoB,KAAK,WAAW,QAAQ,GAAG,IAAI;AAAA,IAC9E,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,qBACZ,WACiB;AAIjB,UAAM,mBAAmB,KAAK,IAAI;AAClC,UAAM,CAAC,aAAa,IAAI,IAAI,MAAM,QAAQ,WAAW;AAAA,MACnD,YAAY,UAAU,YAAY,CAAC;AAAA,MACnC,YAAY,KAAK,cAAc,SAAS,CAAC;AAAA,IAC3C,CAAC;AAGD,UAAM,UAAU,oBAAoB,UAAU,iBAAiB;AAC/D,QAAI,CAAC,SAAS;AAEZ,gBAAU,gBAAgB,KAAK,IAAI;AAEnC,gBAAU,YAAY,KAAK,WAAW,eAAe,KAAK;AAE1D,gBAAU,YAAY,YAAY,WAAW,eAAe,YAAY;AAAA,IAC1E;AACA,WAAO;AAAA,MACL,WAAW,UAAU;AAAA,MACrB,WAAW,UAAU;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,wBAA2C;AACvD,WAAO,QAAQ;AAAA,MACb,KAAK,YAAY,IAAI,OAAO,cAAc,KAAK,qBAAqB,SAAS,CAAC;AAAA,IAChF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,cAAc,WAA2B;AACrD,UAAM,eAAe,aAAa,KAAK;AACvC,QAAI,CAAC,cAAc;AACjB,aAAO;AAAA,IACT;AAGA,QAAI;AACF,aAAO,MAAM,SAAS,YAAY,YAAY,aAAa,KAAK,CAAC,GAAG;AAAA,QAClE,KAAK,aAAa;AAAA,QAClB,OAAO,KAAK;AAAA,QACZ,WAAW;AAAA,MACb,CAAC,EAAE;AAAA,IACL,QAAQ;AACN,YAAM,IAAID,YAAUC,YAAU,kBAAkB,qCAAqC;AAAA,IACvF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,yBAAyB,6BAAM;AACrC,UAAM,EAAE,eAAe,aAAa,IAAI;AACxC,UAAM,YAAY;AAClB,QAAI,cAAc,IAAI;AACpB,mBAAa,GAAG,WAAW,KAAK,YAAY;AAC5C,aAAO,MAAM;AACX,qBAAa,MAAM,WAAW,KAAK,YAAY;AAAA,MACjD;AAAA,IACF;AACA,QAAI,cAAc,kBAAkB;AAClC,YAAM,UAAU,wBAAC,MAAkC;AAEjD,aAAK,aAAa,EAAE,MAAM;AAAA,MAC5B,GAHgB;AAIhB,mBAAa,iBAAiB,WAAW,OAAO;AAChD,aAAO,MAAM;AACX,qBAAa,sBAAsB,WAAW,OAAO;AAAA,MACvD;AAAA,IACF;AACA,WAAO,MAAM;AAAA,IAAC;AAAA,EAChB,GApBiC;AAAA;AAAA;AAAA;AAAA,EAyBzB,eAAe,8BAAO,cAA4C;AACxE,QAAI,CAAC,KAAK,aAAa,SAAS,GAAG;AACjC,WAAK,YAAY,KAAK,SAAS;AAAA,IACjC;AAEA,UAAM,KAAK,qBAAqB,SAAS;AAEzC,SAAK,KAAK,KAAK,OAAO,YAAY,KAAK,WAAW;AAElD,QAAI,CAAC,KAAK,mBAAmB;AAE3B,YAAM,KAAK,gBAAgB,UAAU,MAAM;AAAA,QACzC,YAAY;AAAA,MACd,CAAC;AAAA,IACH;AAAA,EACF,GAfuB;AAAA,EAiBf,yBAAyB,mCAAY;AAC3C,UAAM,CAAC,aAAaC,WAAU,cAAc,IAAI,MAAM,QAAQ,IAAI;AAAA,MAChE,KAAK,YAAY;AAAA,MACjB,KAAK,SAAS;AAAA,MACd,KAAK,eAAe;AAAA,IACtB,CAAC;AACD,SAAK,KAAK,KAAK,OAAO,YAAY,WAAW;AAC7C,SAAK,KAAK,KAAK,OAAO,UAAUA,SAAQ;AACxC,SAAK,KAAK,KAAK,OAAO,gBAAgB,cAAc;AACpD,QAAI,aAAa;AACf,YAAM,CAAC,UAAU,cAAc,IAAI,MAAM,QAAQ,IAAI;AAAA,QACnD,KAAK,SAAS;AAAA,QACd,KAAK,eAAe;AAAA,MACtB,CAAC;AACD,WAAK,KAAK,KAAK,OAAO,UAAU,QAAQ;AACxC,WAAK,KAAK,KAAK,OAAO,gBAAgB,cAAc;AAAA,IACtD;AAAA,EACF,GAjBiC;AAAA;AAAA;AAAA;AAAA,EAsBjC,eAAe,wBAAC,cACd,KAAK,YAAY,KAAK,CAAC,MAAM;AAC3B,UAAM,gBAAgB,OAAO,cAAc,WAAW,YAAY,UAAU;AAC5E,WAAO,EAAE,SAAS,iBAAiB,MAAM;AAAA,EAC3C,CAAC,KAAK,MAJO;AAAA;AAAA;AAAA;AAAA,EASf,MAAM,aAA4C;AAChD,UAAM,KAAK,sBAAsB;AACjC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBACJ,eACA,UAAsC;AAAA,IACpC,YAAY;AAAA,EACd,GACkB;AAClB,UAAM,YAAY,KAAK,aAAa,aAAa;AACjD,QAAI,CAAC,WAAW;AACd,aAAO;AAAA,IACT;AACA,QAAI,KAAK,mBAAmB,SAAS,eAAe;AAClD,aAAO;AAAA,IACT;AACA,UAAM,EAAE,UAAU,IAAI,MAAM,KAAK,qBAAqB,SAAS;AAC/D,QAAI,WAAW;AACb,WAAK,oBAAoB;AACzB,WAAK,KAAK,KAAK,OAAO,kBAAkB,SAAS;AACjD,WAAK,qBAAqB,OAAO,OAAO,uBAAuB,CAAC;AAChE,YAAM,KAAK,UAAU,QAAQ,MAAK,aAAa,UAAU,IAAI;AAI7D,UAAI,QAAQ,YAAY;AAEtB,aAAK,uBAAuB;AAAA,MAC9B;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAqD;AACnD,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAiC;AAGrC,QAAI,KAAK,mBAAmB;AAC1B,aAAO;AAAA,IACT;AAIA,UAAM,QAAQ,aAAsB;AACpC,SAAK,KAAK,KAAK,OAAO,kBAAkB,MAAM;AAC5C,YAAM,QAAQ,IAAI;AAAA,IACpB,CAAC;AAGD,WAAO,YAAY,MAAM,SAAS,qBAAqB,EACpD,KAAK,MAAM,IAAI,EACf,MAAM,MAAM,KAAK;AAAA,EACtB;AAAA,EAEA,MAAM,YAA8B;AAClC,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,YAAY,mBAA2D;AAC3E;AAAA,MACE;AAAA,IACF;AACA,WAAO,KAAK,aAAa,iBAAiB;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,aAAa,mBAA2D;AAEpF,QAAI;AAEJ,QAAI,qBAAqB,4BAA4B,mBAAmB;AACtE,iBAAW;AAAA,IAEb,WAAW,qBAAqB,aAAa,qBAAqB,SAAS,mBAAmB;AAC5F,iBAAW,IAAI,SAAS,kBAAkB,GAAG;AAAA,IAE/C,WAAW,CAAC,mBAAmB;AAC7B,YAAM,iBAAiB,MAAM,KAAK,eAAe;AACjD,iBAAW,IAAI,SAAS,eAAe,GAAG;AAAA,IAG5C,OAAO;AACL,YAAM,IAAIF,YAAUC,YAAU,kBAAkB,wBAAwB;AAAA,IAC1E;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,UACJ,SACA,mBACkB;AAClB,UAAM,WAAW,MAAM,KAAK,aAAa,iBAAiB;AAC1D,WAAO,IAAI,QAAQ,SAAS,UAAU,IAAI;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAoB;AAElB,SAAK,cAAc,IAAI,CAAC,UAAU,MAAM,CAAC;AACzC,SAAK,mBAAmB;AAExB,SAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAuB;AAC3B,UAAM,KAAK,UAAU,WAAW,MAAK,WAAW;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAyB;AAC7B,SAAK,YAAY;AACjB,UAAM,KAAK,MAAM;AAAA,EACnB;AACF;","names":["assets","UTXO_ID_LEN","Address","randomBytes","ErrorCode","FuelError","bn","InputType","OutputType","arrayify","hexlify","isDefined","clone","Address","ErrorCode","FuelError","bn","InputMessageCoder","TransactionCoder","TransactionType","arrayify","hexlify","DateTime","isDefined","sleep","gql","clone","bn","hexlify","hexlify","bn","ErrorCode","FuelError","ErrorCode","FuelError","FuelError","ErrorCode","FuelError","ErrorCode","FuelError","ErrorCode","hexlify","ErrorCode","FuelError","bn","hexlify","hexlify","bn","FuelError","ErrorCode","ZeroBytes32","ErrorCode","FuelError","bn","hexlify","hexlify","bn","ZeroBytes32","FuelError","ErrorCode","UTXO_ID_LEN","ZeroBytes32","FuelError","bn","InputType","OutputType","TransactionType","hexlify","isDefined","ReceiptType","ZeroBytes32","ErrorCode","FuelError","bn","InputType","OutputType","hexlify","arrayify","bn","cache","ZeroBytes32","arrayify","hexlify","FuelError","ErrorCode","InputType","OutputType","ReceiptType","ErrorCode","FuelError","FuelError","ErrorCode","bn","ReceiptType","arrayify","ReceiptType","bn","arrayify","hexlify","hexlify","ErrorCode","FuelError","bn","ReceiptType","FAILED_TRANSFER_TO_ADDRESS_SIGNAL","FuelError","ErrorCode","ReceiptType","bn","FAILED_TRANSFER_TO_ADDRESS_SIGNAL","ErrorCode","FuelError","bn","InputType","OutputType","hexlify","InputType","bn","hexlify","cache","OutputType","FuelError","ErrorCode","arrayify","hexlify","arrayify","hexlify","bn","isDefined","ZeroBytes32","InputType","OutputType","hexlify","FuelError","UTXO_ID_LEN","clone","ZeroBytes32","bn","TransactionType","InputType","OutputType","TransactionCoder","concat","clone","TransactionType","ZeroBytes32","clone","InputType","bn","OutputType","concat","TransactionCoder","clone","TransactionType","ZeroBytes32","bn","TransactionType","OutputType","arrayify","hexlify","clone","arrayify","hexlify","arrayify","hexlify","clone","TransactionType","hexlify","ZeroBytes32","bn","OutputType","arrayify","addressify","ZeroBytes32","bn","InputType","OutputType","TransactionType","arrayify","hexlify","clone","arrayify","arrayify","clone","TransactionType","bn","arrayify","ZeroBytes32","hexlify","InputType","OutputType","addressify","FuelError","TransactionType","hexlify","clone","clone","TransactionType","hexlify","FuelError","ZeroBytes32","TransactionType","arrayify","hexlify","clone","clone","TransactionType","ZeroBytes32","hexlify","arrayify","ErrorCode","FuelError","TransactionType","TransactionType","FuelError","ErrorCode","request","FuelError","ErrorCode","hexlify","ErrorCode","FuelError","bn","TransactionCoder","arrayify","bn","PolicyType","TransactionCoder","hexlify","bn","PolicyType","TransactionCoder","TransactionType","arrayify","bn","arrayify","TransactionCoder","TransactionType","PolicyType","ZeroBytes32","ErrorCode","FuelError","bn","ReceiptType","TransactionType","ErrorCode","FuelError","InputType","InputType","FuelError","ErrorCode","OutputType","OutputType","TransactionTypeName","TransactionStatus","OperationName","AddressType","ChainName","TransactionType","FuelError","ErrorCode","ReceiptType","bn","ZeroBytes32","ReceiptType","ReceiptType","ErrorCode","FuelError","bn","FuelError","ErrorCode","bn","hexlify","bn","PolicyType","TransactionCoder","Interface","ZeroBytes32","ReceiptType","ReceiptType","ZeroBytes32","Interface","bn","tx","arrayify","TransactionCoder","sub","FuelError","ErrorCode","Interface","BigNumberCoder","ZeroBytes32","ReceiptType","ReceiptType","ZeroBytes32","Interface","BigNumberCoder","FuelError","ErrorCode","FuelError","ErrorCode","isDefined","request","sleep","cache","FuelError","document","gql","bn","ErrorCode","hexlify","gasPrice","Address","clone","TransactionCoder","arrayify","InputMessageCoder","DateTime","TransactionType","ErrorCode","FuelError","bn","TransactionCoder","arrayify","FuelError","ErrorCode","TransactionCoder","arrayify","bn","bn","TransactionCoder","arrayify","arrayify","TransactionCoder","bn","request","BigNumberCoder","Address","arrayify","concat","BigNumberCoder","concat","Address","arrayify","Address","FuelError","ErrorCode","request","bn","isCoin","requestToReestimate","clone","hexlify","arrayify","OutputType","InputType","randomBytes","UTXO_ID_LEN","isDefined","hexlify","Address","randomBytes","hash","hexlify","concat","arrayify","hexlify","Address","arrayify","concat","hash","randomBytes","Address","randomBytes","ErrorCode","FuelError","hexlify","Address","randomBytes","FuelError","ErrorCode","hexlify","hexlify","computeHmac","ErrorCode","FuelError","sha256","bn","toBytes","arrayify","hexlify","concat","dataSlice","encodeBase58","randomBytes","ErrorCode","FuelError","sha256","arrayify","hexlify","concat","Language","ErrorCode","FuelError","sha256","arrayify","arrayify","sha256","FuelError","ErrorCode","FuelError","ErrorCode","hexlify","arrayify","concat","sha256","randomBytes","MainnetPRV","hexlify","TestnetPRV","encodeBase58","concat","dataSlice","sha256","FuelError","ErrorCode","arrayify","toBytes","computeHmac","bn","Address","ErrorCode","FuelError","Address","ErrorCode","FuelError","Address","FuelError","ErrorCode","Address","ErrorCode","FuelError","Address","FuelError","ErrorCode","FuelError","ErrorCode","Address","Vault","ErrorCode","FuelError","FuelError","ErrorCode","Interface","Address","ErrorCode","FuelError","arrayify","hexlify","FuelError","ErrorCode","arrayify","BigNumberCoder","sha256","concat","asm","WORD_SIZE","BigNumberCoder","sha256","asm","numOfInstructions","instructionBytes","blobBytes","loaderBytecode","concat","arrayify","FuelError","ErrorCode","hash","hexlify","concat","arrayify","arrayify","hexlify","hash","concat","Address","arrayify","request","hexlify","Interface","FuelError","ErrorCode","ErrorCode","FuelError","FuelError","EventEmitter","FuelConnectorMethods","FuelConnectorEventTypes","EventEmitter","FuelError","cache","FuelError","FuelError","FuelError","ErrorCode","networks"]}