"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  hash: () => hash,
  hashMessage: () => hashMessage,
  sha256: () => sha256,
  uint64ToBytesBE: () => uint64ToBytesBE
});
module.exports = __toCommonJS(src_exports);

// src/hasher.ts
var import_utils = require("@fuel-ts/utils");
var import_sha256 = require("@noble/hashes/sha256");
var MESSAGE_PREFIX = "Fuel Signed Message:\n";
function sha256(data) {
  return (0, import_utils.hexlify)((0, import_sha256.sha256)((0, import_utils.arrayify)(data)));
}
__name(sha256, "sha256");
function hash(data) {
  return sha256(data);
}
__name(hash, "hash");
function uint64ToBytesBE(value) {
  const bigIntValue = BigInt(value);
  const buffer = new ArrayBuffer(8);
  const dataView = new DataView(buffer);
  dataView.setBigUint64(0, bigIntValue, false);
  return new Uint8Array(dataView.buffer);
}
__name(uint64ToBytesBE, "uint64ToBytesBE");
function hashMessage(message) {
  if (typeof message === "string") {
    return sha256((0, import_utils.toUtf8Bytes)(message));
  }
  const { personalSign } = message;
  const messageBytes = typeof personalSign === "string" ? (0, import_utils.toUtf8Bytes)(personalSign) : personalSign;
  const payload = (0, import_utils.concat)([
    (0, import_utils.toUtf8Bytes)(MESSAGE_PREFIX),
    (0, import_utils.toUtf8Bytes)(String(messageBytes.length)),
    messageBytes
  ]);
  return (0, import_utils.hexlify)(sha256(payload));
}
__name(hashMessage, "hashMessage");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  hash,
  hashMessage,
  sha256,
  uint64ToBytesBE
});
//# sourceMappingURL=index.js.map