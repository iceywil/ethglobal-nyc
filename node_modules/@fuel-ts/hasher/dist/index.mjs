var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/hasher.ts
import { arrayify, concat, hexlify, toUtf8Bytes } from "@fuel-ts/utils";
import { sha256 as sha256AsBytes } from "@noble/hashes/sha256";
var MESSAGE_PREFIX = "Fuel Signed Message:\n";
function sha256(data) {
  return hexlify(sha256AsBytes(arrayify(data)));
}
__name(sha256, "sha256");
function hash(data) {
  return sha256(data);
}
__name(hash, "hash");
function uint64ToBytesBE(value) {
  const bigIntValue = BigInt(value);
  const buffer = new ArrayBuffer(8);
  const dataView = new DataView(buffer);
  dataView.setBigUint64(0, bigIntValue, false);
  return new Uint8Array(dataView.buffer);
}
__name(uint64ToBytesBE, "uint64ToBytesBE");
function hashMessage(message) {
  if (typeof message === "string") {
    return sha256(toUtf8Bytes(message));
  }
  const { personalSign } = message;
  const messageBytes = typeof personalSign === "string" ? toUtf8Bytes(personalSign) : personalSign;
  const payload = concat([
    toUtf8Bytes(MESSAGE_PREFIX),
    toUtf8Bytes(String(messageBytes.length)),
    messageBytes
  ]);
  return hexlify(sha256(payload));
}
__name(hashMessage, "hashMessage");
export {
  hash,
  hashMessage,
  sha256,
  uint64ToBytesBE
};
//# sourceMappingURL=index.mjs.map