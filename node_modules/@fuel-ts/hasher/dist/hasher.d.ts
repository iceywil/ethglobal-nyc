import type { BytesLike } from '@fuel-ts/utils';
/**
 * - When a string is provided, we hash as a UTF-8 string using SHA-256.
 *
 * - When an object with `personalSign` property is provided, we hash using SHA-256 of the following format:
 * ```console
 * 0x19 <0x46 (F)> <uel Signed Message:\n" + len(message)> <message>
 * ```
 *
 * Following a similar approach to that of [EIP-191](https://eips.ethereum.org/EIPS/eip-191).
 */
export type HashableMessage = string | {
    personalSign: BytesLike;
};
/**
 * @param data - The data to be hashed
 * @returns A sha256 hash of the data in hex format
 */
export declare function sha256(data: BytesLike): string;
/**
 * wrap sha256
 *
 * @param data - The data to be hash
 * @returns A sha256 hash of the data
 */
export declare function hash(data: BytesLike): string;
/**
 * Convert a uint64 number to a big-endian byte array
 */
export declare function uint64ToBytesBE(value: number): Uint8Array;
/**
 * Hashes a message using SHA256.
 *
 * - When a `message` string is provided, we hash as a UTF-8 string using SHA-256.
 *
 * - When a `message` object with `personalSign` property is provided, we hash using SHA-256 of the following format:
 * ```console
 * 0x19 <0x46 (F)> <uel Signed Message:\n" + len(message)> <message>
 * ```
 *
 * Following a similar approach to that of [EIP-191](https://eips.ethereum.org/EIPS/eip-191).
 *
 * @param message - The message to be hashed @see {@link HashableMessage}
 * @returns A sha256 hash of the message
 */
export declare function hashMessage(message: HashableMessage): string;
//# sourceMappingURL=hasher.d.ts.map