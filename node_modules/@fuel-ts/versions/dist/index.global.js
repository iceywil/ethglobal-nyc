"use strict";
(() => {
  var __defProp = Object.defineProperty;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

  // src/lib/getBuiltinVersions.ts
  function getBuiltinVersions() {
    return {
      FUEL_CORE: "0.43.1",
      FORC: "0.68.1",
      FUELS: "0.100.6"
    };
  }
  __name(getBuiltinVersions, "getBuiltinVersions");

  // src/lib/semver.ts
  function parseVersion(version) {
    const [major, minor, patch] = version.split(".").map((v) => parseInt(v, 10));
    return { major, minor, patch };
  }
  __name(parseVersion, "parseVersion");
  function versionDiffs(version1, version2) {
    const semver1 = parseVersion(version1);
    const semver2 = parseVersion(version2);
    const major = semver1.major - semver2.major;
    const minor = semver1.minor - semver2.minor;
    const patch = semver1.patch - semver2.patch;
    return {
      major,
      minor,
      patch,
      fullVersionDiff: major || minor || patch
    };
  }
  __name(versionDiffs, "versionDiffs");
  function gt(version1, version2) {
    const { fullVersionDiff } = versionDiffs(version1, version2);
    return fullVersionDiff > 0;
  }
  __name(gt, "gt");
  function eq(version1, version2) {
    const { fullVersionDiff } = versionDiffs(version1, version2);
    return fullVersionDiff === 0;
  }
  __name(eq, "eq");
  function gte(version1, version2) {
    const { fullVersionDiff } = versionDiffs(version1, version2);
    return fullVersionDiff >= 0;
  }
  __name(gte, "gte");
  function majorEq(version1, version2) {
    const { major } = versionDiffs(version1, version2);
    return major === 0;
  }
  __name(majorEq, "majorEq");
  function minorEq(version1, version2) {
    const { minor } = versionDiffs(version1, version2);
    return minor === 0;
  }
  __name(minorEq, "minorEq");
  function patchEq(version1, version2) {
    const { patch } = versionDiffs(version1, version2);
    return patch === 0;
  }
  __name(patchEq, "patchEq");

  // src/lib/checkFuelCoreVersionCompatibility.ts
  function checkFuelCoreVersionCompatibility(networkVersion) {
    const { FUEL_CORE: supportedVersion } = getBuiltinVersions();
    if (/^\d+\.\d+\.\d+\D+/m.test(networkVersion)) {
      console.warn(`You're running against an unreleased fuel-core version: ${networkVersion}. Things may work as expected, but it's not guaranteed. Please use a released version.      
This unreleased fuel-core build may include features and updates not yet supported by this version of the TS-SDK.`);
    }
    return {
      supportedVersion,
      isMajorSupported: majorEq(networkVersion, supportedVersion),
      isMinorSupported: minorEq(networkVersion, supportedVersion),
      isPatchSupported: patchEq(networkVersion, supportedVersion)
    };
  }
  __name(checkFuelCoreVersionCompatibility, "checkFuelCoreVersionCompatibility");

  // src/index.ts
  var versions = getBuiltinVersions();
})();
//# sourceMappingURL=index.global.js.map